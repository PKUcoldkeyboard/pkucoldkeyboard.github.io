<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>科研相关 on Cuterwrite&#39;s Blog</title>
        <link>http://localhost:1313/categories/research/</link>
        <description>Recent content in 科研相关 on Cuterwrite&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>cuterwrite</copyright>
        <lastBuildDate>Sun, 03 Mar 2024 01:16:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/categories/research/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>笔记：Pure - 改进消息传递以更好地利用节点内的共享内存</title>
        <link>http://localhost:1313/p/pure/</link>
        <pubDate>Sun, 03 Mar 2024 01:16:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/pure/</guid>
        <description>&lt;img src="https://cuterwrite-1302252842.file.myqcloud.com/img/crop_e9af4c445d695be5002248c7c814c67d195413-2024-03-04.webp" alt="Featured image of post 笔记：Pure - 改进消息传递以更好地利用节点内的共享内存" /&gt;&lt;h1 id=&#34;笔记pure-改进消息传递以更好地利用节点内的共享内存&#34;&gt;笔记：Pure: 改进消息传递以更好地利用节点内的共享内存&lt;/h1&gt;
&lt;h2 id=&#34;引用出处&#34;&gt;引用出处&lt;/h2&gt;
&lt;p&gt;James Psota and Armando Solar-Lezama. 2024. Pure: Evolving Message Passing To Better Leverage Shared Memory Within Nodes. In Proceedings of the 29th ACM SIGPLAN Annual Symposium on Principles and Practice of Parallel Programming (&lt;strong&gt;PPoPP &amp;lsquo;24&lt;/strong&gt;). Association for Computing Machinery, New York, NY, USA, 133–146. &lt;a class=&#34;link&#34; href=&#34;https://doi.org/10.1145/3627535.3638503&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34; &gt;https://doi.org/10.1145/3627535.3638503
    &lt;span style=&#34;white-space: nowrap;&#34;&gt;&lt;svg width=&#34;.8em&#34; height=&#34;.8em&#34; viewBox=&#34;0 0 21 21&#34;
            xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;
            &lt;path d=&#34;m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z&#34; fill=&#34;currentColor&#34; /&gt;
            &lt;path d=&#34;M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z&#34;
                fill=&#34;currentColor&#34;&gt;
        &lt;/svg&gt;&lt;/span&gt;
    
&lt;/a&gt;
&lt;/p&gt;
&lt;h2 id=&#34;关键词&#34;&gt;关键词&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;并行编程模型&lt;/li&gt;
&lt;li&gt;分布式运行时系统&lt;/li&gt;
&lt;li&gt;基于任务的并行模型&lt;/li&gt;
&lt;li&gt;并发数据结构&lt;/li&gt;
&lt;li&gt;无锁数据结构&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;
&lt;p&gt;Pure 是一种新的编程模型和运行时系统，旨在在基于消息传递接口（增强使用任务利用空闲核心能力）的环境中充分利用节点内部的共享内存。Pure 通过两种方式利用共享内存：(1) 允许 rank 在等待消息到达时从彼此那里窃取工作；(2) 利用高效无锁的数据结构实现节点内各进程间高性能的消息传递和集合操作。研究者通过 micro benchmark 测试评估了 Pure 的关键消息传递和集合特性，并展示了在 CoMD 分子动力学和 miniAMR 自适应网格细化应用中，当扩展到 4096 个 rank 时，Pure 可实现高达 &lt;strong&gt;2.1x&lt;/strong&gt; 的应用加速。&lt;/p&gt;
&lt;h2 id=&#34;1-引言&#34;&gt;1. 引言&lt;/h2&gt;
&lt;p&gt;在过去的几十年里，高性能计算领域经历了从大型向量计算机到由单处理器构成的集群的转变，这些集群通过网络互连。MPI 成为了分布式内存系统上并行编程的事实标准。随着硬件的进步，多核集群的出现使得节点内的核心能够共享内存并通过网络进行通信，这促使社区不断寻求新的范式，以更有效地利用现代集群资源。目前主要的策略有两种：一种是维持统一的 MPI 编程方法，通过改进 MPI 运行时系统来更好地利用共享内存；另一种是采用 MPI+X 等混合编程模式，在节点内部采用共享内存并行性，而在节点之间继续使用 MPI。&lt;strong&gt;然而，这些方法要么可能受到 MPI 标准对接口行为规定的限制，无法最大化性能；要么给程序员带来了管理两种编程模型的挑战&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;社区已经尝试了许多其他方法，其中包括 &lt;strong&gt;PGAS&lt;/strong&gt; 模型，它提供了一种集群范围内的共享内存抽象，以及 &lt;strong&gt;Legion 、Chapel&lt;/strong&gt; 和 &lt;strong&gt;X10&lt;/strong&gt; 等隐式并行编程语言，这些语言提供了高级抽象，并尝试自动高效地协调应用程序。尽管取得了一定的进展，许多现代 HPC 应用仍然依赖于 MPI。&lt;strong&gt;MPC&lt;/strong&gt; 和 &lt;strong&gt;AMPI&lt;/strong&gt; 也尝试通过将线程作为 MPI Rank 来利用内部的共享内存，以提高性能。&lt;/p&gt;
&lt;p&gt;然而，仅使用 MPI 的方法往往比混合编程方法表现更佳。这可能是因为接口的局限性和无法充分利用节点内的共享内存，导致 MPI 未能充分发挥其潜在性能。因此，本文提出的 Pure 系统基于 MPI-everywhere 方法构建，打破了一些 MPI 的传统假设，更有效地利用了共享内存，同时避免了对现有程序进行重大重构的需求。Pure 采用了与 MPI 类似的编程模型，从而能够利用 HPC 社区现有的 MPI 知识和应用程序基础。&lt;/p&gt;
&lt;p&gt;Pure 的设计灵感源自 MPI，其核心编程模型是基于消息传递的，并可选择性地整合任务并行性。与 MPI 不同，Pure 摒弃了使用进程级别的 rank 和对旧版语言的支持限制，转而采用线程作为 rank 的实现，而非传统的进程。这种转变使得 Pure 能够高效地采用轻量级的无锁同步机制，实现同一节点内各线程间的协调。利用这种线程化的 rank 架构，Pure 构建了高效的节点内集体操作功能，并通过无锁算法来优化这些操作的性能。此外，Pure 支持将应用程序中的一部分并行代码块以标准的 C++ lambda 表达式的形式运行，这些表达式能够被当前拥有 rank 的线程以及其他空闲的 rank 自动且并发地执行，而这一切的操作都由 Pure Runtime 运行时系统自动进行调度。&lt;/p&gt;
&lt;p&gt;论文提出的优化策略涵盖了以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一种无锁消息传递方法，适用于小消息和大数据消息的传输。&lt;/li&gt;
&lt;li&gt;无锁数据结构，用于高效实现集合通信算法。&lt;/li&gt;
&lt;li&gt;一个无锁任务调度器，允许空闲线程高效地从其他线程中“窃取”工作负载。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者采用了标准的 C++ 库来确保 Pure 的广泛兼容性，并证明了 Pure 相较于经过高度优化的 MPI 基准测试，在性能上有显著提升。此外，作者还展示了 Pure 编程模型在语义上与 MPI 非常相似，这意味着从现有应用程序迁移到 Pure 是直接且简便的，这一点通过源码到源码的转换工具 mpi2pure 得到了进一步的证明。总体而言，论文的主要贡献可以总结为以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提出了一种新的编程模型和运行时系统，该系统有效地结合了消息传递和任务并行性，并且利用了标准 C++ 的特性来实现。&lt;/li&gt;
&lt;li&gt;展示了现代 C++ 如何支持更加灵活的并行运行时系统接口。&lt;/li&gt;
&lt;li&gt;描述了一个设计精良的无锁、多线程和分布式运行时系统，该系统在节点内部相比 MPI 显示出了显著的速度提升。&lt;/li&gt;
&lt;li&gt;证明了通过仅对现有的 MPI 应用程序进行最小的源代码修改，就能在 micro benchmark 测试和三个实际应用中实现与最先进的 MPI 实现相比的显著性能提升。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-pure-使用示例&#34;&gt;2. Pure 使用示例&lt;/h2&gt;
&lt;p&gt;本节通过一个简单的 1-D Stencil 算法示例来阐释 Pure 的使用方法。该示例虽然简单，但能够清晰展示 Pure 的核心概念及其与 MPI 的相似之处，为开发者编写更复杂的应用程序奠定了基础。&lt;/p&gt;
&lt;p&gt;在 MPI 版本的实现代码 &lt;code&gt;rand_stencil_mpi&lt;/code&gt; 中，计算工作主要集中在函数 &lt;code&gt;random_work&lt;/code&gt; 中执行。简单来说，&lt;code&gt;rand_stencil_mpi&lt;/code&gt; 函数首先会进入一个循环，迭代次数为 &lt;code&gt;iters&lt;/code&gt; ，在数组 &lt;code&gt;a&lt;/code&gt; 的每个元素上计算 &lt;code&gt;random_work&lt;/code&gt; 。值得注意的是，&lt;code&gt;random_work&lt;/code&gt; 执行的时间长度是可变且未知的，因此会引入负载不平衡。此外，&lt;code&gt;random_work&lt;/code&gt; 不会修改数组 &lt;code&gt;a&lt;/code&gt; 的内容，而是接着通过对相邻元素求平均值更新数组 &lt;code&gt;a&lt;/code&gt; 。最后，程序利用 &lt;code&gt;MPI_Send&lt;/code&gt; 和 &lt;code&gt;MPI_Recv&lt;/code&gt; 交换 &lt;code&gt;temp&lt;/code&gt; 数组的首尾元素，以便计算数组 &lt;code&gt;a&lt;/code&gt; 的首尾元素。由于 &lt;code&gt;random_work&lt;/code&gt; 所需时间长短不一，某些处理单元会提前完成任务，有时会在等待发送方较慢的 &lt;code&gt;MPI_Recv&lt;/code&gt; 调用时陷入阻塞状态。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://cuterwrite-1302252842.file.myqcloud.com/img/1D_stencil-2024-03-14.webp&#34;
    alt=&#34;1D_stencil-2024-03-14&#34; width=&#34;auto&#34; loading=&#34;lazy&#34;&gt;
&lt;/figure&gt;




&lt;div class=&#34;notice notice-info&#34; &gt;
    &lt;div class=&#34;notice-title&#34;&gt;&lt;svg t=&#34;1705940100069&#34; class=&#34;icon notice-icon&#34; viewBox=&#34;0 0 1024 1024&#34; version=&#34;1.1&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; p-id=&#34;6252&#34; width=&#34;200&#34; height=&#34;200&#34;&gt;&lt;path d=&#34;M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64z m32 664c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V456c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272z m-32-344c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48z&#34; p-id=&#34;6253&#34; fill=&#34;#ffffff&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;p&gt;示例 1：1-D Stencil with Random Work, MPI Version&lt;/p&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void rand_stencil_mpi(double* const a, size_t arr_sz, size_t iters, int my_rank,
                      int n_ranks) {
  double temp[arr_sz];
  for (auto it = 0; it &amp;lt; iters; ++it) {
    for (auto i = 0; i &amp;lt; arr_sz; ++i) {
      temp[i] = random_work(a[i]);
    }
    for (auto i = 1; i &amp;lt; arr_sz - 1; ++i) {
      a[i] = (temp[i - 1] + temp[i] + temp[i + 1]) / 3.0;
    }
    if (my_rank &amp;gt; 0) {
      MPI_Send(&amp;amp;temp[0], 1, MPI_DOUBLE, my_rank - 1, 0, MPI_COMM_WORLD);
      double neighbor_hi_val;
      MPI_Recv(&amp;amp;neighbor_hi_val, 1, MPI_DOUBLE, my_rank - 1, 0, MPI_COMM_WORLD,
               MPI_STATUS_IGNORE);
      a[0] = (neighbor_hi_val + temp[0] + temp[1]) / 3.0;
    }  // ends if not first rank
    if (my_rank &amp;lt; n_ranks - 1) {
      MPI_Send(&amp;amp;temp[arr_sz - 1], 1, MPI_DOUBLE, my_rank + 1, 0,
               MPI_COMM_WORLD);
      double neighbor_lo_val;
      MPI_Recv(&amp;amp;neighbor_lo_val, 1, MPI_DOUBLE, my_rank + 1, 0, MPI_COMM_WORLD,
               MPI_STATUS_IGNORE);
      a[arr_sz - 1] =
          (temp[arr_sz - 2] + temp[arr_sz - 1] + neighbor_lo_val) / 3.0;
    }  // ends if not last rank
  }    // ends for all iterations
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;示例 2 则展示了实现同样功能的 Pure 版本。其中存在一些关键差异。首先，消息调用函数接口不同，使用的是相应的 Pure 消息传递函数 &lt;code&gt;pure_send_msg&lt;/code&gt; 和 &lt;code&gt;pure_recv_msg&lt;/code&gt; ，而非 MPI 调用，但参数实质上与 MPI 对应函数基本相同。Pure 的消息传递语义类似于 MPI：发送端缓冲区被复制到接收端缓冲区。实现区别主要在于：Pure 在&lt;strong&gt;节点内部采用了轻量级的消息传递方法&lt;/strong&gt;，从而在节点内的消息传递比 MPI 的延迟更低。&lt;/p&gt;



&lt;div class=&#34;notice notice-info&#34; &gt;
    &lt;div class=&#34;notice-title&#34;&gt;&lt;svg t=&#34;1705940100069&#34; class=&#34;icon notice-icon&#34; viewBox=&#34;0 0 1024 1024&#34; version=&#34;1.1&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; p-id=&#34;6252&#34; width=&#34;200&#34; height=&#34;200&#34;&gt;&lt;path d=&#34;M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64z m32 664c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V456c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272z m-32-344c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48z&#34; p-id=&#34;6253&#34; fill=&#34;#ffffff&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;p&gt;示例 2：Pure 版本&lt;/p&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void rand_stencil_pure(double* a, const int arr_sz, const int n_iter,
                       const int my_rank, const int n_ranks) {
  double temp[arr_sz];
  PureTask rand_work_task = [a, temp, arr_sz, my_rank](
                                chunk_id_t start_chunk, chunk_id_t end_chunk,
                                std::optinal&amp;lt;void&amp;gt; cont_params) {
    auto [min_idx, max_idx] =
        pure_aligned_idx_range&amp;lt;double&amp;gt;(arr_sz, start_chunk, end_chunk);
    for (auto i = min_idx; i &amp;lt; max_idx; i++) {
      temp[i] = random_work(a[i]);
    }
  };  // ends definding the Pure Task for rand_work_task
  for (auto it = 0; it &amp;lt; n_iter; it++) {
    rand_work_task.execute();  // execute all chunks of rank_work_task
    for (auto i = 1; i &amp;lt; arr_sz - 1; ++i) {
      a[i] = (temp[i - 1] + temp[i] + temp[i + 1]) / 3.0;
    }
    if (my_rank &amp;gt; 0) {
      pure_send_msg(&amp;amp;temp[0], 1, MPI_DOUBLE, my_rank - 1, 0, PURE_COMM_WORLD);
      double neighbor_hi_val;
      pure_recv_msg(&amp;amp;neighbor_hi_val, 1, MPI_DOUBLE, my_rank - 1, 0,
                    PURE_COMM_WORLD);
      a[0] = (neighbor_hi_val + temp[0] + temp[1]) / 3.0;
    }  // ends if not first rank
    if (my_rank &amp;lt; n_ranks - 1) {
      pure_send_msg(&amp;amp;temp[arr_sz - 1], 1, MPI_DOUBLE, my_rank + 1, 0,
                    PURE_COMM_WORLD);
      double neighbor_lo_val;
      pure_recv_msg(&amp;amp;neighbor_lo_val, 1, MPI_DOUBLE, my_rank + 1, 0,
                    PURE_COMM_WORLD);
      a[arr_sz - 1] =
          (temp[arr_sz - 2] + temp[arr_sz - 1] + neighbor_lo_val) / 3.0;
    }  // ends if not last rank
  }    // ends definding the Pure Task for rand_work_task
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更重要的差异在于 Pure 中增加的 &lt;strong&gt;Pure Task&lt;/strong&gt; ，用带有一组特定参数定义的 lambda 表达式，其利用 lambda 的捕获参数特性，允许外部于 lambda 体内的变量以值或引用形式被捕获并在 lambda 执行时使用。Pure Task 可以被视为由 Pure Runtime 运行时系统负责执行应用程序代码片段，可以通过多线程并发执行。因此，Pure 任务应结构化为类似数据并行的形式。此外，Pure Task 需要由程序员保证线程安全。&lt;/p&gt;
&lt;p&gt;在以上 Pure 实现中，程序员可以利用 chunk ranges 来描述并发性。这些子范围或 chunk 是通过 &lt;code&gt;start_chunk&lt;/code&gt; 和 &lt;code&gt;end_chunk&lt;/code&gt; 参数传递给 Pure Task 的，而它们是由 Pure Runtime 运行时系统提供。Pure Runtime 运行时系统负责确保所有工作顺利完成。由于可能涉及到不同的多个线程，Pure Runtime 运行时系统会通过追踪哪些 chunk 已分配和完成来实现这一点。&lt;/p&gt;
&lt;p&gt;其次，程序员需要将 Pure Runtime 运行时系统提供的 &lt;code&gt;start_chunk&lt;/code&gt; 和 &lt;code&gt;end_chunk&lt;/code&gt; 参数映射到与应用计算相关的具体内容上。在这里，代码使用了 &lt;code&gt;pure_aligned_idx_range&lt;/code&gt; 辅助函数将其转化为循环索引子范围。这个辅助函数考虑到了缓存行，所以有利于避免伪共享问题。&lt;/p&gt;
&lt;p&gt;由于 random_work 可能导致负载分布不均，某些 rank 可能会在等待消息时处于空闲状态。Pure 的任务调度器会自动利用这些空闲的 rank，以执行同一节点内其他待处理的 Pure 任务块。以下图中在同一节点内的三个 rank 为例：&lt;strong&gt;rank 0&lt;/strong&gt; 正在执行一个被划分为 6 个 chunks 的 Pure Task，而 &lt;strong&gt;rank 1&lt;/strong&gt; 和 &lt;strong&gt;rank 2&lt;/strong&gt; 因为接收消息而阻塞。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://cuterwrite-1302252842.file.myqcloud.com/img/timeline-2024-03-14.png&#34;
    alt=&#34;timeline-2024-03-14&#34; width=&#34;auto&#34; loading=&#34;lazy&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;示例 Pure 代码的时间线示意图&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;从图中可以清晰地看到以下执行流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rank 0 开始处理第一个 chunk（chunk 0） 。&lt;/li&gt;
&lt;li&gt;同时，rank 1 窃取并行执行第二个 chunk（chunk 1）。&lt;/li&gt;
&lt;li&gt;任务调度器随后为 rank 0 分配第三个 chunk（chunk 2），为 rank 1 分配第四个 chunk（chunk 3）。&lt;/li&gt;
&lt;li&gt;rank 2 尝试窃取一个任务，并成功执行第五个 chunk（chunk 4）。由于 &lt;code&gt;random_work&lt;/code&gt; 的执行随机性，chunk 2 和 chunk 4 可能是耗时较长的任务。&lt;/li&gt;
&lt;li&gt;rank 0 完成 chunk 5 的处理，这是一个较小的任务块，它在 rank 2 完成 chunk 4 之前就已经结束了。&lt;/li&gt;
&lt;li&gt;任务调度器确保在所有 chunks 完成之前，rank 0 不会结束执行。实际上，rank 0 要等到 chunk 4 完成后才能继续。&lt;/li&gt;
&lt;li&gt;在 rank 1 和 rank 2 等待消息的过程中，它们会尝试从其他任何可用的 rank 中窃取更多的 chunks。&lt;/li&gt;
&lt;li&gt;得益于 lambda 表达式的变量捕获功能，不同 rank 之间可以高效地共享上下文信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实验结果显示，在单节点上配置 32 个 rank 的 Pure 版本因为更快的消息传递和 Pure Task 的并行执行，相比于 MPI 版本，Pure 版本实现了 10% 的性能提升。在负载分布不均的情境下，Pure 的加速比甚至超过了 200%。这些性能提升的程度虽然受到负载不平衡的影响，但在实际应用场景中，Pure 仍展现出了显著的性能改进。这归功于 Pure Runtime 运行时系统的能力，它能够自动检测并高效利用未被充分利用的计算资源。&lt;/p&gt;
&lt;h2 id=&#34;3-编程模型&#34;&gt;3. 编程模型&lt;/h2&gt;
&lt;p&gt;Pure 的编程模型核心是“消息传递结合可选的任务并行性”。在语义上，Pure 的消息传递和集合通信操作与 MPI 等同，差异主要体现在语法上的一些细节。&lt;/p&gt;
&lt;p&gt;尽管 Pure 在节点内部采用线程，但其 rank 命名空间在整个集群中保持非层级结构。在 Pure 程序的执行周期内，rank 的数量保持不变。&lt;/p&gt;
&lt;p&gt;Pure 应用程序采用 C++ 编写，并通过 SPMD（单程序多数据）模式运行，实现了内部的多线程化。在同一个节点上，所有的 rank 都是通过内核线程实现的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需要注意的是，Pure 应用程序并不支持全局变量&lt;/strong&gt;。因此，开发者应当移除全局变量或者使用 &lt;code&gt;thread_local&lt;/code&gt; 关键字来限制变量的作用域，确保线程之间的安全性。&lt;/p&gt;
&lt;p&gt;对于存在负载不均衡问题的应用程序，开发者可以在满足以下特定条件的程序部分使用 Pure Task：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算密集型的热点区域。&lt;/li&gt;
&lt;li&gt;可以并发执行的任务。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;消息传递和集合通信操作&#34;&gt;消息传递和集合通信操作&lt;/h3&gt;
&lt;p&gt;在 Pure 中，&lt;code&gt;pure_send_msg&lt;/code&gt; 和 &lt;code&gt;pure_recv_msg&lt;/code&gt; 函数在功能上与 MPI 的 &lt;code&gt;MPI_Send&lt;/code&gt; 和 &lt;code&gt;MPI_Recv&lt;/code&gt; 相对应，同时 Pure 也提供了相应的非阻塞版本。&lt;/p&gt;
&lt;p&gt;Pure Runtime 运行时系统确保所有消息都会被送达，并且按照发送的顺序进行交付。Pure 还实现了一系列的集合通信操作，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reduce&lt;/li&gt;
&lt;li&gt;All-Reduce&lt;/li&gt;
&lt;li&gt;Barrier&lt;/li&gt;
&lt;li&gt;Broadcast&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，Pure 引入了通信子（communication subgroup）的概念，允许开发者通过 &lt;code&gt;pure_comm_split&lt;/code&gt; 函数将一个通信子集进一步细分为更小的子集。&lt;/p&gt;
&lt;p&gt;为了使用 Pure，应用程序需要采用现代 C++ 标准进行编写，推荐使用 &lt;code&gt;std=c++11&lt;/code&gt; 或更高版本进行编译。Pure 提供了一个基于 Make 的构建系统，它会自动配置合适的编译器选项，并链接到 Pure Runtime 运行时系统（libpure），同时定义了一系列用于调试和性能分析的 target。&lt;/p&gt;
&lt;h3 id=&#34;pure-task&#34;&gt;Pure Task&lt;/h3&gt;
&lt;p&gt;Pure Task 允许开发者定义应用程序中的计算部分，并将其分解为可并行执行的 chunks。这些 chunks 可以由 Pure Runtime 运行时系统自动并发执行。&lt;/p&gt;
&lt;p&gt;然而，Pure Task 不是必需的，只有在任务可以划分为多个小块，并且这样做有助于缓解负载不均衡问题时，才推荐使用 Pure Task。&lt;/p&gt;
&lt;p&gt;Pure Task 通过 C++ Lambda 表达式实现，并在拥有该任务的 rank 调用 &lt;code&gt;execute&lt;/code&gt; 方法时同步执行。每个 rank 同一时间只能执行一个 Pure Task。Lambda 表达式的变量捕获功能使得不同 rank 在执行不同 chunks 时能够高效共享上下文信息。通常，一个 Pure Task 在应用程序的运行过程中会被定义一次，然后在每个时间步或其他迭代中多次执行。&lt;/p&gt;
&lt;p&gt;定义 Pure Task 时，需要指定 chunk 的数量和额外的应用程序参数。任务之间应避免相互依赖，不过因为它们会在 &lt;code&gt;execute&lt;/code&gt; 调用期间完全执行，所以它们不会与任务外部的代码发生冲突。&lt;/p&gt;
&lt;p&gt;Pure Task 包含一个 &lt;code&gt;execute&lt;/code&gt; 方法，该方法接受一个 &lt;code&gt;optional&amp;lt;void*&amp;gt;&lt;/code&gt; 类型的参数 &lt;code&gt;per_exe_args&lt;/code&gt; ，用于每次执行任务时传递额外的参数。这在任务主体的输入值在连续执行中发生变化时非常有用。例如，开发者可以将指向局部结构体的指针传递给 &lt;code&gt;execute&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;Pure Task 的前两个参数 &lt;code&gt;start_chunk&lt;/code&gt; 和 &lt;code&gt;end_chunk&lt;/code&gt; 是无符号整数，用于指定要执行的 chunk 范围。这些 chunk 由 Pure Runtime 运行时系统分配，确保每个 chunk 只被执行一次，即使它们可能并发执行。&lt;/p&gt;
&lt;p&gt;Pure Task 使用 chunk 范围为调度器提供了灵活性，允许一次性分配多个 chunks。chunks 的数量由 Pure 任务调度器决定，但不会超过在 Makefile 文件中预定义的 &lt;code&gt;PURE_MAX_TASK_CHUNKS&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;目前，Pure Task 的接口需要手动将 chunk 编号映射到数组索引，这在处理多维数组时可能比较繁琐。因此，未来的工作目标是扩展接口，提供类似于 TBB 的 &lt;code&gt;parallel_for&lt;/code&gt; 那样更简洁、更高级的接口。&lt;/p&gt;
&lt;p&gt;最后，开发者需要确保 Pure Task 内部的实现是线程安全的，以避免同一任务的多个并发执行的 chunks 之间的相互竞争。例如，在 CoMD 分子动力学 Benchmark 中，需要处理多个线程同时写入同一内存位置的问题，这时可以使用 &lt;code&gt;std::atomic&lt;/code&gt; 数组来替代普通 &lt;code&gt;int&lt;/code&gt; 数组。&lt;/p&gt;
&lt;h2 id=&#34;4-运行时系统&#34;&gt;4. 运行时系统&lt;/h2&gt;
&lt;p&gt;Pure 运行时系统是一个多线程和分布式运行时的动态库，用于支持 Pure 应用程序的开发。开发者在使用时需要包含 &lt;code&gt;pure.h&lt;/code&gt; 头文件，并使用 C++17 标准进行编译，同时链接到 &lt;code&gt;libpure&lt;/code&gt; 库。Pure 运行时系统能够自动地在计算和通信操作之间寻找并利用重叠执行的机会，尤其是在通信延迟较高的情况下。&lt;/p&gt;
&lt;p&gt;Pure 运行时系统的主要职能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化并配置必要的进程和线程，启动应用程序。&lt;/li&gt;
&lt;li&gt;管理节点内部的 rank 间通信和集合操作。&lt;/li&gt;
&lt;li&gt;管理内部的内存缓冲区和数据结构。&lt;/li&gt;
&lt;li&gt;如果应用程序中定义了 Pure Task，运行时系统还需负责这些任务的调度和执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rank-初始化与映射&#34;&gt;Rank 初始化与映射&lt;/h3&gt;
&lt;p&gt;Pure 中的 rank 实现为 MPI 进程的内核线程。在多节点应用中，Pure 运行 MPI 来处理跨节点通信，而在单节点应用中则不使用 MPI，尽管如此，Pure 应用程序并不直接调用 MPI 函数。通过 Makefile 配置，Pure 程序可以在一个节点或 NUMA 节点上启动一个 MPI 进程，并根据每个节点或 NUMA 节点的核心数来创建相应数量的线程。对于应用程序开发者而言，他们只需了解非层次化的 rank 命名空间，而节点、线程、MPI 进程和通信延迟等底层概念都被抽象化，对开发者透明。&lt;/p&gt;
&lt;p&gt;Pure 支持灵活的 rank 到节点的映射策略，并且默认采用 SMP 风格的分配策略。同时，Pure 也支持自定义的 rank 映射，包括使用 CrayPAT 的 rank 重排文件。虽然这些硬件相关的细节对开发者来说是不可见的，但 Pure 内部会利用这些信息来优化关键功能。&lt;/p&gt;
&lt;p&gt;在 Pure 应用程序启动时，不会直接执行应用程序的原始 &lt;code&gt;main&lt;/code&gt; 函数。相反，底层的 MPI 程序会调用 Pure 运行时系统中定义的 &lt;code&gt;main&lt;/code&gt; 函数，该函数负责初始化 Pure 的核心数据结构，然后创建并绑定线程，每个线程执行一个 &lt;code&gt;original_main&lt;/code&gt; 函数，这是从应用程序代码中的原始 &lt;code&gt;main&lt;/code&gt; 函数重命名而来的版本。应用程序执行完毕后，&lt;code&gt;original_main&lt;/code&gt; 函数返回到 Pure 运行时系统，后者负责完成 MPI 的清理和终止过程。&lt;/p&gt;
&lt;h3 id=&#34;spin-steal-waiting-loop-ssw-loop&#34;&gt;Spin-Steal Waiting Loop (SSW-Loop)&lt;/h3&gt;
&lt;p&gt;当 Pure 的 rank 遇到阻塞事件，如等待消息到达，它将执行一个称为 &lt;strong&gt;自旋、窃取等待循环（SSW-Loop）&lt;/strong&gt; 的机制，而不是简单地进入空闲状态。在此循环中，rank 会检查是否满足阻塞条件，例如是否有消息到达，如果没有，它会尝试从其他 rank 窃取任务。如果一个阻塞的 rank 能够协助其进程中正在并发执行的其他线程完成任务，它就会参与这种协助工作。&lt;/p&gt;
&lt;p&gt;由于线程是绑定到特定的 CPU 的，并且每个 rank 只运行一个应用程序，Pure 选择让 rank 主动自旋等待，而不是放弃 CPU。SSW-Loop 让计算中的 rank 具有“多态性”：它既可以作为主程序的计算节点，也可以协助其他 rank 执行窃取到的任务块，然后再返回检查自身的阻塞事件。&lt;/p&gt;
&lt;p&gt;Pure 遵循优先处理当前 rank 拥有的窃取任务负载的策略，坚持任务负载优先的调度原则。&lt;/p&gt;
&lt;p&gt;与那些使用辅助线程来实现工作负载窃取或通信的系统不同，Pure 的特点是允许应用级别的计算节点直接进行任务窃取操作。&lt;/p&gt;
&lt;h3 id=&#34;实现说明&#34;&gt;实现说明&lt;/h3&gt;
&lt;p&gt;Pure 是使用 C++17 标准库编写的。Pure 运行时系统由大约 21,000 行源代码构成，而 Pure 工具则包含了约 14,000 行源代码。Pure 已在多种环境下进行测试，包括笔记本电脑和集群，其运行仅需要一个支持 C++17 的编译器、类 Unix 操作系统以及 MPI 环境。Pure 的源代码可以在 GitHub 上公开获取，链接为： &lt;a class=&#34;link&#34; href=&#34;https://github.com/psota/pure&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34; &gt;https://github.com/psota/pure
    &lt;span style=&#34;white-space: nowrap;&#34;&gt;&lt;svg width=&#34;.8em&#34; height=&#34;.8em&#34; viewBox=&#34;0 0 21 21&#34;
            xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;
            &lt;path d=&#34;m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z&#34; fill=&#34;currentColor&#34; /&gt;
            &lt;path d=&#34;M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z&#34;
                fill=&#34;currentColor&#34;&gt;
        &lt;/svg&gt;&lt;/span&gt;
    
&lt;/a&gt;
 。&lt;/p&gt;
&lt;h3 id=&#34;点对点通信&#34;&gt;点对点通信&lt;/h3&gt;
&lt;p&gt;Pure 提供了阻塞和非阻塞的点对点消息传递功能，其语义与 MPI 的消息传递相一致。&lt;/p&gt;
&lt;p&gt;Pure 内部采用三种不同的策略来进行消息传递，选择哪种策略取决于消息的大小以及发送方和接收方是否位于同一节点。&lt;/p&gt;
&lt;p&gt;Pure 在整个程序的生命周期中分配并复用一个持久的 Channel 对象，该对象存储于运行时系统中。内部的 Channel Manager 负责将消息参数映射到合适的数据结构，并根据需要创建这些结构。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://cuterwrite-1302252842.file.myqcloud.com/img/strategy-2024-03-15.webp&#34;
    alt=&#34;strategy-2024-03-15&#34; width=&#34;auto&#34; loading=&#34;lazy&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;Pure 消息传递策略&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;短消息（小于 8KB）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;采用无锁循环队列（PureBufferQueue，PBQ），具有 acquire-release 内存语义。发送线程在有可用空间时将消息复制到 PBQ，接收线程则在消息准备好时将其取出。
&lt;ul&gt;
&lt;li&gt;在短消息传递中，拷贝的开销相对较小，这样可以让发送方调用返回后立即执行执行其它有用的工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;发送和接收线程都使用 SSW-Loop 进行等待，以尽可能地实现计算与通信的重叠执行。&lt;/li&gt;
&lt;li&gt;所有消息的 slot 存储在一个连续的缓冲区中，通过指针算术确保每个 slot 与缓存行边界对齐，避免发送和接收线程之间的伪共享。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;大消息（大于等于 8KB）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;类似于 PBQ 的策略，但使用直接从发送方到接收方的单次内存拷贝，灵感来自 MPI 的 rendezvous 模式。&lt;/li&gt;
&lt;li&gt;使用无锁的固定大小循环缓冲区来存储接收方的接收调用参数。&lt;/li&gt;
&lt;li&gt;发送方通过 SSW-Loop 等待元数据队列项，然后将消息内容直接复制到接收方的缓冲区。发送方通过在无锁队列中插入传输的字节数来通知接收方传输已完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨节点消息&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;透明地使用 MPI 接口进行消息传递。&lt;/li&gt;
&lt;li&gt;在 Pure 初始化期间，使用分布式一致性算法创建 &lt;code&gt;thread-rank-process-node&lt;/code&gt; 映射数据结构，将 Pure rank 映射到 MPI rank。&lt;/li&gt;
&lt;li&gt;为了确保在接收节点上正确的接收线程能够接收到消息，在 &lt;code&gt;MPI_TAG&lt;/code&gt; 中编码发送和接收线程的 ID，解决多线程路由问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;集合通信&#34;&gt;集合通信&lt;/h3&gt;
&lt;p&gt;Pure 的集体通信操作在语义上与 MPI 相同，但在节点内部通过自下而上构建的数据结构来实现，这在单节点和多节点基准测试中都显示出了显著的性能提升，即使在跨节点通信时仍然依赖于 MPI 的集合操作。&lt;/p&gt;
&lt;p&gt;Pure 采用一个领导者线程来协调集体通信过程，其他线程则协助进行计算并按需调用 MPI 集合函数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pure 使用静态领导者选举方法，这比基于比较和交换的“首先进入”方法更为高效。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下仅以 All-Reduce 为例子，其它集合通信操作思想类似。&lt;/p&gt;
&lt;p&gt;对于小数据的 All-Reduce 操作，Pure 设计了名为 Sequenced Per-Thread Dropbox (SPTD) 的并发数据结构，提供了一种高效的无锁机制，用于在领导线程和其他非领导线程之间对偶同步和可选共享数据。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://cuterwrite-1302252842.file.myqcloud.com/img/SPTD-2024-03-15.webp&#34;
    alt=&#34;SPTD-2024-03-15&#34; width=&#34;auto&#34; loading=&#34;lazy&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;Sequenced Per-Thread Dropbox (SPTD)&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;该方法借鉴了 flat-combinding 技术，将通信器中的线程 0 作为领导者线程。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于大小不超过 2KB 的小数组：
&lt;ul&gt;
&lt;li&gt;非领导者线程首先将数据复制到 SPTD，然后与领导者线程同步，表明输入数据已就绪（使用原子序列号而非共享原子计数器）。&lt;/li&gt;
&lt;li&gt;领导者线程执行所有输入数组的逐元素 Reduce 操作。&lt;/li&gt;
&lt;li&gt;每个节点的领导者线程使用 &lt;code&gt;MPI_Allreduce&lt;/code&gt; 对局部 Reduce 结果进行全局 Reduce。&lt;/li&gt;
&lt;li&gt;领导者线程同步，非领导者线程将最终的 Reduce 结果复制到私有缓冲区。&lt;/li&gt;
&lt;li&gt;所有线程在等待时执行 SSW-Loop。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于超过 2KB 的大数组，Reduce 计算可能成为性能瓶颈，因此需要所有线程并发执行 Reduce 计算，并通过共享内存直接从每个线程的缓冲区中读取或写入数据。
&lt;ul&gt;
&lt;li&gt;Reduce 工作被划分为大小相等的块，避免伪共享并实现向量化计算。&lt;/li&gt;
&lt;li&gt;线程使用 SPTD 报告准备状态，并通过原子序列号标记计算完成。&lt;/li&gt;
&lt;li&gt;领导者线程调用 &lt;code&gt;MPI_Allreduce&lt;/code&gt; 执行跨节点的 All-Reduce 操作，并通过另一个原子序列号传播最终结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;任务调度器&#34;&gt;任务调度器&lt;/h3&gt;
&lt;p&gt;Pure 运行时系统精心设计了一个任务调度器，它在共享内存中维护了一个名为 &lt;code&gt;active_tasks&lt;/code&gt; 的数组。这个数组存储了一系列原子指针，每个指针对应于一个正在执行的任务，并且为系统中的每个节点和每个 rank 分配了一个条目。这些条目最初被设置为 &lt;code&gt;nullptr&lt;/code&gt;，表示任务尚未分配。&lt;/p&gt;
&lt;p&gt;当一个任务被创建并准备执行时，系统会为其初始化状态，并通过原子操作更新 &lt;code&gt;active_tasks&lt;/code&gt; 数组中相应的条目，以反映该任务已被分配。这个更新过程确保了任务的执行状态对系统中的所有线程都是可见的，从而使得任务可以被其他线程“窃取”。&lt;/p&gt;
&lt;p&gt;在任务的执行过程中，拥有任务的 rank 会开始执行一系列的 chunk，这些是任务的细分工作单元。同时，其他线程会在它们的 SSL-Loop 期间不断检查 &lt;code&gt;active_tasks&lt;/code&gt; 数组，通过原子加载操作来寻找可执行的非空任务。&lt;/p&gt;
&lt;p&gt;任务的执行是由两个原子整数 &lt;code&gt;curr_chunk&lt;/code&gt; 和 &lt;code&gt;chunks_done&lt;/code&gt; 来协调的。拥有任务的 rank（owner rank）和可能的窃取者 rank（thief ranks）都会运行相同的并发执行函数。窃取者线程会执行一个 chunk 后返回，而拥有者线程则持续执行直到所有 chunk 完成。通过使用 &lt;code&gt;fetch_add&lt;/code&gt; 操作，线程可以确定自己应该执行哪个 chunk，如果 &lt;code&gt;curr_chunk&lt;/code&gt; 的值已经超过了总的 chunk 数量，线程则会停止执行。&lt;/p&gt;
&lt;p&gt;每当一个 chunk 被成功完成后，线程会原子性地增加 &lt;code&gt;chunks_done&lt;/code&gt; 的值。拥有者线程会更新其本地存储，以避免缓存未命中。最终，拥有者 rank 会等待，直到所有的 chunk 都执行完毕，确保任务的完整执行。&lt;/p&gt;
&lt;p&gt;值得注意的是，任务的 chunk 与应用程序的 rank 是在同一硬件线程上执行的。在 Pure 应用中，每个硬件线程都被分配给一个特定的 rank。尽管目前 Pure 还没有利用硬件加速器（如 GPU）来加速任务执行，但设计者相信 Pure 的架构完全有能力支持这种加速。&lt;/p&gt;
&lt;p&gt;Pure 的任务调度器提供了多种执行模式和窃取算法，以适应不同的执行需求。例如，作者实现了单 chunk 执行模式和一种引导式自调度模式，后者是一种工作划分算法，它优先分配较大的工作块，然后是较小的工作块。此外，调度器还包括 NUMA 感知窃取模式，它优先从同一 NUMA 节点上的线程窃取任务，以及一种“黏性”窃取模式，允许窃取者线程返回它们最近窃取且仍在活跃状态的任务。这些特性共同确保了任务调度的高效性和灵活性。&lt;/p&gt;
&lt;h2 id=&#34;评估&#34;&gt;评估&lt;/h2&gt;
&lt;p&gt;在伯克利 NERSC 的 Cori HPC 集群上进行了 Pure 的性能评估。该集群包含 2388 个节点，每个节点配置有 2 个插槽、16 个核心和 128GB 内存，通过 Cray Aires 进行节点间互联。实验配置启用了超线程，并采用 256 位向量宽度。每个节点上运行 2 个进程，共 32 个线程。评估使用 Intel 编译器，并将 Cray MPICH 作为性能基线。&lt;/p&gt;
&lt;h3 id=&#34;nas-dt-基准测试结果&#34;&gt;NAS DT 基准测试结果&lt;/h3&gt;
&lt;figure&gt;&lt;img src=&#34;https://cuterwrite-1302252842.file.myqcloud.com/img/nasdt-2024-03-15.webp&#34;
    alt=&#34;nasdt-2024-03-15&#34; width=&#34;auto&#34; loading=&#34;lazy&#34;&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;仅通过优化消息传递机制，Pure 取得了 11% 至 25% 的性能加速。&lt;/li&gt;
&lt;li&gt;引入 Pure Tasks 后，性能加速比提升至 1.7 倍至 2.6 倍。&lt;/li&gt;
&lt;li&gt;辅助线程能小幅提高性能，不过仅限于剩余未使用的 CPU 核心才能使用。在这里，除了 80 个 rank 的情况下空闲了 24 个核心，其它情况下都充分利用了 CPU 核心。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;comd-和-miniamr-基准测试&#34;&gt;CoMD 和 miniAMR 基准测试&lt;/h3&gt;
&lt;figure&gt;&lt;img src=&#34;https://cuterwrite-1302252842.file.myqcloud.com/img/benchmark-pure-2024-03-15.webp&#34;
    alt=&#34;benchmark-pure-2024-03-15&#34; width=&#34;auto&#34; loading=&#34;lazy&#34;&gt;
&lt;/figure&gt;

&lt;p&gt;-在 CoMD 分子动力学应用中，Pure 在所有 rank 数下的性能均优于仅使用 MPI 及 MPI+OpenMP 的性能，分别实现了 7% 至 25% 以及 35% 至 50% 的加速比，即使在没有负载不均衡的情况下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 miniAMR 自适应网格细化应用中，Pure 至少实现了 20%，最多 50% 的性能加速。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;集合通信性能&#34;&gt;集合通信性能&lt;/h3&gt;
&lt;figure&gt;&lt;img src=&#34;https://cuterwrite-1302252842.file.myqcloud.com/img/benchmark-pure-msg-2024-03-15.webp&#34;
    alt=&#34;benchmark-pure-msg-2024-03-15&#34; width=&#34;auto&#34; loading=&#34;lazy&#34;&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;Pure 在集合通信操作中的性能表现突出，这些操作的内部优化机制和数据结构设计使得 Pure 在处理大规模并行计算任务时展现出显著的效率和优势。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;相关工作&#34;&gt;相关工作&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类别&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;相关工作&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Pure 的优势&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;MPI&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1. 利用多核节点内的共享内存提升性能；2. XPMEM 显著增强节点内通信效率；3. ch4 网络库优化了 MPI 的共享内存通信；4. 改进了 MPI 的集合通信算法；5. DMAPP 库针对特定集合通信进行了优化，但限制较多；6. 解决了大规模全对全集合通信的挑战；7. 单边消息 API 实现了解耦；8. 优化了数据移动与进程同步&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1. Pure 在所有集合通信和负载大小上均展现出卓越的性能；2. 提供了高级的通信计算重叠机制，超越了传统的单边消息 API&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;MPI 多线程&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1. 支持 MPI_THREAD_MULTIPLE 模式下的 rank 内多线程； 2. 多数 MPI 实现通过全局锁实现线程安全，导致性能瓶颈；3. MPI 4.0 引入 MPI+X 方法增强多线程支持；4. 引入了 MPI Fine-points 和 Endpoints 概念以支持线程&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1. Pure 重视多线程代码中的 MPI 调用，强调其重要性；2. 提供了一种统一的编程模型，简化了并行任务的引入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AMPI&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1. 基于 Charm++ 的 MPI 兼容库；2. 提供高级并行编程抽象；3. 通过最小化代码更改实现性能提升&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1. Pure 在实际测试中表现优于 AMIP，得益于其优化的消息传递和集合通信，以及更精细和低开销的负载均衡策略；2. 相较于 AMIP SMP 基于线程的模型，Pure 提供了更高效的并行处理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PGAS 语言和并行框架&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1. PGAS 语言提供了全局内存地址空间的抽象；2. Chapel 和 X10 扩展了 PGAS 方法，支持本地和远程异步任务；3. HPX 为现代 C++标准增加了分布式操作支持；4. Legion 作为数据中心并行编程系统；5. Kokkos, STAPL, BCL 等框架提供了应用程序与硬件间的抽象层&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1. 类似于 Pure，PGAS 模型采用 SPMD 风格，通过局部性引用提高性能；2. 这些框架虽然利用了现代 C++特性，但通常需要对现有应用程序进行大量重写，而 Pure 则提供了更为直接的优化路径&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;数十年来，由于其相对的简单性和性能优势，消息传递一直被视为并行编程的标准模型。然而，本文表明，消息传递与共享内存并非不可兼容。实际上，通过设计合适的库，可以在不牺牲大多数消息传递优点的前提下充分利用共享内存。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>科研图表绘制</title>
        <link>http://localhost:1313/p/science-plot/</link>
        <pubDate>Tue, 27 Feb 2024 00:14:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/science-plot/</guid>
        <description>&lt;img src="https://cuterwrite-1302252842.file.myqcloud.com/img/crop_ee40c9cb9e33ffe888365e66e0a104dc195413-2024-02-28.webp" alt="Featured image of post 科研图表绘制" /&gt;&lt;h1 id=&#34;科研图表绘制&#34;&gt;科研图表绘制&lt;/h1&gt;
&lt;h2 id=&#34;前置知识&#34;&gt;前置知识&lt;/h2&gt;
&lt;h3 id=&#34;位图&#34;&gt;位图&lt;/h3&gt;
&lt;p&gt;又称为点阵图像、像素图或栅格图像，由像素点组成。这些点可以进行不同的排列和染色以构成图像。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;位图特点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;位图图像善于重现颜色的细微层次，能够制作出色彩和亮度变化丰富的图像，颜色逼真，文件庞大，不能随意缩放；&lt;/li&gt;
&lt;li&gt;图像尺寸越大，文件也就越大；图像色彩越丰富，文件也就越大。&lt;/li&gt;
&lt;li&gt;打印和输出的精度是有限的；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;位图的文件格式&lt;/strong&gt;：比如.tiff、.bmp、.gif、.jpg、.png、.psd 等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;常用的位图编辑软件&lt;/strong&gt;：Photoshop 等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;矢量图&#34;&gt;矢量图&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;矢量&lt;/strong&gt;又称为“向量”，矢量图像中的图形元素（点和线段）称为对象，每个对象都是一个单独的个体，它具有大小、方向、轮廓、颜色和屏幕位置等属性。简单地说，矢量图形软件就是用数学的方法来绘制矩形等基本形状的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;矢量图特点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以无限放大，同时又不用担心失真；&lt;/li&gt;
&lt;li&gt;矢量图可以轻松地转化为位图，而位图转化为矢量图就需要通过图像临摹之类的方式，但完美转成矢量图还是有些难度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;矢量图的文件格式&lt;/strong&gt; ：比如 Adobe Illustrator 的.AI、.EPS、.SVG，.PDF，AutoCAD 的.dwg 和.dxf，windows 标准图元文件*.wmf 和增强型图元文件*.emf 等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;常用的矢量图编辑软件&lt;/strong&gt;：Illustrator、CorelDraw、AutoCAD 等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;像素dpi-与打印尺寸之间的关系&#34;&gt;像素、DPI 与打印尺寸之间的关系&lt;/h3&gt;
&lt;p&gt;图像分辨率，像素数和打印尺寸在数学上的关系为：像素=分辨率（DPI）× 打印尺寸（以英寸为单位）。&lt;/p&gt;
&lt;p&gt;其中，DPI 为每平方英寸像素数目，也就是图像细节程度的度量。理解了上述概念我们就可以通过上述概念推测出图像的尺寸大小，比如说，我想打印一副 8 英寸 * 10 英寸，300DPI 的图片，那么怎样设置图像的像素长宽度呢？你只要简单地把这两者相乘就可以了，$8 \times 300=2400$ ，$10 \times 300=3000$ ，所以这幅图像的像素尺寸就是 $2400 \times 3000$ 。&lt;/p&gt;
&lt;h3 id=&#34;杂志要求&#34;&gt;杂志要求&lt;/h3&gt;
&lt;p&gt;这里以著名出版商&lt;a class=&#34;link&#34; href=&#34;https://www.elsevier.com/authors/author-schemas/artwork-and-media-instructions/artwork-sizing&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34; &gt;艾斯维尔（Elsevier）的要求
    &lt;span style=&#34;white-space: nowrap;&#34;&gt;&lt;svg width=&#34;.8em&#34; height=&#34;.8em&#34; viewBox=&#34;0 0 21 21&#34;
            xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;
            &lt;path d=&#34;m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z&#34; fill=&#34;currentColor&#34; /&gt;
            &lt;path d=&#34;M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z&#34;
                fill=&#34;currentColor&#34;&gt;
        &lt;/svg&gt;&lt;/span&gt;
    
&lt;/a&gt;
为例：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;TARGET SIZE&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Image Width&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Pixels at 300 dpi&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Pixels at 500 dpi&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Pixels at 1000 dpi&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Minimal size&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;30 mm (85 pt)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;354&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;591&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1181&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Single column&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;90 mm (255 pt)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1063&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1772&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3543&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1.5 column&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;140 mm (397 pt)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1654&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2756&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5512&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Double column (full width)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;190 mm (539 pt)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2244&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3740&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;7480&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;通过学习上面图像尺寸的内容我们可以知道打印尺寸与像素和 dpi 之间的关系。例如，表格中红色要求图像最小尺寸为 $30 \mathrm{mm}$ ，我们可以通过公式验证一下在 300dpi 分辨率下 354 像素宽打印出来的尺寸是不是 $30 \mathrm{mm}$ ：$354 \div 300 \times 2.54 \times 10 = 29.97 \mathrm{mm}$ ，  最后相乘的两个数据是把英寸换算成毫米，正好是 $30 \mathrm{mm}$ 。所以知道了上述关系我们就可以利用 Photoshop 来编辑我们的图片了；&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://cuterwrite-1302252842.file.myqcloud.com/img/attachments-2018-07-4Fzft7fc5b5ace58ae9dd-2024-02-28.webp&#34;
    alt=&#34;attachments-2018-07-4Fzft7fc5b5ace58ae9dd-2024-02-28&#34; width=&#34;auto&#34; loading=&#34;lazy&#34;&gt;
&lt;/figure&gt;

&lt;p&gt;例如一张图片，来自于 Mapman，用 Photoshop 打开，显示尺寸如下：&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://cuterwrite-1302252842.file.myqcloud.com/img/attachments-2018-08-ZdVKUJMx5b63ec8d64919-2024-02-28.webp&#34;
    alt=&#34;attachments-2018-08-ZdVKUJMx5b63ec8d64919-2024-02-28&#34; width=&#34;auto&#34; loading=&#34;lazy&#34;&gt;
&lt;/figure&gt;

&lt;p&gt;由于图片尺寸太大，宽度 $124.99 \mathrm{cm}$ ，而且分辨率是 $72$ ，不符合杂志要求。这里利用上面学到的知识在不损失图片像素的情况下调整一下图片尺寸；&lt;/p&gt;
&lt;p&gt;现在我们要把图片宽度调整到双栏的尺寸也就是 $19\mathrm{cm}$ ；通过公式：像素=分辨率（DPI）× 打印尺寸（以英寸为单位）&lt;/p&gt;
&lt;p&gt;在像素不变的情况下，我们要提高分辨率，来缩小图片的打印尺寸，根据比例计算应该提高到多少 dpi：  $124.99 \div 19 \times 72=473.6  \mathrm{dpi}$ ；&lt;/p&gt;
&lt;p&gt;所以修改宽度和分辨率这两个数值就可以了，而且图片的像素数是不变的，达到了无损改变图片的大小；而且 473dpi 大于最小的 300dpi。&lt;/p&gt;
&lt;h2 id=&#34;matplotlib-python-库&#34;&gt;Matplotlib Python 库&lt;/h2&gt;
&lt;p&gt;作为 Python 生态中最基础且最广泛使用的数据可视化库，Matplotlib 提供了丰富的 2D 和 3D 图形绘制能力，尤其适合制作线图、柱状图、散点图等常见科研图表，并能高度定制化输出样式以符合各类学术期刊的标准。&lt;/p&gt;
&lt;p&gt;它可以用来绘制各种静态，动态，交互式的图表。我们可以使用该工具将很多数据通过图表的形式更直观的呈现出来，包括绘制线图、散点图、等高线图、条形图、柱状图、3D 图形、甚至是图形动画等等。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://cuterwrite-1302252842.file.myqcloud.com/img/matplotlib-graphs-2048x1153-2024-02-28.webp&#34;
    alt=&#34;matplotlib-graphs-2048x1153-2024-02-28&#34; width=&#34;auto&#34; loading=&#34;lazy&#34;&gt;
&lt;/figure&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Matplitlib Cheat Sheet&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;&lt;img src=&#34;https://cuterwrite-1302252842.file.myqcloud.com/img/cheatsheets-1-2024-02-28.webp&#34;
    alt=&#34;cheatsheets-1-2024-02-28&#34; width=&#34;auto&#34; loading=&#34;lazy&#34;&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;seaborn-python-库&#34;&gt;Seaborn Python 库&lt;/h2&gt;
&lt;p&gt;构建于 Matplotlib 之上，Seaborn 进一步强化了统计图表的功能，它内置了许多高级统计图表样式，如热力图、箱型图和时间序列分析图表，使复杂数据关系的展现更为直观易读。既然是基于 matplotlib，所以 seaborn 的很多图表接口和参数设置与其很是接近，使得作图更加方便快捷。即便是没有什么基础的人，也能通过极简的代码，做出具有分析价值而又十分美观的图形。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://cuterwrite-1302252842.file.myqcloud.com/img/Seaborn-gallery-2024-02-28.webp&#34;
    alt=&#34;Seaborn-gallery-2024-02-28&#34; width=&#34;auto&#34; loading=&#34;lazy&#34;&gt;
&lt;/figure&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Seaborn Cheat Sheet
&lt;figure&gt;&lt;img src=&#34;https://cuterwrite-1302252842.file.myqcloud.com/img/Python_Seaborn_Cheat_Sheet_q074wv-2024-02-28.webp&#34;
    alt=&#34;Python_Seaborn_Cheat_Sheet_q074wv-2024-02-28&#34; width=&#34;auto&#34; loading=&#34;lazy&#34;&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;优秀教程：&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/81553421&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34; &gt;数据可视化，Seaborn 画图原来这么好看
    &lt;span style=&#34;white-space: nowrap;&#34;&gt;&lt;svg width=&#34;.8em&#34; height=&#34;.8em&#34; viewBox=&#34;0 0 21 21&#34;
            xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;
            &lt;path d=&#34;m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z&#34; fill=&#34;currentColor&#34; /&gt;
            &lt;path d=&#34;M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z&#34;
                fill=&#34;currentColor&#34;&gt;
        &lt;/svg&gt;&lt;/span&gt;
    
&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;visio-矢量图软件框架流程绘制与算法结构&#34;&gt;Visio 矢量图软件（框架流程绘制与算法结构）&lt;/h2&gt;
&lt;p&gt;对于非数据密集型但逻辑严密的图表设计，如实验流程图、系统架构图或算法流程图，Microsoft Visio 凭借其强大的矢量编辑能力和海量预设模板，成为了构建清晰、规范流程图的理想选择。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://cuterwrite-1302252842.file.myqcloud.com/img/data-graphics-2024-02-28.webp&#34;
    alt=&#34;data-graphics-2024-02-28&#34; width=&#34;auto&#34; loading=&#34;lazy&#34;&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;origin-矢量图软件数学分析与函数绘制&#34;&gt;Origin 矢量图软件（数学分析与函数绘制）&lt;/h2&gt;
&lt;p&gt;Origin 是由 OriginLab 公司开发的一个科学绘图、数据分析软件，支持在 Microsoft Windows 下运行。Origin 支持各种各样的 2D/3D 图形。Origin 中的数据分析功能包括统计，信号处理，曲线拟合以及峰值分析。Origin 中的曲线拟合是采用基于 Levernberg-Marquardt 算法（LMA）的非线性最小二乘法拟合。Origin 强大的数据导入功能，支持多种格式的数据，包括 ASCII、Excel、NI TDM、DIADem、NetCDF、SPC 等等。图形输出格式多样，例如 JPEG，GIF，EPS，TIFF 等。内置的查询工具可通过 ADO 访问数据库数据。&lt;/p&gt;
&lt;p&gt;在物理、化学、生物等领域享有盛誉，Origin 专为科研数据分析打造，以其强大的数学分析和函数绘制能力著称，特别适用于绘制精密的信号曲线、频谱分析图和其他复杂科研图形。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://cuterwrite-1302252842.file.myqcloud.com/img/Picture1_revised%20text-2024-02-28.webp&#34;
    alt=&#34;Picture1_revised text-2024-02-28&#34; width=&#34;auto&#34; loading=&#34;lazy&#34;&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;aiadobe-illustrator矢量图软件&#34;&gt;AI（Adobe Illustrator）矢量图软件&lt;/h2&gt;
&lt;p&gt;作为行业标准级矢量图形处理软件，Illustrator 不仅适用于高精度的出版级图表设计，还能创建高质量的科学插图，确保在任何尺寸下都能保持清晰细腻的效果。它是一种应用于出版、多媒体和在线图像的工业标准矢量插画的软件。该软件主要应用于印刷出版、海报书籍排版、专业插画、多媒体图像处理和互联网页面的制作等，也可以为线稿提供较高的精度和控制，适合生产任何小型设计到大型的复杂项目。&lt;/p&gt;
&lt;p&gt;在图表绘制中，主要应用在：直接绘图-计科和控制类的用的很少，有生化环材方向的同学利用 AI 实现细胞结构，心室高亮等操作；整合之前导出的单个矢量图；将非矢量图转化为矢量图&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://cuterwrite-1302252842.file.myqcloud.com/img/attachments-2018-07-NTyyj78C5b500737d0ac8-2024-02-28.webp&#34;
    alt=&#34;attachments-2018-07-NTyyj78C5b500737d0ac8-2024-02-28&#34; width=&#34;auto&#34; loading=&#34;lazy&#34;&gt;
&lt;/figure&gt;

&lt;figure&gt;&lt;img src=&#34;https://cuterwrite-1302252842.file.myqcloud.com/img/attachments-2018-07-Mz7UCtYZ5b500821eb556-2024-02-28.webp&#34;
    alt=&#34;attachments-2018-07-Mz7UCtYZ5b500821eb556-2024-02-28&#34; width=&#34;auto&#34; loading=&#34;lazy&#34;&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;inkscape-矢量图软件&#34;&gt;Inkscape 矢量图软件&lt;/h2&gt;
&lt;p&gt;AI 的平替版，优点在于&lt;strong&gt;开源免费&lt;/strong&gt;。 作为开源界的矢量图形编辑器翘楚，Inkscape 提供了一套完整的 SVG 编辑工具，科研人员可以免费使用它来创作复杂的矢量图表，并确保跨平台兼容性和无损缩放性。官方中文地址：&lt;a class=&#34;link&#34; href=&#34;https://inkscape.org/zh-hans/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34; &gt;Inkscape
    &lt;span style=&#34;white-space: nowrap;&#34;&gt;&lt;svg width=&#34;.8em&#34; height=&#34;.8em&#34; viewBox=&#34;0 0 21 21&#34;
            xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;
            &lt;path d=&#34;m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z&#34; fill=&#34;currentColor&#34; /&gt;
            &lt;path d=&#34;M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z&#34;
                fill=&#34;currentColor&#34;&gt;
        &lt;/svg&gt;&lt;/span&gt;
    
&lt;/a&gt;
&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://cuterwrite-1302252842.file.myqcloud.com/img/INKSCAPE-2024-02-28.webp&#34;
    alt=&#34;INKSCAPE-2024-02-28&#34; width=&#34;auto&#34; loading=&#34;lazy&#34;&gt;
&lt;/figure&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;详细介绍：&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/642526806&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34; &gt;Inkscape - 免费开源、跨平台的矢量图形设计软件，代替 Adobe Illustrator (AI) 和 CorelDRAW
    &lt;span style=&#34;white-space: nowrap;&#34;&gt;&lt;svg width=&#34;.8em&#34; height=&#34;.8em&#34; viewBox=&#34;0 0 21 21&#34;
            xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;
            &lt;path d=&#34;m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z&#34; fill=&#34;currentColor&#34; /&gt;
            &lt;path d=&#34;M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z&#34;
                fill=&#34;currentColor&#34;&gt;
        &lt;/svg&gt;&lt;/span&gt;
    
&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;推荐视频教程：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;






    


&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe src=&#34;https://player.bilibili.com/player.html?autoplay=0&amp;as_wide=1&amp;amp;high_quality=1&amp;amp;page=1&amp;bvid=BV1mA411e7FM&#34;
            scrolling=&#34;no&#34;
            frameborder=&#34;no&#34;
            framespacing=&#34;0&#34;
            allowfullscreen=&#34;true&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

</description>
        </item>
        
    </channel>
</rss>
