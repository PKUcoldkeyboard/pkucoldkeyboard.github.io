<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>大数据技术 on cuterwrite (Pang S.Z)</title>
    <link>https://cuterwrite.top/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 大数据技术 on cuterwrite (Pang S.Z)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 23 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://cuterwrite.top/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于Flink Native Kubernetes的词频统计实验</title>
      <link>https://cuterwrite.top/p/flink-native-k8s/</link>
      <pubDate>Fri, 23 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cuterwrite.top/p/flink-native-k8s/</guid>
      <description>Table of Contents generated with DocToc
基于Flink Native Kubernetes的词频统计实验 1 简介 1.1 实验环境 1.2 集群规划 2 Kubernetes集群部署 3 Flink Native Kubernetes部署 3.1 配置flink用户权限 3.2 创建session cluster 4 编写WordCount程序 5 实验结果 基于Flink Native Kubernetes的词频统计实验 1 简介 1.1 实验环境 本实验主要使用Ubuntu 20.04 64位作为系统环境，采用3台4核8GB云服务器作为Kubernetes集群部署机器，1台4核8GB云服务器作为集群管理工具Kuboard Spary部署机器，并作为NFS Server部署机器。使用的软件如下：
名称 版本 kuboard spary v1.2.3-amd64 kubernetes v1.25.4 calico v3.23.3 etcd v3.5.5 crictl v1.25.0 crun 1.4.5 krew v0.4.3 runc v1.1.4 cni v1.1.1 nerdctl 1.0.0 coredns v1.8.6 dnsautoscaler 1.8.5 pod_infra 3.</description>
    </item>
    
    <item>
      <title>基于Spark on k8s的词频统计实验</title>
      <link>https://cuterwrite.top/p/spark-on-k8s/</link>
      <pubDate>Fri, 23 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cuterwrite.top/p/spark-on-k8s/</guid>
      <description>Table of Contents generated with DocToc
基于Spark on k8s的词频统计实验 1 简介 1.1 实验环境 1.2 集群规划 2 部署Kubernetes集群 2.1 安装Kuboard-Spray 2.2 加载离线资源包 2.3 安装Kubernetes集群 3 部署Spark on k8s 3.1 制作spark容器镜像 3.2 创建命名空间 3.3 配置spark用户权限 3.4 配置spark历史服务器 4 编写WordCount程序 5 实验结果 基于Spark on k8s的词频统计实验 1 简介 1.1 实验环境 本实验主要使用Ubuntu 20.04 64位作为系统环境，采用6台4核8GB云服务器作为Kubernetes集群部署机器，1台2核4GB云服务器作为集群管理工具Kuboard Spary部署机器，1台2核4GB云服务器作为NFS Server（使用Centos 7.6系统）部署机器。
使用的软件如下：
名称 版本 kuboard spary v1.2.3-amd64 kubernetes v1.25.4 calico v3.23.3 etcd v3.5.5 crictl v1.25.0 crun 1.4.5 krew v0.4.3 runc v1.</description>
    </item>
    
    <item>
      <title>MapReduce实验</title>
      <link>https://cuterwrite.top/p/mapreduce/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cuterwrite.top/p/mapreduce/</guid>
      <description>Table of Contents generated with DocToc
MapReduce实验 1 简介 1.1 实验环境 1.2 集群规划 2 在IDEA中创建项目 3 编写MapReduce应用程序 4 实验结果 MapReduce实验 1 简介 1.1 实验环境 本实验主要使用Ubuntu 20.04 64位作为系统环境，采用3台4核8GB云服务器作为Haddop集群部署机器，使用的软件如下：
名称 版本 Hadoop 3.2.3 IDEA 2022.2.3 1.2 集群规划 主机名 IP DataNode NameNode JournalNode ZKFC node1 192.168.0.76 是 是 是 是 node2 192.168.0.213 是 是 是 是 node3 192.168.0.2 是 否 是 否 2 在IDEA中创建项目 打开IDEA界面，点击File-&amp;gt;New Project，选择Maven Archetype，创建一个名为MapReduce的Maven项目：
编写pom.xml文件，内容如下：
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;project xmlns=&amp;#34;http://maven.</description>
    </item>
    
    <item>
      <title>Zookeeper on k8s部署实验</title>
      <link>https://cuterwrite.top/p/zookeeper-on-k8s/</link>
      <pubDate>Wed, 21 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cuterwrite.top/p/zookeeper-on-k8s/</guid>
      <description>Zookeeper on k8s部署实验 1 简介 1.1 实验环境 1.2 集群规划 2 创建ConfigMap 2.1 创建zookeeper-environment 2.2 创建zookeeper-setup 3 创建StatefulSet 3.1 创建工作容器 3.2 创建存储挂载 3.3 创建SVC 3.4 设置亲和性 4 部署结果 4.1 集群信息 4.2 节点状态测试 Zookeeper on k8s部署实验 1 简介 1.1 实验环境 已经使用Kuboard Spary搭建好Kubernetes集群和Kuboard，使用的软件如下：
名称 版本 kuboard spary v1.2.3-amd64 kubernetes v1.25.5 zookeeper 3.8.0 1.2 集群规划 Zookeeper（三台4核8G的Ubuntu20.04服务器） 主机名 IP node1 192.168.0.6 node2 192.168.0.7 node3 192.168.0.14 2 创建ConfigMap 2.1 创建zookeeper-environment 创建一个名为zookeeper-environment的配置字典，包含变量对如下： Key Value ALLOW_ANONYMOUS_LOGIN yes BITNAMI_DEBUG false ZOO_4LW_COMMANDS_WHITELIST srvr, mntr, ruok ZOO_DATA_LOG_DIR ZOO_ENABLE_AUTH no ZOO_INIT_LIMIT 10 ZOO_LOG_LEVEL ERROR ZOO_MAX_CLIENT_CNXNS 60 ZOO_PORT_NUMBER 2181 ZOO_SERVERS zookeeper-statefulset-0.</description>
    </item>
    
    <item>
      <title>Hadoop3 HA模式三节点高可用集群搭建实验</title>
      <link>https://cuterwrite.top/p/hadoop-ha/</link>
      <pubDate>Thu, 22 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cuterwrite.top/p/hadoop-ha/</guid>
      <description>Table of Contents generated with DocToc
Hadoop3 HA模式三节点高可用集群搭建实验 关于Hadoop3 HA模式 单点故障（SPOF） Zookeeper 实验过程和结果 环境 集群规划 创建hadoop用户 主机名和网络映射配置 安装SSH并配置SSH免密登录 安装Java环境 安装hadoop3 安装Zookeeper 配置环境变量 配置HA模式集群分布式环境 修改文件workers 修改文件core-site.xml 修改文件hdfs-site.xml 修改文件hadoop-env.sh 在所有节点上创建数据文件夹和日志文件夹 在所有节点上分别启动journalnode 格式化namenode节点 分别在namenode节点上启动zkfc 在主节点上启动所有datanode节点 实验结果 实例运行 补充：可选配置 HDFS Web UI配置认证 Hadoop3 HA模式三节点高可用集群搭建实验 关于Hadoop3 HA模式 单点故障（SPOF） 简单来说，单点故障指的是分布式系统过度依赖于某一个节点，以至于只要该节点宕掉，就算整个集群的其它节点是完好的，集群也无法正常工作。而单点故障问题一般出现在集群的元数据存储节点上，这种节点一般一个集群就一个，一旦坏了整个系统就不能正常使用。Hadoop的单点故障出现在namenode上，影响集群不可用主要有以下两种情况：一是namenode节点宕机，将导致集群不可用，重启namenode之后才可使用；二是计划内的namenode节点软件或硬件升级，导致集群短时间内不可用。
为了避免出现单点故障，Hadoop官方给出了高可用HA方案：可以采取同时启动两个namenode：其中一个工作（active），另一个总是处于后备机（standby）的状态，让它只是单纯地同步活跃机的数据，当活跃机宕掉的时候就可以自动切换过去。这种模式称为HA模式。HA模式下不能用[namenode主机:端口]的模式来访问Hadoop集群，因为namenode主机已经不再是一个固定的IP了，而是采用serviceid的方式来访问，这个serviceid存储在ZooKeeper上。
Zookeeper Zookeeper是一个轻量级的分布式架构集群，为分布式应用提供一致性服务，提供的功能包括：配置维护、域名服务、分布式同步和组服务等。在HA模式中，Zookeeper最大的功能之一是知道某个节点是否宕机了。其原理是：每一个机器在Zookeeper中都有一个会话，如果某个机器宕机了，这个会话就会过期，Zookeeper就能发现该节点已宕机。
实验过程和结果 环境 本实验使用Ubuntu 18.04 64位作为系统环境，采用3台2核16GB（ MA3.MEDIUM16型号）的腾讯云服务器作为集群部署机器。
使用的软件如下：
名称 版本 Hadoop 3.2.3 Zookeeper 3.6.3 JDK 11.0.2 建议：在以下的部署过程中使用root用户可以避免很多权限问题。
集群规划 主机名 IP Namenode Datanode Zookeeper JournalNode master 172.</description>
    </item>
    
  </channel>
</rss>
