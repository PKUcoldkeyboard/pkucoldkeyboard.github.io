<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring-Cloud-Alibaba on cuterwrite (Pang S.Z)</title>
    <link>https://cuterwrite.top/categories/spring-cloud-alibaba/</link>
    <description>Recent content in Spring-Cloud-Alibaba on cuterwrite (Pang S.Z)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 15 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://cuterwrite.top/categories/spring-cloud-alibaba/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Cloud OAuth2从零开始实现用户认证和单点登录</title>
      <link>https://cuterwrite.top/p/oauth2-guide/</link>
      <pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cuterwrite.top/p/oauth2-guide/</guid>
      <description>Table of Contents generated with DocToc
Spring Cloud OAuth2从零开始实现用户认证和单点登录 OAuth2 是什么 OAuth2的使用场景 OAuth2实现统一认证功能 创建并配置认证服务端auth-server 1、引入需要的Maven包 2、配置bootstrap.yml和Nacos配置 3、配置Spring Security 4、实现UserDetailsService 5、配置OAuth2 6、配置JWTTokenStore 7、启动auth-server Spring Cloud OAuth2从零开始实现用户认证和单点登录 OAuth2 是什么 OAuth2 其实是一个关于授权的网络标准，它制定了设计思路和运行流程，利用这个标准我们其实是可以自己实现 OAuth2 的认证过程的。 spring-cloud-starter-oauth2 是 Spring Cloud 按照 OAuth2 的标准并结合 spring-security 封装好的一个具体实现。
OAuth 2 有四种授权模式，分别是授权码模式（authorization code）、简化模式（implicit）、密码模式（resource owner password credentials）、客户端模式（client credentials），具体 OAuth2 是什么，可以参考这篇文章（http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html）。
OAuth2的使用场景 典型的OAuth2使用场景：微信登录、QQ登录、微博登录、Google帐号登录、Github帐号登录等。第一次使用就无需注册，直接通过第三方平台授权登录即可，大大提高了使用效率。此外，服务不需要存储用户的密码，只需要存储认证平台返回的唯一ID和用户信息即可。 不使用OAuth2的场景：用户需要先完成注册，然后用注册号的帐号密码或者用手机验证码登录。 OAuth2实现统一认证功能 创建并配置认证服务端auth-server 认证服务端负责验证帐号、密码、存储Token、检查Token、刷新Token等。
1、引入需要的Maven包 2、配置bootstrap.yml和Nacos配置 认证服务器采用Nacos Config方案，将配置放在Nacos注册中心上
bootstrap.yml配置 auth-server-config配置
3、配置Spring Security PasswordEncoder：采用BCrypt加密算法 AuthenticationManager：OAuth2密码模式必须制定的授权管理，用默认的即可 configure：配置拦截器，使用通配符开放所有接口访问权限 4、实现UserDetailsService loadUserByUsername：首先利用用户微服务接口通过username查询用户、角色以及密码，然后返回org.springframework.security.core.userdetails.User即可。 5、配置OAuth2 有三个configure方法的重写</description>
    </item>
    
    <item>
      <title>Spring Cloud Alibaba笔记</title>
      <link>https://cuterwrite.top/p/spring-cloud-alibaba-1/</link>
      <pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cuterwrite.top/p/spring-cloud-alibaba-1/</guid>
      <description>Table of Contents generated with DocToc
Spring Cloud alibaba笔记 SOA与微服务的区别： Spring Cloud Alibaba与Spring Cloud Netflix的对比 什么是Spring Boot？ IOC/DI（控制反转与依赖注入） Spring发展过程 自动装配的实现 手写实现一个Starter 1 Starter的功能 2 Starter的命名规范 3 实现基于Redis的Starter Apache Dubbo Zookeeper Dubbo集成Zookeeper 1 需要解决的问题 2 实现步骤 3 原理 4 实战Dubbo Spring Cloud Dubbo的高级应用 1 集群容错 2 负载均衡 3 服务降级 主机绑定规则 Dubbo源码分析 1 核心点 2 生成IDE工程的命令 3 SPI(Service Provider Interface) 4 Dubbo中的SPI思想 5 Dubbo中的SPI原理 6 自适应扩展点 7 Protocol自适应扩展点源码 8 IOC 9 AOP 10 Dubbo集成Spring机制（略） 什么是Nacos？ 1 关键特性 2 Nacos集群 搭建Nacos注册中心的注意点 Nacos实现原理 1 模块组成 2 注册中心的原理 3 Nacos源码（略） Nacos实现统一配置管理 1 Nacos集成Spring Boot 2 Nacos集成Spring Cloud 3 动态更新配置 4 基于DataID配置yaml的文件扩展名 5 不同环境的配置切换 6 自定义Namespace和Group Nacos Config实现原理（略） Spring Cloud加载配置的原理（略） Nacos源码（略） Sentinel限流及熔断 1 服务限流的作用及实现 2 服务熔断和降级 3 Sentinel的特性 4 Sentinel的组成： 5 Sentinel基本应用： 6 Sentinel资源保护规则 1 QPS流量控制行为 7 Sentinel实现服务熔断 Sentinel集成Spring Cloud 基于Sentinel Dashboard来实现流控配置 Sentinel自定义URL限流异常 Sentinel对URL资源清洗 Sentinel集成Nacos实现动态流控规则 Sentinel集成Nacos实现规则同步 1 Sentinel Dashboard源码修改： 2 Sentinel Dashboard规则同步 Sentinel集成Dubbo实现限流 * 1 Dubbo服务接入Sentinel Dashboard 2 Dubbo服务限流规则 Sentinel热点限流 1 热点参数限流的使用 2 @SentinelResource 3 热点参数规则说明 Sentinel的工作原理（略） Spring Cloud Sentinel工作原理（略） Sentinel核心源码分析（略） 1 限流的源码实现 2 实时指标数据统计 3 服务降级的实现原理 什么是分布式事务？ 1 分布式事务问题的理论模型 1 X/Open分布式模型 2 两阶段提交协议 3 三阶段提交协议 4 CAP定理和BASE理论 2 分布式事务问题的常见解决方案 1 TCC补偿性方案 2 基于可靠性消息的最终一致性方案 3 最大努力通知型 3 分布式事务框架Seata 1 AT模式 2 Saga模式 Spring Cloud alibaba笔记 SOA与微服务的区别： SOA关注的是服务的重用性及解决信息孤岛问题 微服务关注的是解耦，虽然解耦和可重用性从特定的角度来看是一样的，但本质上是有区别的，解耦是降低业务之间的耦合度，而重用性关注的是服务的复用。 微服务会更多地关注在DevOps的持续交付上，因为服务粒度细化之后使得开发运维变得更加重要，因此微服务与容器化技术的结合更加紧密。 Spring Cloud Alibaba与Spring Cloud Netflix的对比 Alibaba开源组件在没有织入Spring Cloud生态之前，已经在各大公司广泛应用，所以容易实现技术整合及迁移。 Alibaba开源组件在服务治理上和处理高并发的能力上有天然的优势。 什么是Spring Boot？ 帮助开发者快速构建一个基于Spring Framework及Spring生态体系的应用解决方案，也是对于“约定优于配置”理念的最佳实践。</description>
    </item>
    
  </channel>
</rss>
