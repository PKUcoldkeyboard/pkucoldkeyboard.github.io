<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>cuterwrite (Pang S.Z)</title>
        <link>https://cuterwrite.top/</link>
        <description>Recent content on cuterwrite (Pang S.Z)</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 31 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://cuterwrite.top/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>路径规划算法之A* 与D* Lite原理详解</title>
        <link>https://cuterwrite.top/p/route-planning-alogrithm/</link>
        <pubDate>Tue, 31 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/route-planning-alogrithm/</guid>
        <description>&lt;img src="https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/photo-1563207153-f403bf289096.4ciiq7uwjl40.jfif" alt="Featured image of post 路径规划算法之A* 与D* Lite原理详解" /&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;  &lt;em&gt;generated with &lt;a class=&#34;link&#34; href=&#34;https://github.com/thlorenz/doctoc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DocToc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95%E4%B9%8Ba-%E4%B8%8Ed-lite%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3&#34; &gt;路径规划算法之A* 与D* Lite原理详解&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0&#34; &gt;问题描述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D&#34; &gt;基础算法介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2&#34; &gt;广度优先搜索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E6%9C%80%E4%BD%B3%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95&#34; &gt;最佳优先算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#dijkstra%E7%AE%97%E6%B3%95&#34; &gt;Dijkstra算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#a-%E7%AE%97%E6%B3%95&#34; &gt;A* 算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#a-%E7%AE%97%E6%B3%95%E5%8F%98%E7%A7%8D&#34; &gt;A* 算法变种&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#d-lite%E7%AE%97%E6%B3%95&#34; &gt;D* Lite算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE&#34; &gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;路径规划算法之a-与d-lite原理详解&#34;&gt;路径规划算法之A* 与D* Lite原理详解&lt;/h1&gt;
&lt;h2 id=&#34;问题描述&#34;&gt;问题描述&lt;/h2&gt;
&lt;p&gt;如何在一个网格地图中找到两点之间的最短路径&lt;/p&gt;
&lt;h2 id=&#34;基础算法介绍&#34;&gt;基础算法介绍&lt;/h2&gt;
&lt;p&gt;如果要在一个网格地图中找到两点之间的最短路径，很容易想到的广度优先算法（Breadth First）、最佳优先算法和Dijkstra算法。&lt;/p&gt;
&lt;h2 id=&#34;广度优先搜索&#34;&gt;广度优先搜索&lt;/h2&gt;
&lt;p&gt;广度优先搜索算法如其名称所示以广度做为优先级进行搜索。&lt;/p&gt;
&lt;p&gt;从起点开始，首先遍历起点周围邻近的点，然后再遍历已经遍历过的点邻近的点，逐步的向外扩散，直到找到终点。&lt;/p&gt;
&lt;p&gt;这种算法就像洪水（Flood fill）一样向外扩张，算法的过程如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/breadth_first.726kkh6umi80.gif&#34; alt=&#34;breadth_first&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;广度优先算法的优点是一定可以找到两点间的最优路径，但是代价就是需要搜索的点非常多，速度会比较慢。&lt;/p&gt;
&lt;h2 id=&#34;最佳优先算法&#34;&gt;最佳优先算法&lt;/h2&gt;
&lt;p&gt;在一些情况下，如果我们可以预先计算出每个节点到终点的距离，则我们可以利用这个信息更快的到达终点。&lt;/p&gt;
&lt;p&gt;最佳优先算法和广度优先算法不同，它需要使用一个优先队列，用每个节点到终点的距离作为优先级每次始终选取到终点移动代价最小（离终点最近）的节点作为下一个遍历的节点，直到到达终点。这种算法称之为最佳优先（Best First）算法。和广度优先相比，最佳优先所需要搜索的点要少很多，可以大大加快路径的搜索速度，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/2.2hgkrensw5u0.gif&#34; alt=&#34;2&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;但最佳优先算法的缺点就是，当起点和终点有障碍物时，可能最佳优先算法找到的路径并不是最佳的路径，下图描述了这种情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/3.7e87g1vzlu40.gif&#34; alt=&#34;3&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;dijkstra算法&#34;&gt;Dijkstra算法&lt;/h2&gt;
&lt;p&gt;Dijkstra算法是由计算机科学家&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Edsger_W._Dijkstra&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Edsger W. Dijkstra&lt;/a&gt;在1956年提出的&lt;/p&gt;
&lt;p&gt;Dijkstra算法用来寻找图形中节点之间的最短路径。&lt;/p&gt;
&lt;p&gt;考虑这样一种场景，在一些情况下，图形中相邻节点之间的移动代价并不相等。例如，游戏中的一幅图，既有平地也有山脉，那么游戏中的角色在平地和山脉中移动的速度通常是不相等的。&lt;/p&gt;
&lt;p&gt;在Dijkstra算法中，需要计算每一个节点距离起点的总移动代价。同时，还需要一个优先队列结构。对于所有待遍历的节点，放入优先队列中会按照代价进行排序。&lt;/p&gt;
&lt;p&gt;在算法运行的过程中，每次都从优先队列中选出代价最小的作为下一个遍历的节点。直到到达终点为止。&lt;/p&gt;
&lt;p&gt;下面对比了不考虑节点移动代价差异的广度优先搜索与考虑移动代价的Dijkstra算法的运算结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/dijkstra.2dvhnjsz7zr4.gif&#34; alt=&#34;dijkstra&#34;  /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当图形为网格图，并且每个节点之间的移动代价是相等的，那么Dijkstra算法将和广度优先算法变得一样。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;a-算法&#34;&gt;A* 算法&lt;/h2&gt;
&lt;p&gt;A* 算法最初发表于1968年，由Stanford研究院的Peter Hart, Nils Nilsson以及Bertram Raphael发表。它可以被认为是Dijkstra算法的扩展。&lt;/p&gt;
&lt;p&gt;由于借助启发函数的引导，A*算法通常拥有更好的性能。&lt;/p&gt;
&lt;p&gt;A* 算法通过下面这个函数来计算每个节点的优先级。
$$
f(n) = g(n) + h(n)
$$
其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;f(n) 是节点n的综合优先级。当我们选择下一个要遍历的节点时，我们总会选取综合优先级最高（值最小）的节点。&lt;/li&gt;
&lt;li&gt;g(n) 是节点n距离起点的实际代价。&lt;/li&gt;
&lt;li&gt;h(n) 是启发函数，是节点n到终点的估计值
&lt;ul&gt;
&lt;li&gt;在极端情况下，启发函数始终为0，则将由g(n)g(n)决定节点的优先级，此时算法就退化成了Dijkstra算法。&lt;/li&gt;
&lt;li&gt;如果h(n)始终小于等于节点n到终点的代价，则A*算法保证一定能够找到最短路径。但是当h(n)的值越小，算法将遍历越多的节点，也就导致算法越慢。&lt;/li&gt;
&lt;li&gt;如果h(n)完全等于节点n到终点的代价，则A*算法将找到最佳路径，并且速度很快。可惜的是，并非所有场景下都能做到这一点。因为在没有达到终点之前，我们很难确切算出距离终点还有多远。&lt;/li&gt;
&lt;li&gt;如果h(n)的值比节点n到终点的代价要大，则A*算法不能保证找到最短路径，不过此时会很快。&lt;/li&gt;
&lt;li&gt;在另外一个极端情况下，如果h(n)相较于g(n)大很多，则此时只有h(n)产生效果，这也就变成了最佳优先搜索。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由上面这些信息我们可以知道，通过调节启发函数我们可以控制算法的速度和精确度。因为在一些情况，我们可能未必需要最短路径，而是希望能够尽快找到一个路径即可。这也是A*算法比较灵活的地方。&lt;/p&gt;
&lt;p&gt;对于网格形式的图，有以下这些启发函数可以使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果图形中只允许朝上下左右四个方向移动，则可以使用曼哈顿距离（Manhattan distance）。&lt;/li&gt;
&lt;li&gt;如果图形中允许朝八个方向移动，则可以使用对角距离。&lt;/li&gt;
&lt;li&gt;如果图形中允许朝任何方向移动，则可以使用欧几里得距离（Euclidean distance）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A* 算法还需要使用两个集合来表示待遍历的节点，与已经遍历过的节点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenList：可到达的节点&lt;/li&gt;
&lt;li&gt;CloseList：已到达的节点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A* 算法具体的运行过程为：每次从优先队列中选取f(n)值最小（优先级最高）的节点作为下一个待遍历的节点，如果该节点是目标节点，则直接返回，算法结束。如果不是，则遍历其邻居节点，对所有不在CloseList中的、在网格范围内的、非障碍物的节点，计算其中F值、G值和H值，添加到优先队列（OpenList）中和CloseList中。&lt;/p&gt;
&lt;p&gt;A* 算法Java实现如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/carbon.23rnz055yuzk.png&#34; alt=&#34;carbon&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;a-算法变种&#34;&gt;A* 算法变种&lt;/h2&gt;
&lt;p&gt;A* 算法有不少的变种，主要有如下算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ARA * ：[ARA* - Anytime A* with Provable Bounds on Sub-Optimality](&lt;a class=&#34;link&#34; href=&#34;https://qiangbo-workspace.oss-cn-shanghai.aliyuncs.com/2019-02-05-a-star-algorithm/ARA&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://qiangbo-workspace.oss-cn-shanghai.aliyuncs.com/2019-02-05-a-star-algorithm/ARA&lt;/a&gt;*- Anytime A* with Provable Bounds on Sub-Optimality.pdf)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;D* ：D* 是Dynamic A* 的简写，其算法和A*类似，不同的是，其代价的计算在算法运行过程中可能会发生变化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://idm-lab.org/project-a.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Project “Fast Replanning （Incremental Heuristic Search）”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.frc.ri.cmu.edu/~axs/dynamic_plan.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Real-Time Replanning in Dynamic and Unknown Environments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Field D* ： Field D* 扩展了D* 和D*  Lite，是一种基于插值（ interpolation-based ）的规划算法，它使用线性插值来有效地生成低成本路径，从而消除不必要的转向。&lt;/p&gt;
&lt;p&gt;在给定线性插值假设的情况下，路径是最优的，并且在实践中非常有效。该算法目前被各种现场机器人系统使用。&lt;/p&gt;
&lt;p&gt;关于Field D* 的详细内容可以看下面这篇论文：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[Field D*: An Interpolation-based Path Planner and Replanner](&lt;a class=&#34;link&#34; href=&#34;https://qiangbo-workspace.oss-cn-shanghai.aliyuncs.com/2019-02-05-a-star-algorithm/Field&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://qiangbo-workspace.oss-cn-shanghai.aliyuncs.com/2019-02-05-a-star-algorithm/Field&lt;/a&gt; D*- An Interpolation-based Path Planner and Replanner.pdf)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;d-lite算法&#34;&gt;D* Lite算法&lt;/h2&gt;
&lt;p&gt;D* Lite 算法是一种增量启发式搜素算法，由 Sven Koeing 和 Maxim Likhachev 于 2004 年提出，是基于 LPA* 和 Dynamic SWSF-FP 的一种算法。D* Lite 算法可以适用于地图未知、环境随时会发生变化的情况，在遇到新增加的障碍物时，可以利用先前搜索所获得的信息，而不需要完全重新规划路径。&lt;/p&gt;
&lt;p&gt;D* Lite的启发函数与A* 类似，同样有一个启发函数，不过因为 D* Lite 是从终点向起点搜索，所以对应的启发函数 h(n) 也变成了节点 n 到起点的估计值。&lt;/p&gt;
&lt;p&gt;D* Lite中几个概念的定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;g(n)：当前节点到终点的实际代价&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;h(n)：当前节点到起点的估计值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rhs（right-hand side)：公式如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/image.6ton688ml8o0.png&#34; alt=&#34;image&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;一个点的 rhs 值是它的父代节点中 g 值加上这两点之间的代价中的最小值，相当于一个点从父代节点到达这个点的最小代价。其实在算法的大部分过程中，g 值和 rhs 值是相等的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;两个key值：在 A* 算法中，通过 f(n) 的大小来判断一个点的优先级，而在 D* Lite 中，需要通过两个 key 值来判断一个点的优先级，key 值越小优先级越高，先判断第一个 key 值，如果第一个 key 值相等再判断第二个 key 值。公式如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/image.qncmp3shatc.png&#34; alt=&#34;image&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;其中 km 的定义为，算法初始化时会先将 km 设置为 0，之后当机器人有检测到地图的变化时，km需要加上上一个起点与当前位置的启发距离，并且把当前所在的点设置为新的起点，即更新起点的位置。&lt;/p&gt;
&lt;p&gt;如果在机器人还没有移动的时候 km 就等于 0，这时算法其实就相当于一个反向从终点往起点方向搜索的 A* 算法了。&lt;/p&gt;
&lt;p&gt;当机器人检测到障碍的变化时会再一次规划路径，这时候的实际起点应该是机器人当前的位置，起点发生了变化，每个点的 h 值也会相应变化，key 值也发生了变化。如果不引入这个参数的话，就需要把优先队列中的全部节点都重新计算一遍 key 值，增加了计算量。引入之后就可以一定程度上保证 key 值的一致性，减少计算量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二 key 值就是 g 值和 rhs 值中的最小值，它的意义在于当两个点的第一个 key 值相等的时候，算法会优先选择距离终点近的点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;局部一致性：D* Lite 算法中还有一个很重要的概念就是局部一致性，通过一个点的局部一致性来判断当前点是否需要计算。其定义如下：当一个点的 &lt;code&gt;g 值等于 rhs 值&lt;/code&gt;时称这个点为局部一致的点，否则称这个点为局部不一致。其中局部不一致的情况还可细分成为局部过一致和局部欠一致：当一个点的 &lt;code&gt;g 值大于 rhs 值&lt;/code&gt;时，这个点为局部过一致，通常是有障碍物删除时或者算法第一次搜索路径时；当一个点的 &lt;code&gt;g 值小于 rhs 值&lt;/code&gt;时，这个点为局部欠一致，通常是检测到了新增的障碍物。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;D* Lite算法的步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将当前点设置为起点&lt;/li&gt;
&lt;li&gt;将优先队列设置为空队列，将所有节点的g值和rhs值设置为无穷，将终点的rhs值设为0，并且计算它的key值加入到优先队列中。&lt;/li&gt;
&lt;li&gt;调用ComputeShortestPath()开始计算它的最短路径&lt;/li&gt;
&lt;li&gt;移动到子代中g值加上这两个点之间代价中最小的点。&lt;/li&gt;
&lt;li&gt;如果检测到了障碍的变化，根据上一个起点和当前点的启发值，修改k_m的值，并将当前节点设置为新的起点。&lt;/li&gt;
&lt;li&gt;对所有两个点之间的代价发生变化的，更新这两个点之间的代价，如果两个点之间的代价变小，说明有障碍物删除，更新它的rhs值，如果代价变大了，说明新增了一个障碍物，需要通过它的子代来更新rhs值。&lt;/li&gt;
&lt;li&gt;更新受影响的节点。&lt;/li&gt;
&lt;li&gt;计算最短路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;D* Lite算法Java代码实现还未完成&lt;/p&gt;
&lt;p&gt;python版代码参考：&lt;a class=&#34;link&#34; href=&#34;https://github.com/avgaydashenko/d_star&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/avgaydashenko/d_star&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;p&gt;[1]&lt;a class=&#34;link&#34; href=&#34;https://paul.pub/a-star-algorithm/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;路径规划之A*算法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2]&lt;a class=&#34;link&#34; href=&#34;https://yutouwd.github.io/posts/346220552/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;路径规划之D* Lite算法详解及实现&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>聊聊前缀树Trie</title>
        <link>https://cuterwrite.top/p/trie/</link>
        <pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/trie/</guid>
        <description>&lt;img src="https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/mountains-6522018__340.3begmxsrjam0.webp" alt="Featured image of post 聊聊前缀树Trie" /&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;  &lt;em&gt;generated with &lt;a class=&#34;link&#34; href=&#34;https://github.com/thlorenz/doctoc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DocToc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E8%81%8A%E8%81%8A%E5%89%8D%E7%BC%80%E6%A0%91trie&#34; &gt;聊聊前缀树Trie&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#trie%E6%A0%91%E7%AE%80%E4%BB%8B&#34; &gt;Trie树简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#trie%E6%A0%91%E7%89%B9%E7%82%B9&#34; &gt;Trie树特点&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#trie%E6%A0%91%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C&#34; &gt;Trie树的插入操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#trie%E6%A0%91%E7%9A%84%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C&#34; &gt;Trie树的查询操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#trie%E6%A0%91%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C&#34; &gt;Trie树的删除操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#trie%E6%A0%91%E5%BA%94%E7%94%A8%E4%B8%8E%E5%AE%9E%E7%8E%B0&#34; &gt;Trie树应用与实现&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E5%89%8D%E7%BC%80%E5%8C%B9%E9%85%8D%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8&#34; &gt;前缀匹配/自动补全&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A3%80%E7%B4%A2&#34; &gt;字符串检索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1&#34; &gt;动态路由&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#trie%E6%A0%91%E7%9A%84%E5%B1%80%E9%99%90%E6%80%A7&#34; &gt;Trie树的局限性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;聊聊前缀树trie&#34;&gt;聊聊前缀树Trie&lt;/h1&gt;
&lt;h2 id=&#34;trie树简介&#34;&gt;Trie树简介&lt;/h2&gt;
&lt;p&gt;Trie 树，也叫“字典树”。顾名思义，它是一个&lt;strong&gt;树形结构&lt;/strong&gt;。它是一种专门处理字符串匹配的数据结构，用来解决在一组字符串集合中快速查找某个字符串的问题。&lt;/p&gt;
&lt;p&gt;此外 Trie 树也称前缀树（因为某节点的后代存在共同的前缀，比如pan是panda的前缀）。&lt;/p&gt;
&lt;p&gt;它的key都为字符串，能做到高效查询和插入，时间复杂度为O(k)，k为字符串长度，缺点是如果大量字符串没有共同前缀时很耗内存。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;它的核心思想就是通过最大限度地减少无谓的字符串比较，使得查询高效率，即「用空间换时间」，再利用共同前缀来提高查询效率。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;trie树特点&#34;&gt;Trie树特点&lt;/h2&gt;
&lt;p&gt;假设有 5 个字符串，它们分别是：code，cook，five，file，fat。现在需要在里面多次查找某个字符串是否存在。常见的方案有：①如果每次查找，都是拿要查找的字符串跟这 5 个字符串依次进行字符串匹配，时间复杂度为O(n)。②将字符串存入HashSet中，查找的时候时间复杂度为O(1)，但是缺点是空间复杂度高，假如有大量的字符串（比如10亿条）则会浪费大量的空间。&lt;/p&gt;
&lt;p&gt;Trie树则通过空间换时间的方式，将字符串组织成下图的结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/v2-d82b7d102ad949dce0bfb92af3d41a11_720w.3xojsp6h3ig0.jpg&#34; alt=&#34;v2-d82b7d102ad949dce0bfb92af3d41a11_720w&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;通过上图，可以发现 Trie树 的三个特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根节点不包含字符，除根节点外每一个节点都只包含一个字符&lt;/li&gt;
&lt;li&gt;从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串&lt;/li&gt;
&lt;li&gt;每个节点的所有子节点包含的字符都不相同&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;trie树的插入操作&#34;&gt;Trie树的插入操作&lt;/h3&gt;
&lt;p&gt;Trie树的插入操作很简单，其实就是将单词的每个字母逐一插入 Trie树。插入前先看字母对应的节点是否存在，存在则共享该节点，不存在则创建对应的节点。比如要插入新单词&lt;code&gt;cook&lt;/code&gt;，就有下面几步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入第一个字母 &lt;code&gt;c&lt;/code&gt;，发现 &lt;code&gt;root&lt;/code&gt; 节点下方存在子节点 &lt;code&gt;c&lt;/code&gt;，则共享节点 &lt;code&gt;c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;插入第二个字母 &lt;code&gt;o&lt;/code&gt;，发现 &lt;code&gt;c&lt;/code&gt; 节点下方存在子节点 &lt;code&gt;o&lt;/code&gt;，则共享节点 &lt;code&gt;o&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;插入第三个字母 &lt;code&gt;o&lt;/code&gt;，发现 &lt;code&gt;o&lt;/code&gt; 节点下方不存在子节点 &lt;code&gt;o&lt;/code&gt;，则创建子节点 &lt;code&gt;o&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;插入第三个字母 &lt;code&gt;k&lt;/code&gt;，发现 &lt;code&gt;o&lt;/code&gt; 节点下方不存在子节点 &lt;code&gt;k&lt;/code&gt;，则创建子节点 &lt;code&gt;k&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;至此，单词 &lt;code&gt;cook&lt;/code&gt; 中所有字母已被插入 Trie树 中，然后设置节点 &lt;code&gt;k&lt;/code&gt; 中的标志位，标记路径 &lt;code&gt;root-&amp;gt;c-&amp;gt;o-&amp;gt;o-&amp;gt;k&lt;/code&gt;这条路径上所有节点的字符可以组成一个单词&lt;code&gt;cook&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;trie树的查询操作&#34;&gt;Trie树的查询操作&lt;/h3&gt;
&lt;p&gt;在 Trie 树中查找一个字符串的时候，比如查找字符串 &lt;code&gt;code&lt;/code&gt;，可以将要查找的字符串分割成单个的字符 c，o，d，e，然后从 Trie 树的根节点开始匹配。如图所示，绿色的路径就是在 Trie 树中匹配的路径&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/1.4i55q8qg8gi0.jpg&#34; alt=&#34;1&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;trie树的删除操作&#34;&gt;Trie树的删除操作&lt;/h3&gt;
&lt;p&gt;Trie树的删除操作与二叉树的删除操作有类似的地方，需要考虑删除的节点所处的位置，这里分三种情况进行分析：
&lt;strong&gt;删除整个单词（比如&lt;code&gt;hi&lt;/code&gt;）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从根节点开始查找第一个字符&lt;code&gt;h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;找到&lt;code&gt;h&lt;/code&gt;子节点后，继续查找&lt;code&gt;h&lt;/code&gt;的下一个子节点&lt;code&gt;i&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt;是单词&lt;code&gt;hi&lt;/code&gt;的标志位，将该标志位去掉&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt;节点是&lt;code&gt;hi&lt;/code&gt;的叶子节点，将其删除&lt;/li&gt;
&lt;li&gt;删除后发现&lt;code&gt;h&lt;/code&gt;节点为叶子节点，并且不是单词标志位，也将其删除&lt;/li&gt;
&lt;li&gt;这样就完成了&lt;code&gt;hi&lt;/code&gt;单词的删除操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;删除前缀单词（比如&lt;code&gt;cod&lt;/code&gt;）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这种方式删除比较简单。 只需要将&lt;code&gt;cod&lt;/code&gt;单词整个字符串查找完后，&lt;code&gt;d&lt;/code&gt;节点因为不是叶子节点，只需将其单词标志去掉即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删除分支单词（比如&lt;code&gt;cook&lt;/code&gt;）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与 &lt;strong&gt;删除整个单词&lt;/strong&gt; 情况类似，区别点在于删除到 &lt;code&gt;cook&lt;/code&gt; 的第一个 &lt;code&gt;o&lt;/code&gt; 时，该节点为非叶子节点，停止删除，这样就完成&lt;code&gt;cook&lt;/code&gt;字符串的删除操作。&lt;/p&gt;
&lt;h2 id=&#34;trie树应用与实现&#34;&gt;Trie树应用与实现&lt;/h2&gt;
&lt;p&gt;事实上 Trie树 在日常生活中的使用随处可见，比如这个：
具体来说就是经常用于统计和排序大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：最大限度地减少无谓的字符串比较，查询效率比哈希表高。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现：最简单的字典树&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/carbon.3wfy1nwqmw00.png&#34; alt=&#34;carbon&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;前缀匹配自动补全&#34;&gt;前缀匹配/自动补全&lt;/h3&gt;
&lt;p&gt;例如：找出一个字符串集合中所有以 &lt;code&gt;五分钟&lt;/code&gt; 开头的字符串。我们只需要用所有字符串构造一个 trie树，然后输出以 五−&amp;gt;分−&amp;gt;钟 开头的路径上的关键字即可。
trie树前缀匹配常用于搜索提示。如当输入一个网址，可以自动搜索出可能的选择。当没有完全匹配的搜索结果，可以返回前缀最相似的可能&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现：自动补全功能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）先找出匹配词语的节点（可能是中间的路径，不一定是最终节点）&lt;/p&gt;
&lt;p&gt;（2）递归的查询该节点下的所有单词&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/carbon%281%29.773480vjdgw0.png&#34; alt=&#34;carbon(1)&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;字符串检索&#34;&gt;字符串检索&lt;/h3&gt;
&lt;p&gt;给出 N 个单词组成的熟词表，以及一篇全用小写英文书写的文章，按最早出现的顺序写出所有不在熟词表中的生词。
检索/查询功能是Trie树最原始的功能。给定一组字符串，查找某个字符串是否出现过，思路就是从根节点开始一个一个字符进行比较：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;如果沿路比较，发现不同的字符，则表示该字符串在集合中不存在。&lt;/li&gt;
&lt;li&gt;如果所有的字符全部比较完并且全部相同，还需判断最后一个节点的标志位（标记该节点是否代表一个关键字）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/carbon%282%29.6t6buvfhqwk0.png&#34; alt=&#34;carbon(2)&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;动态路由&#34;&gt;动态路由&lt;/h3&gt;
&lt;p&gt;实现动态路由最常用的数据结构，被称为前缀树(Trie树)。看到名字你大概也能知道前缀树长啥样了：每一个节点的所有的子节点都拥有相同的前缀。这种结构非常适用于路由匹配，比如我们定义了如下路由规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/:lang/doc&lt;/li&gt;
&lt;li&gt;/:lang/tutorial&lt;/li&gt;
&lt;li&gt;/:lang/intro&lt;/li&gt;
&lt;li&gt;/about&lt;/li&gt;
&lt;li&gt;/p/blog&lt;/li&gt;
&lt;li&gt;/p/related&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTTP请求的路径恰好是由&lt;code&gt;/&lt;/code&gt;分隔的多段构成的，因此，每一段可以作为前缀树的一个节点。我们通过树结构查询，如果中间某一层的节点都不满足条件，那么就说明没有匹配到的路由，查询结束。&lt;/p&gt;
&lt;p&gt;接下来我们实现的动态路由具备以下两个功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数匹配&lt;code&gt;:&lt;/code&gt;。例如 &lt;code&gt;/p/:lang/doc&lt;/code&gt;，可以匹配 &lt;code&gt;/p/c/doc&lt;/code&gt; 和 &lt;code&gt;/p/go/doc&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;通配&lt;code&gt;*&lt;/code&gt;。例如 &lt;code&gt;/static/*filepath&lt;/code&gt;，可以匹配&lt;code&gt;/static/fav.ico&lt;/code&gt;，也可以匹配&lt;code&gt;/static/js/jQuery.js&lt;/code&gt;，这种模式常用于静态服务器，能够递归地匹配子路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;实现：动态路由&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）由于路由规则允许模糊匹配，匹配子节点时可能还包括了含有模糊字符串的结构，比如插入&lt;code&gt;/:lang/tutorial&lt;/code&gt;这个路由pattern后再插入&lt;code&gt;/golang/intro&lt;/code&gt;时，虽然golang与:lang并不匹配，但还是需要将intro插入在:lang节点下，而不是再创建一个golang节点，所以仅使用哈希表查找子节点并不合适，需要改用为ArrayList来存TrieNode，使用一个单独的字符串part来保存节点的信息，isWild来判断节点是否是模糊节点。&lt;/p&gt;
&lt;p&gt;（2）插入与查询的逻辑与字符串检索区别不大，关键修改在于：插入时还需要插入part和isWild信息，搜搜时如果碰到了*号开头的节点，需要终止查询，返回该节点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/carbon%283%29.15npysg8nuak.png&#34; alt=&#34;carbon(3)&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;trie树的局限性&#34;&gt;Trie树的局限性&lt;/h2&gt;
&lt;p&gt;如前文所讲，Trie的核心思想是空间换时间，利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。
假设字符的种数有&lt;code&gt;m&lt;/code&gt;个，有若干个长度为n的字符串构成了一个 Trie树 ，则每个节点的出度为 &lt;code&gt;m&lt;/code&gt;（即每个节点的可能子节点数量为&lt;code&gt;m&lt;/code&gt;），Trie树 的高度为&lt;code&gt;n&lt;/code&gt;。很明显我们浪费了大量的空间来存储字符，此时Trie树的最坏空间复杂度为&lt;code&gt;O(m^n)&lt;/code&gt;。也正由于每个节点的出度为&lt;code&gt;m&lt;/code&gt;，所以我们能够沿着树的一个个分支高效的向下逐个字符的查询，而不是遍历所有的字符串来查询，此时Trie树的最坏时间复杂度为&lt;code&gt;O(n)&lt;/code&gt;。
这正是空间换时间的体现，也是利用公共前缀降低查询时间开销的体现。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Spring Cloud OAuth2从零开始实现用户认证和单点登录</title>
        <link>https://cuterwrite.top/p/oauth2-guide/</link>
        <pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/oauth2-guide/</guid>
        <description>&lt;img src="https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/image.rglemef8w74.png" alt="Featured image of post Spring Cloud OAuth2从零开始实现用户认证和单点登录" /&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;  &lt;em&gt;generated with &lt;a class=&#34;link&#34; href=&#34;https://github.com/thlorenz/doctoc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DocToc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#spring-cloud-oauth2%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AE%9E%E7%8E%B0%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E5%92%8C%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95&#34; &gt;Spring Cloud OAuth2从零开始实现用户认证和单点登录&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#oauth2-%E6%98%AF%E4%BB%80%E4%B9%88&#34; &gt;OAuth2 是什么&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#oauth2%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF&#34; &gt;OAuth2的使用场景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#oauth2%E5%AE%9E%E7%8E%B0%E7%BB%9F%E4%B8%80%E8%AE%A4%E8%AF%81%E5%8A%9F%E8%83%BD&#34; &gt;OAuth2实现统一认证功能&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E5%88%9B%E5%BB%BA%E5%B9%B6%E9%85%8D%E7%BD%AE%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1%E7%AB%AFauth-server&#34; &gt;创建并配置认证服务端auth-server&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1%E5%BC%95%E5%85%A5%E9%9C%80%E8%A6%81%E7%9A%84maven%E5%8C%85&#34; &gt;1、引入需要的Maven包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2%E9%85%8D%E7%BD%AEbootstrapyml%E5%92%8Cnacos%E9%85%8D%E7%BD%AE&#34; &gt;2、配置bootstrap.yml和Nacos配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3%E9%85%8D%E7%BD%AEspring-security&#34; &gt;3、配置Spring Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4%E5%AE%9E%E7%8E%B0userdetailsservice&#34; &gt;4、实现UserDetailsService&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5%E9%85%8D%E7%BD%AEoauth2&#34; &gt;5、配置OAuth2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6%E9%85%8D%E7%BD%AEjwttokenstore&#34; &gt;6、配置JWTTokenStore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#7%E5%90%AF%E5%8A%A8auth-server&#34; &gt;7、启动auth-server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;spring-cloud-oauth2从零开始实现用户认证和单点登录&#34;&gt;Spring Cloud OAuth2从零开始实现用户认证和单点登录&lt;/h1&gt;
&lt;h2 id=&#34;oauth2-是什么&#34;&gt;OAuth2 是什么&lt;/h2&gt;
&lt;p&gt;OAuth2 其实是一个关于授权的网络标准，它制定了设计思路和运行流程，利用这个标准我们其实是可以自己实现 OAuth2 的认证过程的。 spring-cloud-starter-oauth2 是 Spring Cloud 按照 OAuth2 的标准并结合 spring-security 封装好的一个具体实现。&lt;/p&gt;
&lt;p&gt;OAuth 2 有四种授权模式，分别是授权码模式（authorization code）、简化模式（implicit）、密码模式（resource owner password credentials）、客户端模式（client credentials），具体 OAuth2 是什么，可以参考这篇文章（&lt;a class=&#34;link&#34; href=&#34;http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html&lt;/a&gt;）。&lt;/p&gt;
&lt;h2 id=&#34;oauth2的使用场景&#34;&gt;OAuth2的使用场景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;典型的OAuth2使用场景：微信登录、QQ登录、微博登录、Google帐号登录、Github帐号登录等。第一次使用就无需注册，直接通过第三方平台授权登录即可，大大提高了使用效率。此外，服务不需要存储用户的密码，只需要存储认证平台返回的唯一ID和用户信息即可。&lt;/li&gt;
&lt;li&gt;不使用OAuth2的场景：用户需要先完成注册，然后用注册号的帐号密码或者用手机验证码登录。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;oauth2实现统一认证功能&#34;&gt;OAuth2实现统一认证功能&lt;/h2&gt;
&lt;h3 id=&#34;创建并配置认证服务端auth-server&#34;&gt;创建并配置认证服务端auth-server&lt;/h3&gt;
&lt;p&gt;认证服务端负责验证帐号、密码、存储Token、检查Token、刷新Token等。&lt;/p&gt;
&lt;h4 id=&#34;1引入需要的maven包&#34;&gt;1、引入需要的Maven包&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/carbon.10l630rluof4.png&#34; alt=&#34;carbon&#34;  /&gt;&lt;/p&gt;
&lt;h4 id=&#34;2配置bootstrapyml和nacos配置&#34;&gt;2、配置bootstrap.yml和Nacos配置&lt;/h4&gt;
&lt;p&gt;认证服务器采用Nacos Config方案，将配置放在Nacos注册中心上&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bootstrap.yml配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/carbon1.i6i83l0f9eg.png&#34; alt=&#34;carbon1&#34;  /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;auth-server-config配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/carbon2.76rlhp154ls0.png&#34; alt=&#34;carbon2&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3配置spring-security&#34;&gt;3、配置Spring Security&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/carbon3.qyvcxtck0kg.png&#34; alt=&#34;carbon3&#34;  /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PasswordEncoder：采用BCrypt加密算法&lt;/li&gt;
&lt;li&gt;AuthenticationManager：OAuth2密码模式必须制定的授权管理，用默认的即可&lt;/li&gt;
&lt;li&gt;configure：配置拦截器，使用通配符开放所有接口访问权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4实现userdetailsservice&#34;&gt;4、实现UserDetailsService&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/carbon4.7dfnhaewd7g0.png&#34; alt=&#34;carbon4&#34;  /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;loadUserByUsername：首先利用用户微服务接口通过username查询用户、角色以及密码，然后返回&lt;code&gt;org.springframework.security.core.userdetails.User&lt;/code&gt;即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;5配置oauth2&#34;&gt;5、配置OAuth2&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/1carbon.1ivefisygxc0.png&#34; alt=&#34;1carbon&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;有三个configure方法的重写&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AuthorizationServerEndpointConfigurer参数的重写&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;authenticationManager：用于支持password模式&lt;/li&gt;
&lt;li&gt;userDetailsService：设置用户验证服务&lt;/li&gt;
&lt;li&gt;tokenStore：制定token的存储方式&lt;/li&gt;
&lt;li&gt;accessTokenConverter：开启json web token模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ClientDetailsServiceConfigure参数的重写&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;采用数据库配置的方式，预先定义好oauth2_client_details表，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/2carbon.37d13w7gm480.png&#34; alt=&#34;2carbon&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clientId、client_secret：这两个参数对应请求端定义的 cleint-id 和 client-secret&lt;/li&gt;
&lt;li&gt;authorized_grant_types：包括authorization_code（授权码模式）、password（密码模式）、implicit（隐式授权类型）、client_credentials、refresh_token这五种中的一种或多种。&lt;/li&gt;
&lt;li&gt;access_token_validity：token的有效期&lt;/li&gt;
&lt;li&gt;scopes：用来限定客户端访问的权限，只有在scopes定义内的，才可以正常换取token。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AuthorizationServerSecurityConfigurer参数的重写：限制客户端访问认证接口的权限&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;allowFormAuthenticationForClients()：允许客户端访问OAuth2授权接口，否则返回401&lt;/li&gt;
&lt;li&gt;checkTokenAccess ：允许已授权用户访问checkToken接口。&lt;/li&gt;
&lt;li&gt;tokenKeyAccess：允许已授权用户访问获取token接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;6配置jwttokenstore&#34;&gt;6、配置JWTTokenStore&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/3carbon.540kq6auyio0.png&#34; alt=&#34;3carbon&#34;  /&gt;&lt;/p&gt;
&lt;h4 id=&#34;7启动auth-server&#34;&gt;7、启动auth-server&lt;/h4&gt;
&lt;p&gt;现在已经可以访问OAuth2相关的Restful接口：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POST /oauth/authorize  授权码模式认证授权接口&lt;/li&gt;
&lt;li&gt;GET/POST /oauth/token  获取 token 的接口&lt;/li&gt;
&lt;li&gt;POST /oauth/check_token  检查 token 合法性接口&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>机器学习重要术语词汇表</title>
        <link>https://cuterwrite.top/p/machine-learning-terms/</link>
        <pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/machine-learning-terms/</guid>
        <description>&lt;img src="https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/store/image.2lqvb7dnlg80.png" alt="Featured image of post 机器学习重要术语词汇表" /&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;  &lt;em&gt;generated with &lt;a class=&#34;link&#34; href=&#34;https://github.com/thlorenz/doctoc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DocToc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E9%87%8D%E8%A6%81%E6%9C%AF%E8%AF%AD%E8%AF%8D%E6%B1%87%E8%A1%A8&#34; &gt;机器学习重要术语词汇表&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E7%B2%BE%E7%A1%AE%E5%BA%A6accuracy&#34; &gt;精确度Accuracy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E6%9B%B2%E7%BA%BF%E4%B8%8B%E9%9D%A2%E7%A7%AF-auc&#34; &gt;曲线下面积 (AUC)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E4%BA%8C%E5%85%83%E5%88%86%E7%B1%BB&#34; &gt;二元分类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E6%A0%A1%E5%87%86&#34; &gt;校准&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E5%88%86%E7%B1%BB&#34; &gt;分类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E5%86%B3%E5%AE%9A%E7%B3%BB%E6%95%B0&#34; &gt;决定系数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B&#34; &gt;特征工程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#f-score&#34; &gt;F-score&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E8%B6%85%E5%8F%82%E6%95%B0&#34; &gt;超参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#label&#34; &gt;Label&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E5%AF%B9%E6%95%B0%E6%8D%9F%E5%A4%B1&#34; &gt;对数损失&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0&#34; &gt;损失函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E5%B9%B3%E5%9D%87%E7%BB%9D%E5%AF%B9%E8%AF%AF%E5%B7%AE-mae&#34; &gt;平均绝对误差 (MAE)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E5%A4%9A%E7%B1%BB%E5%88%86%E7%B1%BB&#34; &gt;多类分类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#n-%E5%85%83%E8%AF%AD%E6%B3%95&#34; &gt;N 元语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E6%A0%87%E5%87%86%E5%8C%96&#34; &gt;标准化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E7%AE%A1%E9%81%93&#34; &gt;管道&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#precision&#34; &gt;Precision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#recall&#34; &gt;Recall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E6%AD%A3%E5%88%99%E5%8C%96&#34; &gt;正则化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E5%9B%9E%E5%BD%92&#34; &gt;回归&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E7%9B%B8%E5%AF%B9%E7%BB%9D%E5%AF%B9%E8%AF%AF%E5%B7%AE&#34; &gt;相对绝对误差&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E7%9B%B8%E5%AF%B9%E5%B9%B3%E6%96%B9%E8%AF%AF%E5%B7%AE&#34; &gt;相对平方误差&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E5%9D%87%E6%96%B9%E8%AF%AF%E5%B7%AE%E6%A0%B9-rmse&#34; &gt;均方误差根 (RMSE)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;机器学习重要术语词汇表&#34;&gt;机器学习重要术语词汇表&lt;/h1&gt;
&lt;h2 id=&#34;精确度accuracy&#34;&gt;精确度Accuracy&lt;/h2&gt;
&lt;p&gt;在分类中，准确性是正确分类的项数目除以测试集内的项总数。 范围从 0（最不准确）到 1（最准确）。 准确性是模型性能的评估指标之一。 将其与Precision、Recall和F-score结合考虑。&lt;/p&gt;
&lt;h2 id=&#34;曲线下面积-auc&#34;&gt;曲线下面积 (AUC)&lt;/h2&gt;
&lt;p&gt;二元分类的一项评估指标，即曲线下面积值，它绘制真阳性率（y 轴）与误报率（x 轴）进行对照。 范围从 0.5（最差）到 1（最佳）。 也称为 ROC 曲线下面积。&lt;/p&gt;
&lt;h2 id=&#34;二元分类&#34;&gt;二元分类&lt;/h2&gt;
&lt;p&gt;一个分类任务，其中标签仅为两个类中的一个。&lt;/p&gt;
&lt;h2 id=&#34;校准&#34;&gt;校准&lt;/h2&gt;
&lt;p&gt;校准是将原始分数映射到类成员身份的过程，用于二元和多类分类。&lt;/p&gt;
&lt;h2 id=&#34;分类&#34;&gt;分类&lt;/h2&gt;
&lt;p&gt;当使用这些数据来预测某一类别，有监督学习任务被称为“分类”。 二分类指的是仅预测两个类别（例如，将图像划分为“猫”或“狗”图片）。 多分类指的是预测多个类别（例如，当将图像划分为特定品种狗的图片）。&lt;/p&gt;
&lt;h2 id=&#34;决定系数&#34;&gt;决定系数&lt;/h2&gt;
&lt;p&gt;回归中的一项评估指标，表明数据与模型的匹配程度。 范围从 0 到 1。 值 0 表示数据是随机的，否则就无法与模型相匹配。 1 表示模型与数据完全匹配。 这通常称 r 平方值。&lt;/p&gt;
&lt;h2 id=&#34;特征工程&#34;&gt;特征工程&lt;/h2&gt;
&lt;p&gt;特征工程是涉及定义一组特征和开发软件以从可用现象数据中生成特征向量（即特征提取）的过程。&lt;/p&gt;
&lt;h2 id=&#34;f-score&#34;&gt;F-score&lt;/h2&gt;
&lt;p&gt;分类的一项评估指标，用于平衡Precision和Recall&lt;/p&gt;
&lt;h2 id=&#34;超参数&#34;&gt;超参数&lt;/h2&gt;
&lt;p&gt;机器学习算法的参数。 示例包括在决策林中学习的树的数量，或者梯度下降算法中的步长。 在对模型进行定型之前，先设置超参数 的值，并控制查找预测函数参数的过程，例如，决策树中的比较点或线性回归模型中的权重。&lt;/p&gt;
&lt;h2 id=&#34;label&#34;&gt;Label&lt;/h2&gt;
&lt;p&gt;使用机器学习模型进行预测的元素。 例如，狗的品种或将来的股票价格。&lt;/p&gt;
&lt;h2 id=&#34;对数损失&#34;&gt;对数损失&lt;/h2&gt;
&lt;p&gt;在分类中，描述分类器准确性的评估指标。 对数损失越小，分类器越准确。&lt;/p&gt;
&lt;h2 id=&#34;损失函数&#34;&gt;损失函数&lt;/h2&gt;
&lt;p&gt;损失函数是指训练标签值与模型所做预测之间的差异。 通过最小化损失函数来估算模型参数。&lt;/p&gt;
&lt;p&gt;可以为不同的训练程序配置不同的损失函数。&lt;/p&gt;
&lt;h2 id=&#34;平均绝对误差-mae&#34;&gt;平均绝对误差 (MAE)&lt;/h2&gt;
&lt;p&gt;回归中的一项评估指标，即所有模型误差的平均值，其中模型误差是预测&lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/zh-cn/dotnet/machine-learning/resources/glossary?WT.mc_id=academic-15963-cxa#label&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;标签&lt;/a&gt;值和正确标签值之间的差距。&lt;/p&gt;
&lt;h2 id=&#34;多类分类&#34;&gt;多类分类&lt;/h2&gt;
&lt;p&gt;一种分类任务，其中标签为三个或三个以上类中的一个。&lt;/p&gt;
&lt;h2 id=&#34;n-元语法&#34;&gt;N 元语法&lt;/h2&gt;
&lt;p&gt;文本数据的特征提取方案：N 个单词的任何序列都将转变为特征值&lt;/p&gt;
&lt;h2 id=&#34;标准化&#34;&gt;标准化&lt;/h2&gt;
&lt;p&gt;标准化是将浮点数据缩放到 0 到 1 之间的值的过程。&lt;/p&gt;
&lt;h2 id=&#34;管道&#34;&gt;管道&lt;/h2&gt;
&lt;p&gt;要将模型与数据集相匹配所需的所有操作。 管道由数据导入、转换、特征化和学习步骤组成。 对管道进行定型后，它会转变为模型。&lt;/p&gt;
&lt;h2 id=&#34;precision&#34;&gt;Precision&lt;/h2&gt;
&lt;p&gt;在分类中，Precision是正确预测为属于该类的项目的数量，除以预测为属于该类的项目的总数。&lt;/p&gt;
&lt;h2 id=&#34;recall&#34;&gt;Recall&lt;/h2&gt;
&lt;p&gt;在分类中，Recall是正确预测为属于该类的项目的数量，除以实际属于该类的项目的总数。&lt;/p&gt;
&lt;h2 id=&#34;正则化&#34;&gt;正则化&lt;/h2&gt;
&lt;p&gt;正则化会对过于复杂的线性模型进行惩罚。 正则化有两种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L1正则化将无意义特征的权重归零。 进行这种正则化之后，所保存模型的大小可能会变小。&lt;/li&gt;
&lt;li&gt;L2正则化将无意义特征的权重范围最小化。 这是一种更通用的过程，并且对离群值不太敏感。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;回归&#34;&gt;回归&lt;/h2&gt;
&lt;p&gt;有监督学习任务，其中输出是一个实际值，例如，双精度值。 示例包括预测股票价格。&lt;/p&gt;
&lt;h2 id=&#34;相对绝对误差&#34;&gt;相对绝对误差&lt;/h2&gt;
&lt;p&gt;回归中的一项评估指标，即所有绝对误差总和除以正确标签值和所有正确标签值的平均值之间的差值总和。&lt;/p&gt;
&lt;h2 id=&#34;相对平方误差&#34;&gt;相对平方误差&lt;/h2&gt;
&lt;p&gt;回归中的一项评估指标，即所有绝对平方误差总和除以正确标签值和所有正确标签值的平均值之间的平方差值总和。&lt;/p&gt;
&lt;h2 id=&#34;均方误差根-rmse&#34;&gt;均方误差根 (RMSE)&lt;/h2&gt;
&lt;p&gt;误差平方平均值的平方根。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Java-Stream常见用法</title>
        <link>https://cuterwrite.top/p/java-stream/</link>
        <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/java-stream/</guid>
        <description>&lt;img src="https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/20210503/bridge-5621201_1920.6p53ez4buso0.jpg" alt="Featured image of post Java-Stream常见用法" /&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;  &lt;em&gt;generated with &lt;a class=&#34;link&#34; href=&#34;https://github.com/thlorenz/doctoc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DocToc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#stream%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95&#34; &gt;Stream常见用法&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-stream%E6%A6%82%E8%BF%B0&#34; &gt;1 Stream概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-stream%E5%88%9B%E5%BB%BA&#34; &gt;2 Stream创建&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#21-collectionstream&#34; &gt;2.1 Collection.stream()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#22-arraysstreamt-array&#34; &gt;2.2 Arrays.stream(T[] array)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#23-streamof--iterate--generate&#34; &gt;2.3 Stream.of / iterate / generate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-stream%E4%BD%BF%E7%94%A8&#34; &gt;3 Stream使用&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#31-optional&#34; &gt;3.1 Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#32-%E9%81%8D%E5%8E%86-foreachfindmatch&#34; &gt;3.2 遍历 forEach/find/match&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#33-%E7%AD%9B%E9%80%89-filter&#34; &gt;3.3 筛选 filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#34-%E8%81%9A%E5%90%88-maxmincount&#34; &gt;3.4 聚合 max/min/count&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#35-%E6%98%A0%E5%B0%84-mapflatmap&#34; &gt;3.5 映射 map/flatMap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#36-%E8%A7%84%E7%BA%A6-reduce&#34; &gt;3.6 规约 reduce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#37-%E6%94%B6%E9%9B%86-collect&#34; &gt;3.7 收集 collect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#38-%E5%88%86%E7%BB%84-groupingbypartitioningby&#34; &gt;3.8 分组 groupingBy/partitioningBy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#39-%E8%BF%9E%E6%8E%A5-joining&#34; &gt;3.9 连接 joining&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#310-%E6%8E%92%E5%BA%8F-sorted&#34; &gt;3.10 排序 sorted&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;hr&gt;
&lt;h1 id=&#34;stream常见用法&#34;&gt;Stream常见用法&lt;/h1&gt;
&lt;h2 id=&#34;1-stream概述&#34;&gt;1 Stream概述&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Stream&lt;/code&gt;将要处理的元素集合看作一种流，在流的过程中，借助&lt;code&gt;Stream API&lt;/code&gt;对流中的元素进行操作，比如：筛选、排序、聚合等。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Stream&lt;/code&gt;可以由数组或集合创建，对流的操作分为两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;中间操作，每次返回一个新的流，可以有多个。&lt;/li&gt;
&lt;li&gt;终端操作，每个流只能进行一次终端操作，终端操作结束后流无法再次使用。终端操作会产生一个新的集合或值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;另外，&lt;code&gt;Stream&lt;/code&gt;有几个特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;stream不存储数据，而是按照特定的规则对数据进行计算，一般会输出结果。&lt;/li&gt;
&lt;li&gt;stream不会改变数据源，通常情况下会产生一个新的集合或一个值。&lt;/li&gt;
&lt;li&gt;stream具有延迟执行特性，只有调用终端操作时，中间操作才会执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-stream创建&#34;&gt;2 Stream创建&lt;/h2&gt;
&lt;h3 id=&#34;21-collectionstream&#34;&gt;2.1 Collection.stream()&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stream&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//并行流
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parallelStream&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;parallelStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;22-arraysstreamt-array&#34;&gt;2.2 Arrays.stream(T[] array)&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;IntStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stream&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;23-streamof--iterate--generate&#34;&gt;2.3 Stream.of / iterate / generate&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Stream&amp;lt;Integer&amp;gt; stream = Stream.of(1, 2, 3, 4, 5, 6);
//创建从0开始，间距为3的stream（个数为4）
Stream&amp;lt;Integer&amp;gt; stream2 = Stream.iterate(0, x -&amp;gt; x + 3).limit(4);
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3-stream使用&#34;&gt;3 Stream使用&lt;/h2&gt;
&lt;h3 id=&#34;31-optional&#34;&gt;3.1 Optional&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Optional&lt;/code&gt;类是一个可以为&lt;code&gt;null&lt;/code&gt;的容器对象。如果值存在则&lt;code&gt;isPresent()&lt;/code&gt;方法会返回&lt;code&gt;true&lt;/code&gt;，调用&lt;code&gt;get()&lt;/code&gt;方法会返回该对象。&lt;/p&gt;
&lt;h3 id=&#34;32-遍历-foreachfindmatch&#34;&gt;3.2 遍历 forEach/find/match&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;遍历输出符合条件的元素&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;遍历对元素执行某个方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;methodName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;匹配一个&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;findFirst&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;是否包含特定条件的元素&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;anyMatch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有元素满足条件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;allMatch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;33-筛选-filter&#34;&gt;3.3 筛选 filter&lt;/h3&gt;
&lt;p&gt;同上，直接在stream对象上使用就行&lt;/p&gt;
&lt;h3 id=&#34;34-聚合-maxmincount&#34;&gt;3.4 聚合 max/min/count&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;获取int数组中中的最大值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAsInt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取Integer列表中的最大值，需要传入一个Comparator对象&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compareTo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取String列里中长度最长的元素&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Comparator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;comparing&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取员工列表工资最高的员工&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Comparator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;comparing&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getSalary&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算Integer集合中大于6的元素的个数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;35-映射-mapflatmap&#34;&gt;3.5 映射 map/flatMap&lt;/h3&gt;
&lt;p&gt;映射，可以将一个流的元素按照一定的映射规则映射到另一个流中。分为&lt;code&gt;map&lt;/code&gt;和&lt;code&gt;flatMap&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt;：接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flatMap&lt;/code&gt;：接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将字符串数组的元素全部改成大写&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toUpperCase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;collect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Collectors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将员工薪资全部增加1000&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setSalary&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getSalary&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;collect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Collectors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;36-规约-reduce&#34;&gt;3.6 规约 reduce&lt;/h3&gt;
&lt;p&gt;将一个流缩减为一个值，能实现集合求和，求乘积和求最值操作等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;求Integer列表的元素之和，乘积和最大值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;reduce&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;reduce&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;reduce&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;37-收集-collect&#34;&gt;3.7 收集 collect&lt;/h3&gt;
&lt;p&gt;就是把一个流收集起来，最终可以是收集成一个值也可以收集成一个新的集合。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;collect&lt;/code&gt;主要依赖&lt;code&gt;java.util.stream.Collectors&lt;/code&gt;类内置的静态方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;归集：toList()，toSet()，toMap()&lt;/li&gt;
&lt;li&gt;统计：counting、averagingInt、averagingLong、averagingDouble、maxBy、minBy、summingInt、summingLong、summingDouble、sumarizingInt、sumarizingLong、sumarizingDouble&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;38-分组-groupingbypartitioningby&#34;&gt;3.8 分组 groupingBy/partitioningBy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将员工按薪资是否高于8000分组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;collect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Collectors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;groupingBy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getSalary&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;8000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将员工按性别分组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;collect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Collectors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;groupingBy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getSex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;39-连接-joining&#34;&gt;3.9 连接 joining&lt;/h3&gt;
&lt;p&gt;将stream中的元素用特定的连接符（没有的话，则直接连接）连接成一个字符串。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;collect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Collectors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;joining&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;310-排序-sorted&#34;&gt;3.10 排序 sorted&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;按工资升序排序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Compartor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;comparing&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getSalary&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按工资倒序排序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Compartor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;comparing&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getSalary&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;reversed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多列排序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Compartor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;comparing&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getSalary&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;thenComparing&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>JavaSE知识点笔记</title>
        <link>https://cuterwrite.top/p/java-se/</link>
        <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/java-se/</guid>
        <description>&lt;img src="https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/20210503/river-6021951_1920.4hwe8w8ugb20.jpg" alt="Featured image of post JavaSE知识点笔记" /&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;  &lt;em&gt;generated with &lt;a class=&#34;link&#34; href=&#34;https://github.com/thlorenz/doctoc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DocToc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#javase%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%94%E8%AE%B0&#34; &gt;JavaSE知识点笔记&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B&#34; &gt;1 数据类型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#11-%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B&#34; &gt;1.1 基本类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#12-%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B&#34; &gt;1.2 包装类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#13-%E7%BC%93%E5%AD%98%E6%B1%A0&#34; &gt;1.3 缓存池&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-string&#34; &gt;2 String&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#21-%E6%A6%82%E8%BF%B0&#34; &gt;2.1 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#22-%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84%E4%BC%98%E7%82%B9&#34; &gt;2.2 不可变的优点&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#221-%E5%8F%AF%E4%BB%A5%E7%BC%93%E5%AD%98hash%E5%80%BC&#34; &gt;2.2.1 可以缓存hash值&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#222-string-pool&#34; &gt;2.2.2 String Pool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#223-%E5%AE%89%E5%85%A8%E6%80%A7&#34; &gt;2.2.3 安全性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#224-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8&#34; &gt;2.2.4 线程安全&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#23-stringstringbuilder%E5%92%8Cstringbuffer&#34; &gt;2.3 String、StringBuilder和StringBuffer&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#231-%E5%8F%AF%E5%8F%98%E6%80%A7&#34; &gt;2.3.1 可变性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#232-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8&#34; &gt;2.3.2 线程安全&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#24-string-pool&#34; &gt;2.4 String Pool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#25-new-stringabc&#34; &gt;2.5 new String（“abc”）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-%E8%BF%90%E7%AE%97&#34; &gt;3 运算&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#31-%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92&#34; &gt;3.1 参数传递&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#32-float%E4%B8%8Edouble&#34; &gt;3.2 float与double&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#33-%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2&#34; &gt;3.3 隐式类型转换&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-%E5%85%B3%E9%94%AE%E5%AD%97&#34; &gt;4 关键字&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#41-final&#34; &gt;4.1 final&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#42--static&#34; &gt;4.2  static&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5-object%E9%80%9A%E7%94%A8%E6%96%B9%E6%B3%95&#34; &gt;5 Object通用方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6-%E7%BB%A7%E6%89%BF&#34; &gt;6 继承&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#61-%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90&#34; &gt;6.1 访问权限&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#62-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3&#34; &gt;6.2 抽象类与接口&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#63-super&#34; &gt;6.3 super&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#64-%E9%87%8D%E5%86%99%E4%B8%8E%E9%87%8D%E8%BD%BD&#34; &gt;6.4 重写与重载&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#7-%E5%8F%8D%E5%B0%84&#34; &gt;7 反射&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#8-%E5%BC%82%E5%B8%B8&#34; &gt;8 异常&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#9-%E6%B3%9B%E5%9E%8B%E6%B3%A8%E8%A7%A3%E6%96%B0%E7%89%B9%E6%80%A7&#34; &gt;9 泛型、注解、新特性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;javase知识点笔记&#34;&gt;JavaSE知识点笔记&lt;/h1&gt;
&lt;h2 id=&#34;1-数据类型&#34;&gt;1 数据类型&lt;/h2&gt;
&lt;h3 id=&#34;11-基本类型&#34;&gt;1.1 基本类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;byte/8&lt;/li&gt;
&lt;li&gt;char/16&lt;/li&gt;
&lt;li&gt;short/16&lt;/li&gt;
&lt;li&gt;int/32&lt;/li&gt;
&lt;li&gt;float/32&lt;/li&gt;
&lt;li&gt;long/64&lt;/li&gt;
&lt;li&gt;double/64&lt;/li&gt;
&lt;li&gt;boolean/~&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12-包装类型&#34;&gt;1.2 包装类型&lt;/h3&gt;
&lt;p&gt;基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;// 装箱 调用了 Integer.valueOf(2)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;// 拆箱 调用了 X.intValue()
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;13-缓存池&#34;&gt;1.3 缓存池&lt;/h3&gt;
&lt;p&gt;new Integer(123) 与 Integer.valueOf(123) 的区别在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;new Integer(123) 每次都会新建一个对象；&lt;/li&gt;
&lt;li&gt;Integer.valueOf(123) 会使用缓存池中的对象，多次调用会取得同一个对象的引用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;valueOf() 方法的实现比较简单，就是先判断值是否在缓存池中，如果在的话就直接返回缓存池的内容。&lt;/p&gt;
&lt;p&gt;在 Java 8 中，Integer 缓存池的大小默认为 -128~127。&lt;/p&gt;
&lt;p&gt;编译器会在自动装箱过程调用 valueOf() 方法，因此多个值相同且值在缓存池范围内的 Integer 实例使用自动装箱来创建，那么就会引用相同的对象。&lt;/p&gt;
&lt;p&gt;基本类型对应的缓冲池如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boolean values true and false&lt;/li&gt;
&lt;li&gt;all byte values&lt;/li&gt;
&lt;li&gt;short values between -128 and 127&lt;/li&gt;
&lt;li&gt;int values between -128 and 127&lt;/li&gt;
&lt;li&gt;char in the range \u0000 to \u007F&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-string&#34;&gt;2 String&lt;/h2&gt;
&lt;h3 id=&#34;21-概述&#34;&gt;2.1 概述&lt;/h3&gt;
&lt;p&gt;String 被声明为 final，因此它不可被继承。(Integer 等包装类也不能被继承）&lt;/p&gt;
&lt;p&gt;在 Java 8 中，String 内部使用 char 数组存储数据。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Java 9 之后，String 类的实现改用 byte 数组存储字符串，同时使用 &lt;code&gt;coder&lt;/code&gt; 来标识使用了哪种编码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;coder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;value 数组被声明为 final，这意味着 value 数组初始化之后就不能再引用其它数组。并且 String 内部没有改变 value 数组的方法，因此可以保证 String 不可变。&lt;/p&gt;
&lt;h3 id=&#34;22-不可变的优点&#34;&gt;2.2 不可变的优点&lt;/h3&gt;
&lt;h4 id=&#34;221-可以缓存hash值&#34;&gt;2.2.1 可以缓存hash值&lt;/h4&gt;
&lt;p&gt;因为 String 的 hash 值经常被使用，例如 String 用做 HashMap 的 key。不可变的特性可以使得 hash 值也不可变，因此只需要进行一次计算。&lt;/p&gt;
&lt;h4 id=&#34;222-string-pool&#34;&gt;2.2.2 String Pool&lt;/h4&gt;
&lt;p&gt;如果一个 String 对象已经被创建过了，那么就会从 String Pool 中取得引用。只有 String 是不可变的，才可能使用 String Pool。&lt;/p&gt;
&lt;h4 id=&#34;223-安全性&#34;&gt;2.2.3 安全性&lt;/h4&gt;
&lt;p&gt;String 经常作为参数，String 不可变性可以保证参数不可变。例如在作为网络连接参数的情况下如果 String 是可变的，那么在网络连接过程中，String 被改变，改变 String 的那一方以为现在连接的是其它主机，而实际情况却不一定是。&lt;/p&gt;
&lt;h4 id=&#34;224-线程安全&#34;&gt;2.2.4 线程安全&lt;/h4&gt;
&lt;p&gt;String 不可变性天生具备线程安全，可以在多个线程中安全地使用。&lt;/p&gt;
&lt;h3 id=&#34;23-stringstringbuilder和stringbuffer&#34;&gt;2.3 String、StringBuilder和StringBuffer&lt;/h3&gt;
&lt;h4 id=&#34;231-可变性&#34;&gt;2.3.1 可变性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;String不可变&lt;/li&gt;
&lt;li&gt;StringBuilder和StringBuffer可变&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;232-线程安全&#34;&gt;2.3.2 线程安全&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;String线程安全&lt;/li&gt;
&lt;li&gt;StringBuilder线程不安全&lt;/li&gt;
&lt;li&gt;StringBuffer线程安全：synchronized机制&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;24-string-pool&#34;&gt;2.4 String Pool&lt;/h3&gt;
&lt;p&gt;字符串常量池（String Pool）保存着所有字符串字面量（literal strings），这些字面量在编译时期就确定。不仅如此，还可以使用 String 的 intern() 方法在运行过程将字符串添加到 String Pool 中。&lt;/p&gt;
&lt;p&gt;当一个字符串调用 intern() 方法时，如果 String Pool 中已经存在一个字符串和该字符串值相等（使用 equals() 方法进行确定），那么就会返回 String Pool 中字符串的引用；否则，就会在 String Pool 中添加一个新的字符串，并返回这个新字符串的引用。&lt;/p&gt;
&lt;p&gt;在 Java 7 之前，String Pool 被放在运行时常量池中，它属于永久代。而在 Java 7，String Pool 被移到堆中。这是因为永久代的空间有限，在大量使用字符串的场景下会导致 OutOfMemoryError 错误。&lt;/p&gt;
&lt;h3 id=&#34;25-new-stringabc&#34;&gt;2.5 new String（“abc”）&lt;/h3&gt;
&lt;p&gt;使用这种方式一共会创建两个字符串对象（前提是 String Pool 中还没有 &amp;ldquo;abc&amp;rdquo; 字符串对象）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;abc&amp;rdquo; 属于字符串字面量，因此编译时期会在 String Pool 中创建一个字符串对象，指向这个 &amp;ldquo;abc&amp;rdquo; 字符串字面量；&lt;/li&gt;
&lt;li&gt;而使用 new 的方式会在堆中创建一个字符串对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-运算&#34;&gt;3 运算&lt;/h2&gt;
&lt;h3 id=&#34;31-参数传递&#34;&gt;3.1 参数传递&lt;/h3&gt;
&lt;p&gt;Java 的参数是以值传递的形式传入方法中，而不是引用传递。&lt;/p&gt;
&lt;h3 id=&#34;32-float与double&#34;&gt;3.2 float与double&lt;/h3&gt;
&lt;p&gt;Java 不能隐式执行向下转型，因为这会使得精度降低。&lt;/p&gt;
&lt;h3 id=&#34;33-隐式类型转换&#34;&gt;3.3 隐式类型转换&lt;/h3&gt;
&lt;p&gt;使用+=和++运算符会执行隐式类型转换，相当于强制类型转换。&lt;/p&gt;
&lt;p&gt;（比如：int转short）&lt;/p&gt;
&lt;h2 id=&#34;4-关键字&#34;&gt;4 关键字&lt;/h2&gt;
&lt;h3 id=&#34;41-final&#34;&gt;4.1 final&lt;/h3&gt;
&lt;p&gt;（1）数据&lt;/p&gt;
&lt;p&gt;声明数据为常量，可以是编译时常量，也可以是在运行时被初始化后不能被改变的常量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于基本类型，final 使数值不变；&lt;/li&gt;
&lt;li&gt;对于引用类型，final 使引用不变，也就不能引用其它对象，但是被引用的对象本身是可以修改的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（2）方法&lt;/p&gt;
&lt;p&gt;声明方法不能被子类重写。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;private 方法隐式地被指定为 final&lt;/strong&gt;，如果在子类中定义的方法和基类中的一个 private 方法签名相同，此时子类的方法&lt;strong&gt;不是重写基类方法，而是在子类中定义了一个新的方法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;（3）类&lt;/p&gt;
&lt;p&gt;声明类不允许被继承。&lt;/p&gt;
&lt;h3 id=&#34;42--static&#34;&gt;4.2  static&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. 静态变量&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态变量：又称为类变量，也就是说这个变量属于类的，类所有的实例都共享静态变量，可以直接通过类名来访问它。静态变量在内存中只存在一份。&lt;/li&gt;
&lt;li&gt;实例变量：每创建一个实例就会产生一个实例变量，它与该实例同生共死。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. 静态方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;静态方法在类加载的时候就存在了，它不依赖于任何实例。所以静态方法必须有实现，也就是说它不能是抽象方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 静态语句块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;静态语句块在类初始化时运行一次。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 静态内部类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非静态内部类依赖于外部类的实例，也就是说需要先创建外部类实例，才能用这个实例去创建非静态内部类。而静态内部类不需要。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 静态导包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在使用静态变量和方法时不用再指明 ClassName，从而简化代码，但可读性大大降低。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. 初始化顺序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序。&lt;/p&gt;
&lt;h2 id=&#34;5-object通用方法&#34;&gt;5 Object通用方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;hashcode&lt;/li&gt;
&lt;li&gt;equals&lt;/li&gt;
&lt;li&gt;clone&lt;/li&gt;
&lt;li&gt;toString&lt;/li&gt;
&lt;li&gt;getClass&lt;/li&gt;
&lt;li&gt;finalize&lt;/li&gt;
&lt;li&gt;notify&lt;/li&gt;
&lt;li&gt;notifyAll&lt;/li&gt;
&lt;li&gt;wait&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-继承&#34;&gt;6 继承&lt;/h2&gt;
&lt;h3 id=&#34;61-访问权限&#34;&gt;6.1 访问权限&lt;/h3&gt;
&lt;p&gt;private、protected、public，以及default（如果不加访问修饰符，表示包级可见。）&lt;/p&gt;
&lt;p&gt;可以对类或类中的成员（字段和方法）加上访问修饰符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类可见表示其它类可以用这个类创建实例对象。&lt;/li&gt;
&lt;li&gt;成员可见表示其它类可以用这个类的实例对象访问到该成员；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;protected 用于修饰成员，表示在继承体系中成员对于子类可见，但是这个访问修饰符对于类没有意义。&lt;/p&gt;
&lt;h3 id=&#34;62-抽象类与接口&#34;&gt;6.2 抽象类与接口&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. 抽象类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;抽象类和抽象方法都使用 abstract 关键字进行声明。如果一个类中包含抽象方法，那么这个类必须声明为抽象类。&lt;/p&gt;
&lt;p&gt;抽象类和普通类最大的区别是，抽象类不能被实例化，只能被继承。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 接口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接口是抽象类的延伸，在 Java 8 之前，它可以看成是一个完全抽象的类，也就是说它不能有任何的方法实现。&lt;/p&gt;
&lt;p&gt;从 Java 8 开始，接口也可以拥有默认的方法实现，这是因为不支持默认方法的接口的维护成本太高了。在 Java 8 之前，如果一个接口想要添加新的方法，那么要修改所有实现了该接口的类，让它们都实现新增的方法。&lt;/p&gt;
&lt;p&gt;接口的成员（字段 + 方法）默认都是 public 的，并且不允许定义为 private 或者 protected。从 Java 9 开始，允许将方法定义为 private，这样就能定义某些复用的代码又不会把方法暴露出去。&lt;/p&gt;
&lt;p&gt;接口的字段默认都是 static 和 final 的。&lt;/p&gt;
&lt;h3 id=&#34;63-super&#34;&gt;6.3 super&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;访问父类的构造函数：可以使用 super() 函数访问父类的构造函数，从而委托父类完成一些初始化的工作。应该注意到，子类一定会调用父类的构造函数来完成初始化工作，一般是调用父类的默认构造函数，如果子类需要调用父类其它构造函数，那么就可以使用 super() 函数。&lt;/li&gt;
&lt;li&gt;访问父类的成员：如果子类重写了父类的某个方法，可以通过使用 super 关键字来引用父类的方法实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;64-重写与重载&#34;&gt;6.4 重写与重载&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. 重写（Override）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;存在于继承体系中，指子类实现了一个与父类在方法声明上完全相同的一个方法。&lt;/p&gt;
&lt;p&gt;为了满足里式替换原则，重写有以下三个限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子类方法的访问权限必须大于等于父类方法；&lt;/li&gt;
&lt;li&gt;子类方法的返回类型必须是父类方法返回类型或为其子类型。&lt;/li&gt;
&lt;li&gt;子类方法抛出的异常类型必须是父类抛出异常类型或为其子类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 @Override 注解，可以让编译器帮忙检查是否满足上面的三个限制条件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 重载（Overload）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;存在于同一个类中，指一个方法与已经存在的方法名称上相同，但是参数类型、个数、顺序至少有一个不同。&lt;/p&gt;
&lt;p&gt;应该注意的是，返回值不同，其它都相同不算是重载。&lt;/p&gt;
&lt;h2 id=&#34;7-反射&#34;&gt;7 反射&lt;/h2&gt;
&lt;p&gt;每个类都有一个   &lt;strong&gt;Class&lt;/strong&gt;   对象，包含了与类有关的信息。当编译一个新类时，会产生一个同名的 .class 文件，该文件内容保存着 Class 对象。&lt;/p&gt;
&lt;p&gt;类加载相当于 Class 对象的加载，类在第一次使用时才动态加载到 JVM 中。也可以使用 &lt;code&gt;Class.forName(&amp;quot;com.mysql.jdbc.Driver&amp;quot;)&lt;/code&gt; 这种方式来控制类的加载，该方法会返回一个 Class 对象。&lt;/p&gt;
&lt;p&gt;反射可以提供运行时的类信息，并且这个类可以在运行时才加载进来，甚至在编译时期该类的 .class 不存在也可以加载进来。&lt;/p&gt;
&lt;p&gt;Class 和 java.lang.reflect 一起对反射提供了支持，java.lang.reflect 类库主要包含了以下三个类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Field&lt;/strong&gt;  ：可以使用 get() 和 set() 方法读取和修改 Field 对象关联的字段；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Method&lt;/strong&gt;  ：可以使用 invoke() 方法调用与 Method 对象关联的方法；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Constructor&lt;/strong&gt;  ：可以用 Constructor 的 newInstance() 创建新的对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;反射的优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可扩展性&lt;/strong&gt;   ：应用程序可以利用全限定名创建可扩展对象的实例，来使用来自外部的用户自定义类。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类浏览器和可视化开发环境&lt;/strong&gt;   ：一个类浏览器需要可以枚举类的成员。可视化开发环境（如 IDE）可以从利用反射中可用的类型信息中受益，以帮助程序员编写正确的代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调试器和测试工具&lt;/strong&gt;   ： 调试器需要能够检查一个类里的私有成员。测试工具可以利用反射来自动地调用类里定义的可被发现的 API 定义，以确保一组测试中有较高的代码覆盖率。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;反射的缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;尽管反射非常强大，但也不能滥用。如果一个功能可以不用反射完成，那么最好就不用。在我们使用反射技术时，下面几条内容应该牢记于心。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能开销&lt;/strong&gt;   ：反射涉及了动态类型的解析，所以 JVM 无法对这些代码进行优化。因此，反射操作的效率要比那些非反射操作低得多。我们应该避免在经常被执行的代码或对性能要求很高的程序中使用反射。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全限制&lt;/strong&gt;   ：使用反射技术要求程序必须在一个没有安全限制的环境中运行。如果一个程序必须在有安全限制的环境中运行，如 Applet，那么这就是个问题了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内部暴露&lt;/strong&gt;   ：由于反射允许代码执行一些在正常情况下不被允许的操作（比如访问私有的属性和方法），所以使用反射可能会导致意料之外的副作用，这可能导致代码功能失调并破坏可移植性。反射代码破坏了抽象性，因此当平台发生改变的时候，代码的行为就有可能也随着变化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8-异常&#34;&gt;8 异常&lt;/h2&gt;
&lt;p&gt;Throwable 可以用来表示任何可以作为异常抛出的类，分为两种：  &lt;strong&gt;Error&lt;/strong&gt;   和 &lt;strong&gt;Exception&lt;/strong&gt;。其中 Error 用来表示 JVM 无法处理的错误，Exception 分为两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;受检异常&lt;/strong&gt;  ：需要用 try&amp;hellip;catch&amp;hellip; 语句捕获并进行处理，并且可以从异常中恢复；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非受检异常&lt;/strong&gt;  ：是程序运行时错误，例如除 0 会引发 Arithmetic Exception，此时程序崩溃并且无法恢复。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;9-泛型注解新特性&#34;&gt;9 泛型、注解、新特性&lt;/h2&gt;
&lt;p&gt;略。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文转载自：&lt;a class=&#34;link&#34; href=&#34;https://github.com/CyC2018/CS-Notes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/CyC2018/CS-Notes&lt;/a&gt;，用于个人复习。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Java容器知识点笔记</title>
        <link>https://cuterwrite.top/p/java-collection/</link>
        <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/java-collection/</guid>
        <description>&lt;img src="https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/20210503/antarctica-1987579_1920.4sf6q29twew0.jpg" alt="Featured image of post Java容器知识点笔记" /&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;  &lt;em&gt;generated with &lt;a class=&#34;link&#34; href=&#34;https://github.com/thlorenz/doctoc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DocToc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#java%E5%AE%B9%E5%99%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%94%E8%AE%B0&#34; &gt;Java容器知识点笔记&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-%E6%A6%82%E8%BF%B0&#34; &gt;1 概述&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#11-collection&#34; &gt;1.1 Collection&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#111-set&#34; &gt;1.1.1 Set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#112-list&#34; &gt;1.1.2 List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#113-queue&#34; &gt;1.1.3 Queue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90&#34; &gt;2 源码分析&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#21-arraylist&#34; &gt;2.1 ArrayList&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#211-%E6%A6%82%E8%BF%B0&#34; &gt;2.1.1 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#212-%E6%89%A9%E5%AE%B9&#34; &gt;2.1.2 扩容&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#213-%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0&#34; &gt;2.1.3 删除元素&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#214-%E5%BA%8F%E5%88%97%E5%8C%96&#34; &gt;2.1.4 序列化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#215-fail-fast&#34; &gt;2.1.5 Fail-fast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#22-vector&#34; &gt;2.2 Vector&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#221-%E5%90%8C%E6%AD%A5&#34; &gt;2.2.1 同步&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#222-%E6%89%A9%E5%AE%B9&#34; &gt;2.2.2 扩容&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#223-%E4%B8%8Earraylist%E7%9A%84%E6%AF%94%E8%BE%83&#34; &gt;2.2.3 与ArrayList的比较&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#224-%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88&#34; &gt;2.2.4 替代方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#23-copyonwritearraylist&#34; &gt;2.3 CopyOnWriteArrayList&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#231-%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB&#34; &gt;2.3.1 读写分离&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#232-%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF&#34; &gt;2.3.2 适用场景&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#24-linkedlist&#34; &gt;2.4 LinkedList&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#241-%E6%A6%82%E8%BF%B0&#34; &gt;2.4.1 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#242-%E4%B8%8Earraylist%E7%9A%84%E6%AF%94%E8%BE%83&#34; &gt;2.4.2 与ArrayList的比较&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#25-hashmap&#34; &gt;2.5 HashMap&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#251-%E6%A6%82%E8%BF%B0&#34; &gt;2.5.1 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#252-%E6%8B%89%E9%93%BE%E6%B3%95&#34; &gt;2.5.2 拉链法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#253-%E7%A1%AE%E8%AE%A4%E6%A1%B6%E4%B8%8B%E6%A0%87%E6%96%B9%E6%B3%95&#34; &gt;2.5.3 确认桶下标方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#254-%E6%89%A9%E5%AE%B9%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86&#34; &gt;2.5.4 扩容基本原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#255-%E6%89%A9%E5%AE%B9%E9%87%8D%E6%96%B0%E8%AE%A1%E7%AE%97%E6%A1%B6%E4%B8%8B%E6%A0%87&#34; &gt;2.5.5 扩容重新计算桶下标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#256-%E4%B8%8Ehashtable%E5%AF%B9%E6%AF%94&#34; &gt;2.5.6 与HashTable对比&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#26-concurrenthashmap&#34; &gt;2.6 ConcurrentHashMap&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#261-%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84&#34; &gt;2.6.1 存储结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#262-size%E6%93%8D%E4%BD%9C&#34; &gt;2.6.2 size操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#263-jdk8%E7%9A%84%E6%94%B9%E5%8A%A8&#34; &gt;2.6.3 jdk8的改动&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#27-linkedhashmap&#34; &gt;2.7 LinkedHashMap&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#271-%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84&#34; &gt;2.7.1 存储结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#272-afternodeaccess&#34; &gt;2.7.2 afterNodeAccess()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#273-afternodeinsertion&#34; &gt;2.7.3 afterNodeInsertion()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;java容器知识点笔记&#34;&gt;Java容器知识点笔记&lt;/h1&gt;
&lt;h2 id=&#34;1-概述&#34;&gt;1 概述&lt;/h2&gt;
&lt;p&gt;容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对（两个对象）的映射表。&lt;/p&gt;
&lt;h3 id=&#34;11-collection&#34;&gt;1.1 Collection&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208220948084.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h4 id=&#34;111-set&#34;&gt;1.1.1 Set&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TreeSet：基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HashSet：基于哈希表实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LinkedHashSet：具有 HashSet 的查找效率，并且内部使用双向链表维护元素的插入顺序。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;112-list&#34;&gt;1.1.2 List&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ArrayList：基于动态数组实现，支持随机访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vector：和 ArrayList 类似，但它是线程安全的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LinkedList：基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双向队列。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;113-queue&#34;&gt;1.1.3 Queue&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;LinkedList：可以用它来实现双向队列。&lt;/li&gt;
&lt;li&gt;PriorityQueue：基于堆结构实现，可以用它来实现优先队列。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-源码分析&#34;&gt;2 源码分析&lt;/h2&gt;
&lt;h3 id=&#34;21-arraylist&#34;&gt;2.1 ArrayList&lt;/h3&gt;
&lt;h4 id=&#34;211-概述&#34;&gt;2.1.1 概述&lt;/h4&gt;
&lt;p&gt;因为 ArrayList 是基于数组实现的，所以支持快速随机访问。RandomAccess 接口标识着该类支持快速随机访问，默认容量为10&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;transient&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elementData&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEFAULT_CAPACITY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;212-扩容&#34;&gt;2.1.2 扩容&lt;/h4&gt;
&lt;p&gt;添加元素时使用 ensureCapacityInternal() 方法来保证容量足够，如果不够时，需要使用 grow() 方法进行扩容，新容量的大小为 &lt;code&gt;oldCapacity + (oldCapacity &amp;gt;&amp;gt; 1)&lt;/code&gt;，即 oldCapacity+oldCapacity/2。其中 oldCapacity &amp;raquo; 1 需要取整，所以新容量大约是旧容量的 1.5 倍左右。（oldCapacity 为偶数就是 1.5 倍，为奇数就是 1.5 倍-0.5）&lt;/p&gt;
&lt;p&gt;扩容操作需要调用 &lt;code&gt;Arrays.copyOf()&lt;/code&gt; 把原数组整个复制到新数组中，这个操作代价很高，因此最好在创建 ArrayList 对象时就指定大概的容量大小，减少扩容操作的次数。&lt;/p&gt;
&lt;h4 id=&#34;213-删除元素&#34;&gt;2.1.3 删除元素&lt;/h4&gt;
&lt;p&gt;需要调用 System.arraycopy() 将 index+1 后面的元素都复制到 index 位置上，该操作的时间复杂度为 O(N)，可以看到 ArrayList 删除元素的代价是非常高的。&lt;/p&gt;
&lt;h4 id=&#34;214-序列化&#34;&gt;2.1.4 序列化&lt;/h4&gt;
&lt;p&gt;ArrayList 基于数组实现，并且具有动态扩容特性，因此保存元素的数组不一定都会被使用，那么就没必要全部进行序列化。&lt;/p&gt;
&lt;p&gt;保存元素的数组 elementData 使用 &lt;strong&gt;transient&lt;/strong&gt; 修饰，该关键字声明数组默认不会被序列化。&lt;/p&gt;
&lt;p&gt;ArrayList 实现了 writeObject() 和 readObject() 来控制只序列化数组中有元素填充那部分内容。&lt;/p&gt;
&lt;p&gt;序列化时需要使用 ObjectOutputStream 的 writeObject() 将对象转换为字节流并输出。而 writeObject() 方法在传入的对象存在 writeObject() 的时候会去反射调用该对象的 writeObject() 来实现序列化。反序列化使用的是 ObjectInputStream 的 readObject() 方法，原理类似。&lt;/p&gt;
&lt;h4 id=&#34;215-fail-fast&#34;&gt;2.1.5 Fail-fast&lt;/h4&gt;
&lt;p&gt;modCount 用来记录 ArrayList 结构发生变化的次数。结构发生变化是指添加或者删除至少一个元素的所有操作，或者是调整内部数组的大小，仅仅只是设置元素的值不算结构发生变化。&lt;/p&gt;
&lt;p&gt;在进行序列化或者迭代等操作时，&lt;strong&gt;需要比较操作前后 modCount 是否改变，如果改变了需要抛出 ConcurrentModificationException&lt;/strong&gt;。代码参考上节序列化中的 writeObject() 方法。&lt;/p&gt;
&lt;h3 id=&#34;22-vector&#34;&gt;2.2 Vector&lt;/h3&gt;
&lt;h4 id=&#34;221-同步&#34;&gt;2.2.1 同步&lt;/h4&gt;
&lt;p&gt;它的实现与 ArrayList 类似，但是使用了 synchronized 进行同步。&lt;/p&gt;
&lt;h4 id=&#34;222-扩容&#34;&gt;2.2.2 扩容&lt;/h4&gt;
&lt;p&gt;Vector 的构造函数可以传入 capacityIncrement 参数，它的作用是在扩容时使容量 capacity 增长 capacityIncrement。如果这个参数的值小于等于 0，扩容时每次都令 capacity 为原来的两倍。&lt;/p&gt;
&lt;p&gt;调用没有 capacityIncrement 的构造函数时，capacityIncrement 值被设置为 0，也就是说默认情况下 Vector 每次扩容时容量都会翻倍。&lt;/p&gt;
&lt;h4 id=&#34;223-与arraylist的比较&#34;&gt;2.2.3 与ArrayList的比较&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Vector 是同步的，因此开销就比 ArrayList 要大，访问速度更慢。最好使用 ArrayList 而不是 Vector，因为同步操作完全可以由程序员自己来控制；&lt;/li&gt;
&lt;li&gt;Vector 每次扩容请求其大小的 2 倍（也可以通过构造函数设置增长的容量），而 ArrayList 是 1.5 倍。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;224-替代方案&#34;&gt;2.2.4 替代方案&lt;/h4&gt;
&lt;p&gt;可以使用 &lt;code&gt;Collections.synchronizedList();&lt;/code&gt; 得到一个线程安全的 ArrayList。&lt;/p&gt;
&lt;p&gt;也可以使用 concurrent 并发包下的 CopyOnWriteArrayList 类。&lt;/p&gt;
&lt;h3 id=&#34;23-copyonwritearraylist&#34;&gt;2.3 CopyOnWriteArrayList&lt;/h3&gt;
&lt;h4 id=&#34;231-读写分离&#34;&gt;2.3.1 读写分离&lt;/h4&gt;
&lt;p&gt;写操作在一个复制的数组上进行，读操作还是在原始数组中进行，读写分离，互不影响。&lt;/p&gt;
&lt;p&gt;写操作需要加锁，防止并发写入时导致写入数据丢失。&lt;/p&gt;
&lt;p&gt;写操作结束之后需要把原始数组指向新的复制数组。&lt;/p&gt;
&lt;h4 id=&#34;232-适用场景&#34;&gt;2.3.2 适用场景&lt;/h4&gt;
&lt;p&gt;CopyOnWriteArrayList 在写操作的同时允许读操作，大大提高了读操作的性能，因此很适合读多写少的应用场景。&lt;/p&gt;
&lt;p&gt;但是 CopyOnWriteArrayList 有其缺陷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存占用：在写操作时需要复制一个新的数组，使得内存占用为原来的两倍左右；&lt;/li&gt;
&lt;li&gt;数据不一致：读操作不能读取实时性的数据，因为部分写操作的数据还未同步到读数组中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以 CopyOnWriteArrayList 不适合内存敏感以及对实时性要求很高的场景。&lt;/p&gt;
&lt;h3 id=&#34;24-linkedlist&#34;&gt;2.4 LinkedList&lt;/h3&gt;
&lt;h4 id=&#34;241-概述&#34;&gt;2.4.1 概述&lt;/h4&gt;
&lt;p&gt;基于双向链表实现，使用 Node 存储链表节点信息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;E&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prev&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每个链表存储了 first 和 last 指针：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;transient&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;transient&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208233940066.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h4 id=&#34;242-与arraylist的比较&#34;&gt;2.4.2 与ArrayList的比较&lt;/h4&gt;
&lt;p&gt;ArrayList 基于动态数组实现，LinkedList 基于双向链表实现。ArrayList 和 LinkedList 的区别可以归结为数组和链表的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组支持随机访问，但插入删除的代价很高，需要移动大量元素；&lt;/li&gt;
&lt;li&gt;链表不支持随机访问，但插入删除只需要改变指针。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;25-hashmap&#34;&gt;2.5 HashMap&lt;/h3&gt;
&lt;h4 id=&#34;251-概述&#34;&gt;2.5.1 概述&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;基于数组+链表+红黑树实现&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;transient&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;默认容量16，每次扩容为2倍&lt;/li&gt;
&lt;li&gt;默认负载因子为0.75&lt;/li&gt;
&lt;li&gt;当链表长度大于等于8时，检查table长度是否大于64，如果是则转成红黑树。&lt;/li&gt;
&lt;li&gt;基本原理：通过key的hashcode经过扰动处理得到hash值，然后通过(n - 1) &amp;amp; hash判断当前元素存放的位置，如果当前位置存在元素的话，就判断该元素与要存放的元素的hash值以及key是否相同，如果相同则直接覆盖，不相同就用拉链法解决冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;252-拉链法&#34;&gt;2.5.2 拉链法&lt;/h4&gt;
&lt;p&gt;将链表和数组相结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。&lt;/p&gt;
&lt;h4 id=&#34;253-确认桶下标方法&#34;&gt;2.5.3 确认桶下标方法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;计算key的hash（h = key.hashcode(); h ^ (h &amp;raquo;&amp;gt; 16)）&lt;/li&gt;
&lt;li&gt;hash &amp;amp; (n - 1)&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;254-扩容基本原理&#34;&gt;2.5.4 扩容基本原理&lt;/h4&gt;
&lt;p&gt;设 HashMap 的 table 长度为 M，需要存储的键值对数量为 N，如果哈希函数满足均匀性的要求，那么每条链表的长度大约为 N/M，因此查找的复杂度为 O(N/M)。&lt;/p&gt;
&lt;p&gt;为了让查找的成本降低，应该使 N/M 尽可能小，因此需要保证 M 尽可能大，也就是说 table 要尽可能大。HashMap 采用动态扩容来根据当前的 N 值来调整 M 值，使得空间效率和时间效率都能得到保证。&lt;/p&gt;
&lt;p&gt;扩容使用 resize() 实现，需要注意的是，扩容操作同样需要把 oldTable 的所有键值对重新插入 newTable 中，因此这一步是很费时的。&lt;/p&gt;
&lt;h4 id=&#34;255-扩容重新计算桶下标&#34;&gt;2.5.5 扩容重新计算桶下标&lt;/h4&gt;
&lt;p&gt;在进行扩容时，需要把键值对重新计算桶下标，从而放到对应的桶上。在前面提到，HashMap 使用 hash%capacity 来确定桶下标。HashMap capacity 为 2 的 n 次方这一特点能够极大降低重新计算桶下标操作的复杂度。&lt;/p&gt;
&lt;h4 id=&#34;256-与hashtable对比&#34;&gt;2.5.6 与HashTable对比&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Hashtable 使用 synchronized 来进行同步。&lt;/li&gt;
&lt;li&gt;HashMap 可以插入键为 null 的 Entry。&lt;/li&gt;
&lt;li&gt;HashMap 的迭代器是 fail-fast 迭代器。&lt;/li&gt;
&lt;li&gt;HashMap 不能保证随着时间的推移 Map 中的元素次序是不变的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;26-concurrenthashmap&#34;&gt;2.6 ConcurrentHashMap&lt;/h3&gt;
&lt;h4 id=&#34;261-存储结构&#34;&gt;2.6.1 存储结构&lt;/h4&gt;
&lt;p&gt;ConcurrentHashMap 和 HashMap 实现上类似，最主要的差别是 ConcurrentHashMap 采用了分段锁（Segment），每个分段锁维护着几个桶（HashEntry），多个线程可以同时访问不同分段锁上的桶，从而使其并发度更高（并发度就是 Segment 的个数）。&lt;/p&gt;
&lt;p&gt;Segment 继承自 ReentrantLock。&lt;/p&gt;
&lt;p&gt;默认的并发级别为 16，也就是说默认创建 16 个 Segment。&lt;/p&gt;
&lt;h4 id=&#34;262-size操作&#34;&gt;2.6.2 size操作&lt;/h4&gt;
&lt;p&gt;每个 Segment 维护了一个 count 变量来统计该 Segment 中的键值对个数。&lt;/p&gt;
&lt;p&gt;在执行 size 操作时，需要遍历所有 Segment 然后把 count 累计起来。&lt;/p&gt;
&lt;p&gt;ConcurrentHashMap 在执行 size 操作时先尝试不加锁，如果连续两次不加锁操作得到的结果一致，那么可以认为这个结果是正确的。&lt;/p&gt;
&lt;p&gt;尝试次数使用 RETRIES_BEFORE_LOCK 定义，该值为 2，retries 初始值为 -1，因此尝试次数为 3。&lt;/p&gt;
&lt;p&gt;如果尝试的次数超过 3 次，就需要对每个 Segment 加锁。&lt;/p&gt;
&lt;h4 id=&#34;263-jdk8的改动&#34;&gt;2.6.3 jdk8的改动&lt;/h4&gt;
&lt;p&gt;JDK 1.7 使用分段锁机制来实现并发更新操作，核心类为 Segment，它继承自重入锁 ReentrantLock，并发度与 Segment 数量相等。&lt;/p&gt;
&lt;p&gt;JDK 1.8 使用了 CAS 操作来支持更高的并发度，在 CAS 操作失败时使用内置锁 synchronized。&lt;/p&gt;
&lt;p&gt;并且 JDK 1.8 的实现也在链表过长时会转换为红黑树。&lt;/p&gt;
&lt;h3 id=&#34;27-linkedhashmap&#34;&gt;2.7 LinkedHashMap&lt;/h3&gt;
&lt;h4 id=&#34;271-存储结构&#34;&gt;2.7.1 存储结构&lt;/h4&gt;
&lt;p&gt;继承自 HashMap，因此具有和 HashMap 一样的快速查找特性。&lt;/p&gt;
&lt;p&gt;内部维护了一个双向链表，用来维护插入顺序或者 LRU 顺序。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;transient&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LinkedHashMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Entry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;transient&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LinkedHashMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Entry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;accessOrder 决定了顺序，默认为 false，此时维护的是插入顺序。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;accessOrder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;LinkedHashMap 最重要的是以下用于维护顺序的函数，它们会在 put、get 等方法中调用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;afterNodeAccess&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;afterNodeInsertion&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;evict&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;272-afternodeaccess&#34;&gt;2.7.2 afterNodeAccess()&lt;/h4&gt;
&lt;p&gt;当一个节点被访问时，如果 accessOrder 为 true，则会将该节点移到链表尾部。也就是说指定为 LRU 顺序之后，在每次访问一个节点时，会将这个节点移到链表尾部，保证链表尾部是最近访问的节点，那么链表首部就是最近最久未使用的节点。&lt;/p&gt;
&lt;h4 id=&#34;273-afternodeinsertion&#34;&gt;2.7.3 afterNodeInsertion()&lt;/h4&gt;
&lt;p&gt;在 put 等操作之后执行，当 removeEldestEntry() 方法返回 true 时会移除最晚的节点，也就是链表首部节点 first。&lt;/p&gt;
&lt;p&gt;evict 只有在构建 Map 的时候才为 false，在这里为 true。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文转载自：&lt;a class=&#34;link&#34; href=&#34;https://github.com/CyC2018/CS-Notes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/CyC2018/CS-Notes&lt;/a&gt;，用于个人复习。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Java并发知识点笔记</title>
        <link>https://cuterwrite.top/p/java-concurrent/</link>
        <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/java-concurrent/</guid>
        <description>&lt;img src="https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/20210503/santorini-1578440_1920.3ldusy6rm1k0.jpg" alt="Featured image of post Java并发知识点笔记" /&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;  &lt;em&gt;generated with &lt;a class=&#34;link&#34; href=&#34;https://github.com/thlorenz/doctoc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DocToc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#java%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%94%E8%AE%B0&#34; &gt;Java并发知识点笔记&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%96%B9%E6%B3%95&#34; &gt;1 使用线程的方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%E5%9F%BA%E7%A1%80%E7%BA%BF%E7%A8%8B%E6%9C%BA%E5%88%B6&#34; &gt;2 基础线程机制&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#21-executor&#34; &gt;2.1 Executor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#22-daemon&#34; &gt;2.2 Daemon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#23-sleep&#34; &gt;2.3 sleep()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#24-yield&#34; &gt;2.4 yield()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD&#34; &gt;3 线程中断&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#31-interruptedexception&#34; &gt;3.1 InterruptedException&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#32-interrupted&#34; &gt;3.2 interrupted()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#33-executor-%E7%9A%84%E4%B8%AD%E6%96%AD%E6%93%8D%E4%BD%9C&#34; &gt;3.3 Executor 的中断操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-%E4%BA%92%E6%96%A5%E9%94%81&#34; &gt;4 互斥锁&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#41-synchronized&#34; &gt;4.1 synchronized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#42-reentrantlock&#34; &gt;4.2 ReentrantLock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#43-%E6%AF%94%E8%BE%83&#34; &gt;4.3 比较&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#44-%E9%80%89%E6%8B%A9&#34; &gt;4.4 选择&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5-%E7%BA%BF%E7%A8%8B%E5%8D%8F%E4%BD%9C&#34; &gt;5 线程协作&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#51-join&#34; &gt;5.1 join&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#52-waitnotify&#34; &gt;5.2 wait/notify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#53-awaitsignal&#34; &gt;5.3 await/signal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6-%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81&#34; &gt;6 线程状态&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#7-juc%E5%8C%85aqs&#34; &gt;7 JUC包/AQS&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#71-countdownlatch&#34; &gt;7.1 CountDownLatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#72-cyclicbarrier&#34; &gt;7.2 CyclicBarrier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#73-semaphore&#34; &gt;7.3 Semaphore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#8-juc%E5%8C%85%E5%85%B6%E5%AE%83%E7%BB%84%E4%BB%B6&#34; &gt;8 JUC包其它组件&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#81-futuretask&#34; &gt;8.1 FutureTask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#82-blockingqueue&#34; &gt;8.2 BlockingQueue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#83-forkjoin&#34; &gt;8.3 ForkJoin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#9-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B&#34; &gt;9 内存模型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#91-%E4%B8%BB%E5%86%85%E5%AD%98%E4%B8%8E%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AD%98&#34; &gt;9.1 主内存与工作内存&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#92-%E5%86%85%E5%AD%98%E9%97%B4%E4%BA%A4%E4%BA%92%E6%93%8D%E4%BD%9C&#34; &gt;9.2 内存间交互操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#93-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7&#34; &gt;9.3 内存模型三大特性&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#931-%E5%8E%9F%E5%AD%90%E6%80%A7&#34; &gt;9.3.1. 原子性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#932-%E5%8F%AF%E8%A7%81%E6%80%A7&#34; &gt;9.3.2. 可见性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#933-%E6%9C%89%E5%BA%8F%E6%80%A7&#34; &gt;9.3.3. 有序性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#94-%E5%85%88%E8%A1%8C%E5%8F%91%E7%94%9F%E5%8E%9F%E5%88%99&#34; &gt;9.4 先行发生原则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#10-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5&#34; &gt;10 线程安全策略&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#101-%E4%B8%8D%E5%8F%AF%E5%8F%98&#34; &gt;10.1 不可变&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#102-%E4%BA%92%E6%96%A5%E5%90%8C%E6%AD%A5&#34; &gt;10.2 互斥同步&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#103-%E9%9D%9E%E9%98%BB%E5%A1%9E%E5%90%8C%E6%AD%A5&#34; &gt;10.3 非阻塞同步&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#104-%E6%97%A0%E5%90%8C%E6%AD%A5&#34; &gt;10.4 无同步&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1041-%E6%A0%88%E5%B0%81%E9%97%AD&#34; &gt;10.4.1 栈封闭&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1042-%E7%BA%BF%E7%A8%8B%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8&#34; &gt;10.4.2 线程本地存储&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1043-%E5%8F%AF%E9%87%8D%E5%85%A5%E4%BB%A3%E7%A0%81&#34; &gt;10.4.3 可重入代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#11-%E9%94%81%E4%BC%98%E5%8C%96&#34; &gt;11 锁优化&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#111-%E8%87%AA%E6%97%8B%E9%94%81&#34; &gt;11.1 自旋锁&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#112-%E9%94%81%E6%B6%88%E9%99%A4&#34; &gt;11.2 锁消除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#113-%E9%94%81%E7%B2%97%E5%8C%96&#34; &gt;11.3 锁粗化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#114-%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81&#34; &gt;11.4 轻量级锁&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#115-%E5%81%8F%E5%90%91%E9%94%81&#34; &gt;11.5 偏向锁&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;java并发知识点笔记&#34;&gt;Java并发知识点笔记&lt;/h1&gt;
&lt;h2 id=&#34;1-使用线程的方法&#34;&gt;1 使用线程的方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;实现 Runnable 接口；&lt;/li&gt;
&lt;li&gt;实现 Callable 接口；&lt;/li&gt;
&lt;li&gt;继承 Thread 类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-基础线程机制&#34;&gt;2 基础线程机制&lt;/h2&gt;
&lt;h3 id=&#34;21-executor&#34;&gt;2.1 Executor&lt;/h3&gt;
&lt;p&gt;Executor 管理多个异步任务的执行，而无需程序员显式地管理线程的生命周期。这里的异步是指多个任务的执行互不干扰，不需要进行同步操作。&lt;/p&gt;
&lt;p&gt;主要有三种 Executor：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CachedThreadPool：一个任务创建一个线程；&lt;/li&gt;
&lt;li&gt;FixedThreadPool：所有任务只能使用固定大小的线程；&lt;/li&gt;
&lt;li&gt;SingleThreadExecutor：相当于大小为 1 的 FixedThreadPool。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22-daemon&#34;&gt;2.2 Daemon&lt;/h3&gt;
&lt;p&gt;守护线程是程序运行时在后台提供服务的线程，不属于程序中不可或缺的部分。&lt;/p&gt;
&lt;p&gt;当所有非守护线程结束时，程序也就终止，同时会杀死所有守护线程。&lt;/p&gt;
&lt;p&gt;main() 属于非守护线程。&lt;/p&gt;
&lt;p&gt;在线程启动之前使用 setDaemon() 方法可以将一个线程设置为守护线程。&lt;/p&gt;
&lt;h3 id=&#34;23-sleep&#34;&gt;2.3 sleep()&lt;/h3&gt;
&lt;p&gt;Thread.sleep(millisec) 方法会休眠当前正在执行的线程，millisec 单位为毫秒。&lt;/p&gt;
&lt;p&gt;sleep() 可能会抛出 InterruptedException，因为异常不能跨线程传播回 main() 中，因此必须在本地进行处理。线程中抛出的其它异常也同样需要在本地进行处理。&lt;/p&gt;
&lt;h3 id=&#34;24-yield&#34;&gt;2.4 yield()&lt;/h3&gt;
&lt;p&gt;对静态方法 Thread.yield() 的调用声明了当前线程已经完成了生命周期中最重要的部分，可以切换给其它线程来执行。该方法只是对线程调度器的一个建议，而且也只是建议具有相同优先级的其它线程可以运行。&lt;/p&gt;
&lt;h2 id=&#34;3-线程中断&#34;&gt;3 线程中断&lt;/h2&gt;
&lt;p&gt;一个线程执行完毕之后会自动结束，如果在运行过程中发生异常也会提前结束。&lt;/p&gt;
&lt;h3 id=&#34;31-interruptedexception&#34;&gt;3.1 InterruptedException&lt;/h3&gt;
&lt;p&gt;通过调用一个线程的 interrupt() 来中断该线程，如果该线程处于阻塞、限期等待或者无限期等待状态，那么就会抛出 InterruptedException，从而提前结束该线程。但是不能中断 I/O 阻塞和 synchronized 锁阻塞。&lt;/p&gt;
&lt;h3 id=&#34;32-interrupted&#34;&gt;3.2 interrupted()&lt;/h3&gt;
&lt;p&gt;如果一个线程的 run() 方法执行一个无限循环，并且没有执行 sleep() 等会抛出 InterruptedException 的操作，那么调用线程的 interrupt() 方法就无法使线程提前结束。&lt;/p&gt;
&lt;p&gt;但是调用 interrupt() 方法会设置线程的中断标记，此时调用 interrupted() 方法会返回 true。因此可以在循环体中使用 interrupted() 方法来判断线程是否处于中断状态，从而提前结束线程。&lt;/p&gt;
&lt;h3 id=&#34;33-executor-的中断操作&#34;&gt;3.3 Executor 的中断操作&lt;/h3&gt;
&lt;p&gt;调用 Executor 的 shutdown() 方法会等待线程都执行完毕之后再关闭，但是如果调用的是 shutdownNow() 方法，则相当于调用每个线程的 interrupt() 方法。&lt;/p&gt;
&lt;h2 id=&#34;4-互斥锁&#34;&gt;4 互斥锁&lt;/h2&gt;
&lt;p&gt;Java 提供了两种锁机制来控制多个线程对共享资源的互斥访问，第一个是 JVM 实现的 synchronized，而另一个是 JDK 实现的 ReentrantLock。&lt;/p&gt;
&lt;h3 id=&#34;41-synchronized&#34;&gt;4.1 synchronized&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;同步代码块：锁对象&lt;/li&gt;
&lt;li&gt;同步一个方法：锁对象&lt;/li&gt;
&lt;li&gt;同步一个类：锁整个类&lt;/li&gt;
&lt;li&gt;同步一个静态方法：锁整个类&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;42-reentrantlock&#34;&gt;4.2 ReentrantLock&lt;/h3&gt;
&lt;p&gt;ReentrantLock 是 java.util.concurrent（J.U.C）包中的锁。&lt;/p&gt;
&lt;p&gt;通过lock和unlock操作&lt;/p&gt;
&lt;h3 id=&#34;43-比较&#34;&gt;4.3 比较&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. 锁的实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;synchronized 是 JVM 实现的，而 ReentrantLock 是 JDK 实现的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 性能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新版本 Java 对 synchronized 进行了很多优化，例如自旋锁等，synchronized 与 ReentrantLock 大致相同。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 等待可中断&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。&lt;/p&gt;
&lt;p&gt;ReentrantLock 可中断，而 synchronized 不行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 公平锁&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁。&lt;/p&gt;
&lt;p&gt;synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 锁绑定多个条件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个 ReentrantLock 可以同时绑定多个 Condition 对象。&lt;/p&gt;
&lt;h3 id=&#34;44-选择&#34;&gt;4.4 选择&lt;/h3&gt;
&lt;p&gt;除非需要使用 ReentrantLock 的高级功能，否则优先使用 synchronized。这是因为 synchronized 是 JVM 实现的一种锁机制，JVM 原生地支持它，而 ReentrantLock 不是所有的 JDK 版本都支持。并且使用 synchronized 不用担心没有释放锁而导致死锁问题，因为 JVM 会确保锁的释放。&lt;/p&gt;
&lt;h2 id=&#34;5-线程协作&#34;&gt;5 线程协作&lt;/h2&gt;
&lt;h3 id=&#34;51-join&#34;&gt;5.1 join&lt;/h3&gt;
&lt;p&gt;在线程中调用另一个线程的 join() 方法，会将当前线程挂起，而不是忙等待，直到目标线程结束。&lt;/p&gt;
&lt;h3 id=&#34;52-waitnotify&#34;&gt;5.2 wait/notify&lt;/h3&gt;
&lt;p&gt;调用 wait() 使得线程等待某个条件满足，线程在等待时会被挂起，当其他线程的运行使得这个条件满足时，其它线程会调用 notify() 或者 notifyAll() 来唤醒挂起的线程。&lt;/p&gt;
&lt;p&gt;它们都属于 Object 的一部分，而不属于 Thread。&lt;/p&gt;
&lt;p&gt;只能用在同步方法或者同步控制块中使用，否则会在运行时抛出 IllegalMonitorStateException。&lt;/p&gt;
&lt;p&gt;使用 wait() 挂起期间，线程会释放锁。这是因为，如果没有释放锁，那么其它线程就无法进入对象的同步方法或者同步控制块中，那么就无法执行 notify() 或者 notifyAll() 来唤醒挂起的线程，造成死锁&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;wait() 和 sleep() 的区别&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wait() 是 Object 的方法，而 sleep() 是 Thread 的静态方法；&lt;/li&gt;
&lt;li&gt;wait() 会释放锁，sleep() 不会。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;53-awaitsignal&#34;&gt;5.3 await/signal&lt;/h3&gt;
&lt;p&gt;java.util.concurrent 类库中提供了 Condition 类来实现线程之间的协调，可以在 Condition 上调用 await() 方法使线程等待，其它线程调用 signal() 或 signalAll() 方法唤醒等待的线程。&lt;/p&gt;
&lt;p&gt;相比于 wait() 这种等待方式，await() 可以指定等待的条件，因此更加灵活。&lt;/p&gt;
&lt;p&gt;使用 Lock 来获取一个 Condition 对象。&lt;/p&gt;
&lt;h2 id=&#34;6-线程状态&#34;&gt;6 线程状态&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;new&lt;/li&gt;
&lt;li&gt;runable&lt;/li&gt;
&lt;li&gt;blocked&lt;/li&gt;
&lt;li&gt;waiting&lt;/li&gt;
&lt;li&gt;timed_waiting&lt;/li&gt;
&lt;li&gt;terminated&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7-juc包aqs&#34;&gt;7 JUC包/AQS&lt;/h2&gt;
&lt;h3 id=&#34;71-countdownlatch&#34;&gt;7.1 CountDownLatch&lt;/h3&gt;
&lt;p&gt;用来控制一个或者多个线程等待多个线程。&lt;/p&gt;
&lt;p&gt;维护了一个计数器 cnt，每次调用 countDown() 方法会让计数器的值减 1，减到 0 的时候，那些因为调用 await() 方法而在等待的线程就会被唤醒。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;72-cyclicbarrier&#34;&gt;7.2 CyclicBarrier&lt;/h3&gt;
&lt;p&gt;用来控制多个线程互相等待，只有当多个线程都到达时，这些线程才会继续执行。&lt;/p&gt;
&lt;p&gt;和 CountdownLatch 相似，都是通过维护计数器来实现的。线程执行 await() 方法之后计数器会减 1，并进行等待，直到计数器为 0，所有调用 await() 方法而在等待的线程才能继续执行。&lt;/p&gt;
&lt;p&gt;CyclicBarrier 和 CountdownLatch 的一个区别是，CyclicBarrier 的计数器通过调用 reset() 方法可以循环使用，所以它才叫做循环屏障。&lt;/p&gt;
&lt;p&gt;CyclicBarrier 有两个构造函数，其中 parties 指示计数器的初始值，barrierAction 在所有线程都到达屏障的时候会执行一次。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/f71af66b-0d54-4399-a44b-f47b58321984.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;73-semaphore&#34;&gt;7.3 Semaphore&lt;/h3&gt;
&lt;p&gt;Semaphore 类似于操作系统中的信号量，可以控制对互斥资源的访问线程数。&lt;/p&gt;
&lt;h2 id=&#34;8-juc包其它组件&#34;&gt;8 JUC包其它组件&lt;/h2&gt;
&lt;h3 id=&#34;81-futuretask&#34;&gt;8.1 FutureTask&lt;/h3&gt;
&lt;p&gt;在介绍 Callable 时我们知道它可以有返回值，返回值通过 Future&amp;lt;V&amp;gt; 进行封装。FutureTask 实现了 RunnableFuture 接口，该接口继承自 Runnable 和 Future&amp;lt;V&amp;gt; 接口，这使得 FutureTask 既可以当做一个任务执行，也可以有返回值。&lt;/p&gt;
&lt;p&gt;FutureTask 可用于异步获取执行结果或取消执行任务的场景。当一个计算任务需要执行很长时间，那么就可以用 FutureTask 来封装这个任务，主线程在完成自己的任务之后再去获取结果。&lt;/p&gt;
&lt;h3 id=&#34;82-blockingqueue&#34;&gt;8.2 BlockingQueue&lt;/h3&gt;
&lt;p&gt;java.util.concurrent.BlockingQueue 接口有以下阻塞队列的实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;FIFO 队列&lt;/strong&gt;  ：LinkedBlockingQueue、ArrayBlockingQueue（固定长度）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优先级队列&lt;/strong&gt;  ：PriorityBlockingQueue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提供了阻塞的 take() 和 put() 方法：如果队列为空 take() 将阻塞，直到队列中有内容；如果队列为满 put() 将阻塞，直到队列有空闲位置。&lt;/p&gt;
&lt;h3 id=&#34;83-forkjoin&#34;&gt;8.3 ForkJoin&lt;/h3&gt;
&lt;p&gt;主要用于并行计算中，和 MapReduce 原理类似，都是把大的计算任务拆分成多个小任务并行计算。&lt;/p&gt;
&lt;p&gt;ForkJoinPool 实现了工作窃取算法来提高 CPU 的利用率。每个线程都维护了一个双端队列，用来存储需要执行的任务。工作窃取算法允许空闲的线程从其它线程的双端队列中窃取一个任务来执行。窃取的任务必须是最晚的任务，避免和队列所属线程发生竞争。例如下图中，Thread2 从 Thread1 的队列中拿出最晚的 Task1 任务，Thread1 会拿出 Task2 来执行，这样就避免发生竞争。但是如果队列中只有一个任务时还是会发生竞争。&lt;/p&gt;
&lt;h2 id=&#34;9-内存模型&#34;&gt;9 内存模型&lt;/h2&gt;
&lt;p&gt;Java 内存模型试图屏蔽各种硬件和操作系统的内存访问差异，以实现让 Java 程序在各种平台下都能达到一致的内存访问效果。&lt;/p&gt;
&lt;h3 id=&#34;91-主内存与工作内存&#34;&gt;9.1 主内存与工作内存&lt;/h3&gt;
&lt;p&gt;处理器上的寄存器的读写的速度比内存快几个数量级，为了解决这种速度矛盾，在它们之间加入了高速缓存。&lt;/p&gt;
&lt;p&gt;加入高速缓存带来了一个新的问题：缓存一致性。如果多个缓存共享同一块主内存区域，那么多个缓存的数据可能会不一致，需要一些协议来解决这个问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/942ca0d2-9d5c-45a4-89cb-5fd89b61913f.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;所有的变量都存储在主内存中，每个线程还有自己的工作内存，工作内存存储在高速缓存或者寄存器中，保存了该线程使用的变量的主内存副本拷贝。&lt;/p&gt;
&lt;p&gt;线程只能直接操作工作内存中的变量，不同线程之间的变量值传递需要通过主内存来完成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/15851555-5abc-497d-ad34-efed10f43a6b.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;92-内存间交互操作&#34;&gt;9.2 内存间交互操作&lt;/h3&gt;
&lt;p&gt;Java 内存模型定义了 8 个操作来完成主内存和工作内存的交互操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/8b7ebbad-9604-4375-84e3-f412099d170c.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;read：把一个变量的值从主内存传输到工作内存中&lt;/li&gt;
&lt;li&gt;load：在 read 之后执行，把 read 得到的值放入工作内存的变量副本中&lt;/li&gt;
&lt;li&gt;use：把工作内存中一个变量的值传递给执行引擎&lt;/li&gt;
&lt;li&gt;assign：把一个从执行引擎接收到的值赋给工作内存的变量&lt;/li&gt;
&lt;li&gt;store：把工作内存的一个变量的值传送到主内存中&lt;/li&gt;
&lt;li&gt;write：在 store 之后执行，把 store 得到的值放入主内存的变量中&lt;/li&gt;
&lt;li&gt;lock：作用于主内存的变量&lt;/li&gt;
&lt;li&gt;unlock&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;93-内存模型三大特性&#34;&gt;9.3 内存模型三大特性&lt;/h3&gt;
&lt;h4 id=&#34;931-原子性&#34;&gt;9.3.1. 原子性&lt;/h4&gt;
&lt;p&gt;Java 内存模型保证了 read、load、use、assign、store、write、lock 和 unlock 操作具有原子性，例如对一个 int 类型的变量执行 assign 赋值操作，这个操作就是原子性的。但是 Java 内存模型允许虚拟机将没有被 volatile 修饰的 64 位数据（long，double）的读写操作划分为两次 32 位的操作来进行，即 load、store、read 和 write 操作可以不具备原子性。&lt;/p&gt;
&lt;p&gt;有一个错误认识就是，int 等原子性的类型在多线程环境中不会出现线程安全问题。前面的线程不安全示例代码中，cnt 属于 int 类型变量，1000 个线程对它进行自增操作之后，得到的值为 997 而不是 1000。&lt;/p&gt;
&lt;p&gt;为了方便讨论，将内存间的交互操作简化为 3 个：load、assign、store。&lt;/p&gt;
&lt;p&gt;下图演示了两个线程同时对 cnt 进行操作，load、assign、store 这一系列操作整体上看不具备原子性，那么在 T1 修改 cnt 并且还没有将修改后的值写入主内存，T2 依然可以读入旧值。可以看出，这两个线程虽然执行了两次自增运算，但是主内存中 cnt 的值最后为 1 而不是 2。因此对 int 类型读写操作满足原子性只是说明 load、assign、store 这些单个操作具备原子性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/2797a609-68db-4d7b-8701-41ac9a34b14f.jpg&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;AtomicInteger 能保证多个线程修改的原子性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/dd563037-fcaa-4bd8-83b6-b39d93a12c77.jpg&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;除了使用原子类之外，也可以使用 synchronized 互斥锁来保证操作的原子性。它对应的内存间交互操作为：lock 和 unlock，在虚拟机实现上对应的字节码指令为 monitorenter 和 monitorexit。&lt;/p&gt;
&lt;h4 id=&#34;932-可见性&#34;&gt;9.3.2. 可见性&lt;/h4&gt;
&lt;p&gt;可见性指当一个线程修改了共享变量的值，其它线程能够立即得知这个修改。Java 内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值来实现可见性的。&lt;/p&gt;
&lt;p&gt;主要有三种实现可见性的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;volatile&lt;/li&gt;
&lt;li&gt;synchronized，对一个变量执行 unlock 操作之前，必须把变量值同步回主内存。&lt;/li&gt;
&lt;li&gt;final，被 final 关键字修饰的字段在构造器中一旦初始化完成，并且没有发生 this 逃逸（其它线程通过 this 引用访问到初始化了一半的对象），那么其它线程就能看见 final 字段的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对前面的线程不安全示例中的 cnt 变量使用 volatile 修饰，不能解决线程不安全问题，因为 volatile 并不能保证操作的原子性。&lt;/p&gt;
&lt;h4 id=&#34;933-有序性&#34;&gt;9.3.3. 有序性&lt;/h4&gt;
&lt;p&gt;有序性是指：在本线程内观察，所有操作都是有序的。在一个线程观察另一个线程，所有操作都是无序的，无序是因为发生了指令重排序。在 Java 内存模型中，允许编译器和处理器对指令进行重排序，重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。&lt;/p&gt;
&lt;p&gt;volatile 关键字通过添加内存屏障的方式来禁止指令重排，即重排序时不能把后面的指令放到内存屏障之前。&lt;/p&gt;
&lt;p&gt;也可以通过 synchronized 来保证有序性，它保证每个时刻只有一个线程执行同步代码，相当于是让线程顺序执行同步代码。&lt;/p&gt;
&lt;h3 id=&#34;94-先行发生原则&#34;&gt;9.4 先行发生原则&lt;/h3&gt;
&lt;p&gt;上面提到了可以用 volatile 和 synchronized 来保证有序性。除此之外，JVM 还规定了先行发生原则，让一个操作无需控制就能先于另一个操作完成。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单一线程原则：在一个线程内，在程序前面的操作先行发生于后面的操作。&lt;/li&gt;
&lt;li&gt;管程锁定规则：一个 unlock 操作先行发生于后面对同一个锁的 lock 操作。&lt;/li&gt;
&lt;li&gt;volatile 变量规则：对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作。&lt;/li&gt;
&lt;li&gt;线程启动规则：Thread 对象的 start() 方法调用先行发生于此线程的每一个动作。&lt;/li&gt;
&lt;li&gt;线程加入规则：Thread 对象的结束先行发生于 join() 方法返回。&lt;/li&gt;
&lt;li&gt;线程中断规则：对线程 interrupt() 方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过 interrupted() 方法检测到是否有中断发生。&lt;/li&gt;
&lt;li&gt;对象终结规则：一个对象的初始化完成（构造函数执行结束）先行发生于它的 finalize() 方法的开始。&lt;/li&gt;
&lt;li&gt;传递性：如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那么操作 A 先行发生于操作 C。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;10-线程安全策略&#34;&gt;10 线程安全策略&lt;/h2&gt;
&lt;h3 id=&#34;101-不可变&#34;&gt;10.1 不可变&lt;/h3&gt;
&lt;p&gt;不可变的类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;final 关键字修饰的基本数据类型&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;枚举类型&lt;/li&gt;
&lt;li&gt;Number 部分子类，如 Long 和 Double 等数值包装类型，BigInteger 和 BigDecimal 等大数据类型。但同为 Number 的原子类 AtomicInteger 和 AtomicLong 则是可变的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于集合类型，可以使用 Collections.unmodifiableXXX() 方法来获取一个不可变的集合。&lt;/p&gt;
&lt;h3 id=&#34;102-互斥同步&#34;&gt;10.2 互斥同步&lt;/h3&gt;
&lt;p&gt;synchronized 和 ReentrantLock。&lt;/p&gt;
&lt;h3 id=&#34;103-非阻塞同步&#34;&gt;10.3 非阻塞同步&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CAS&lt;/li&gt;
&lt;li&gt;AtomicInteger&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ABA问题：如果一个变量初次读取的时候是 A 值，它的值被改成了 B，后来又被改回为 A，那 CAS 操作就会误认为它从来没有被改变过。&lt;/p&gt;
&lt;p&gt;解决方法：J.U.C 包提供了一个带有标记的原子引用类 AtomicStampedReference 来解决这个问题，它可以通过控制变量值的版本来保证 CAS 的正确性。大部分情况下 ABA 问题不会影响程序并发的正确性，如果需要解决 ABA 问题，改用传统的互斥同步可能会比原子类更高效。&lt;/p&gt;
&lt;h3 id=&#34;104-无同步&#34;&gt;10.4 无同步&lt;/h3&gt;
&lt;h4 id=&#34;1041-栈封闭&#34;&gt;10.4.1 栈封闭&lt;/h4&gt;
&lt;p&gt;多个线程访问同一个方法的&lt;strong&gt;局部变量&lt;/strong&gt;时，不会出现线程安全问题，因为局部变量存储在虚拟机栈中，属于线程私有的。&lt;/p&gt;
&lt;h4 id=&#34;1042-线程本地存储&#34;&gt;10.4.2 线程本地存储&lt;/h4&gt;
&lt;p&gt;如果一段代码中所需要的数据必须与其他代码共享，那就看看这些共享数据的代码是否能保证在同一个线程中执行。如果能保证，我们就可以把共享数据的可见范围&lt;strong&gt;限制在同一个线程之内&lt;/strong&gt;，这样，无须同步也能保证线程之间不出现数据争用的问题。&lt;/p&gt;
&lt;p&gt;它提供了线程本地变量，也就是如果你创建了一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的一个本地拷贝，多个线程操作这个变量的时候，实际是操作的自己本地内存里面的变量，从而避免了线程安全问题&lt;/p&gt;
&lt;p&gt;每个 Thread 都有一个 ThreadLocal.ThreadLocalMap 对象。&lt;/p&gt;
&lt;p&gt;当调用一个 ThreadLocal 的 set(T value) 方法时，先得到当前线程的 ThreadLocalMap 对象，然后将 ThreadLocal-&amp;gt;value 键值对插入到该 Map 中。&lt;/p&gt;
&lt;h4 id=&#34;1043-可重入代码&#34;&gt;10.4.3 可重入代码&lt;/h4&gt;
&lt;p&gt;这种代码也叫做纯代码（Pure Code），可以在代码执行的任何时刻中断它，转而去执行另外一段代码（包括递归调用它本身），而在控制权返回后，原来的程序不会出现任何错误。&lt;/p&gt;
&lt;p&gt;可重入代码有一些共同的特征，例如不依赖存储在堆上的数据和公用的系统资源、用到的状态量都由参数中传入、不调用非可重入的方法等。&lt;/p&gt;
&lt;h2 id=&#34;11-锁优化&#34;&gt;11 锁优化&lt;/h2&gt;
&lt;h3 id=&#34;111-自旋锁&#34;&gt;11.1 自旋锁&lt;/h3&gt;
&lt;p&gt;自旋锁的思想是让一个线程在请求一个共享数据的锁时执行忙循环（自旋）一段时间，如果在这段时间内能获得锁，就可以避免进入阻塞状态。&lt;/p&gt;
&lt;p&gt;自旋锁虽然能避免进入阻塞状态从而减少开销，但是它需要进行忙循环操作占用 CPU 时间，它只适用于&lt;strong&gt;共享数据的锁定状态很短&lt;/strong&gt;的场景。&lt;/p&gt;
&lt;p&gt;在 JDK 1.6 中引入了自适应的自旋锁。自适应意味着自旋的次数不再固定了，而是由前一次在同一个锁上的自旋次数及锁的拥有者的状态来决定。&lt;/p&gt;
&lt;h3 id=&#34;112-锁消除&#34;&gt;11.2 锁消除&lt;/h3&gt;
&lt;p&gt;锁消除是指对于被检测出不可能存在竞争的共享数据的锁进行消除。&lt;/p&gt;
&lt;p&gt;锁消除主要是通过逃逸分析来支持，如果堆上的共享数据不可能逃逸出去被其它线程访问到，那么就可以把它们当成私有数据对待，也就可以将它们的锁进行消除。&lt;/p&gt;
&lt;h3 id=&#34;113-锁粗化&#34;&gt;11.3 锁粗化&lt;/h3&gt;
&lt;p&gt;如果一系列的连续操作都对同一个对象反复加锁和解锁，频繁的加锁操作就会导致性能损耗。&lt;/p&gt;
&lt;p&gt;如果虚拟机探测到由这样的一串零碎的操作都对同一个对象加锁，将会把加锁的范围扩展（粗化）到整个操作序列的外部。&lt;/p&gt;
&lt;h3 id=&#34;114-轻量级锁&#34;&gt;11.4 轻量级锁&lt;/h3&gt;
&lt;p&gt;JDK 1.6 引入了偏向锁和轻量级锁，从而让锁拥有了四个状态：无锁状态（unlocked）、偏向锁状态（biasble）、轻量级锁状态（lightweight locked）和重量级锁状态（inflated）。&lt;/p&gt;
&lt;p&gt;轻量级锁是相对于传统的重量级锁而言，它使用 CAS 操作来避免重量级锁使用互斥量的开销。对于绝大部分的锁，在整个同步周期内都是不存在竞争的，因此也就不需要都使用互斥量进行同步，可以先采用 CAS 操作进行同步，如果 CAS 失败了再改用互斥量进行同步。&lt;/p&gt;
&lt;h3 id=&#34;115-偏向锁&#34;&gt;11.5 偏向锁&lt;/h3&gt;
&lt;p&gt;偏向锁的思想是偏向于让第一个获取锁对象的线程，这个线程在之后获取该锁就不再需要进行同步操作，甚至连 CAS 操作也不再需要。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文转载自：&lt;a class=&#34;link&#34; href=&#34;https://github.com/CyC2018/CS-Notes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/CyC2018/CS-Notes&lt;/a&gt;，用于个人复习。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>JVM知识点笔记</title>
        <link>https://cuterwrite.top/p/jvm/</link>
        <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/jvm/</guid>
        <description>&lt;img src="https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/20210503/naples-122698_1920.2vb750rs8te0.jpg" alt="Featured image of post JVM知识点笔记" /&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;  &lt;em&gt;generated with &lt;a class=&#34;link&#34; href=&#34;https://github.com/thlorenz/doctoc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DocToc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#jvm%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%94%E8%AE%B0&#34; &gt;JVM知识点笔记&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F&#34; &gt;1 运行时数据区域&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#11-%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8&#34; &gt;1.1 程序计数器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#12-java%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88&#34; &gt;1.2 Java虚拟机栈&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#13-%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88&#34; &gt;1.3 本地方法栈&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#14-%E5%A0%86&#34; &gt;1.4 堆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#15-%E6%96%B9%E6%B3%95%E5%8C%BA&#34; &gt;1.5 方法区&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#16-%E8%BF%90%E8%A1%8C%E6%97%B6%E5%B8%B8%E9%87%8F%E6%B1%A0&#34; &gt;1.6 运行时常量池&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#17-%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98&#34; &gt;1.7 直接内存&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86&#34; &gt;2 垃圾收集&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#21-%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E5%8F%AF%E5%9B%9E%E6%94%B6&#34; &gt;2.1 判断一个对象是否可回收&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#211-%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E7%AE%97%E6%B3%95&#34; &gt;2.1.1 引用计数算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#212-%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95&#34; &gt;2.1.2 可达性分析算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#213-%E6%96%B9%E6%B3%95%E5%8C%BA%E7%9A%84%E5%9B%9E%E6%94%B6&#34; &gt;2.1.3 方法区的回收&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#214-finalize&#34; &gt;2.1.4 finalize()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#22-%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B&#34; &gt;2.2 引用类型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#221-%E5%BC%BA%E5%BC%95%E7%94%A8&#34; &gt;2.2.1 强引用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#222-%E8%BD%AF%E5%BC%95%E7%94%A8&#34; &gt;2.2.2 软引用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#223-%E5%BC%B1%E5%BC%95%E7%94%A8&#34; &gt;2.2.3 弱引用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#224-%E8%99%9A%E5%BC%95%E7%94%A8&#34; &gt;2.2.4 虚引用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#23-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95&#34; &gt;2.3 垃圾收集算法&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#231-%E6%A0%87%E8%AE%B0---%E6%B8%85%E9%99%A4&#34; &gt;2.3.1 标记 - 清除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#232-%E6%A0%87%E8%AE%B0-%E6%95%B4%E7%90%86&#34; &gt;2.3.2 标记-整理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#233-%E5%A4%8D%E5%88%B6&#34; &gt;2.3.3 复制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#234-%E5%88%86%E4%BB%A3%E6%94%B6%E9%9B%86&#34; &gt;2.3.4 分代收集&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#24-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8&#34; &gt;2.4 垃圾收集器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5&#34; &gt;3 内存分配与回收策略&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#31-minor-gc%E5%92%8Cfull-gc&#34; &gt;3.1 Minor GC和Full GC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#32-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5&#34; &gt;3.2 内存分配策略&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#321-%E5%AF%B9%E8%B1%A1%E4%BC%98%E5%85%88%E5%9C%A8-eden-%E5%88%86%E9%85%8D&#34; &gt;3.2.1. 对象优先在 Eden 分配&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#322-%E5%A4%A7%E5%AF%B9%E8%B1%A1%E7%9B%B4%E6%8E%A5%E8%BF%9B%E5%85%A5%E8%80%81%E5%B9%B4%E4%BB%A3&#34; &gt;3.2.2. 大对象直接进入老年代&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#323-%E9%95%BF%E6%9C%9F%E5%AD%98%E6%B4%BB%E7%9A%84%E5%AF%B9%E8%B1%A1%E8%BF%9B%E5%85%A5%E8%80%81%E5%B9%B4%E4%BB%A3&#34; &gt;3.2.3. 长期存活的对象进入老年代&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#324-%E5%8A%A8%E6%80%81%E5%AF%B9%E8%B1%A1%E5%B9%B4%E9%BE%84%E5%88%A4%E5%AE%9A&#34; &gt;3.2.4. 动态对象年龄判定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#325-%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D%E6%8B%85%E4%BF%9D&#34; &gt;3.2.5. 空间分配担保&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#33-full-gc%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6&#34; &gt;3.3 Full GC触发条件&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#331-%E8%B0%83%E7%94%A8-systemgc&#34; &gt;3.3.1. 调用 System.gc()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#332-%E8%80%81%E5%B9%B4%E4%BB%A3%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3&#34; &gt;3.3.2. 老年代空间不足&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#333-%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D%E6%8B%85%E4%BF%9D%E5%A4%B1%E8%B4%A5&#34; &gt;3.3.3. 空间分配担保失败&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#334-jdk-17-%E5%8F%8A%E4%BB%A5%E5%89%8D%E7%9A%84%E6%B0%B8%E4%B9%85%E4%BB%A3%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3&#34; &gt;3.3.4. JDK 1.7 及以前的永久代空间不足&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#335-concurrent-mode-failure&#34; &gt;3.3.5. Concurrent Mode Failure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6&#34; &gt;4 类加载机制&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#41-%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F&#34; &gt;4.1 类的生命周期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#42-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B&#34; &gt;4.2 类加载过程&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#421-%E5%8A%A0%E8%BD%BD&#34; &gt;4.2.1. 加载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#422-%E9%AA%8C%E8%AF%81&#34; &gt;4.2.2. 验证&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#423-%E5%87%86%E5%A4%87&#34; &gt;4.2.3. 准备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#424-%E8%A7%A3%E6%9E%90&#34; &gt;4.2.4. 解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#425-%E5%88%9D%E5%A7%8B%E5%8C%96&#34; &gt;4.2.5. 初始化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#43-%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96%E6%97%B6%E6%9C%BA&#34; &gt;4.3 类初始化时机&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#431-%E4%B8%BB%E5%8A%A8%E5%BC%95%E7%94%A8&#34; &gt;4.3.1. 主动引用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#432-%E8%A2%AB%E5%8A%A8%E5%BC%95%E7%94%A8&#34; &gt;4.3.2. 被动引用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#44-%E7%B1%BB%E4%B8%8E%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8&#34; &gt;4.4 类与类加载器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#45-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%B1%BB&#34; &gt;4.5 类加载器分类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#46-%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B&#34; &gt;4.6 双亲委派模型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#461-%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B&#34; &gt;4.6.1. 工作过程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#462-%E5%A5%BD%E5%A4%84&#34; &gt;4.6.2. 好处&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#463-%E5%AE%9E%E7%8E%B0&#34; &gt;4.6.3. 实现&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#47-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%AE%9E%E7%8E%B0&#34; &gt;4.7 自定义类加载器实现&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;jvm知识点笔记&#34;&gt;JVM知识点笔记&lt;/h1&gt;
&lt;h2 id=&#34;1-运行时数据区域&#34;&gt;1 运行时数据区域&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/5778d113-8e13-4c53-b5bf-801e58080b97.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;11-程序计数器&#34;&gt;1.1 程序计数器&lt;/h3&gt;
&lt;p&gt;记录正在执行的虚拟机字节码指令的地址（如果正在执行的是本地方法则为空）。&lt;/p&gt;
&lt;h3 id=&#34;12-java虚拟机栈&#34;&gt;1.2 Java虚拟机栈&lt;/h3&gt;
&lt;p&gt;每个 Java 方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。从方法调用直至执行完成的过程，对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。&lt;/p&gt;
&lt;p&gt;可以通过 -Xss 这个虚拟机参数来指定每个线程的 Java 虚拟机栈内存大小，在 JDK 1.4 中默认为 256K，而在 JDK 1.5+ 默认为 1M：&lt;/p&gt;
&lt;p&gt;该区域可能抛出以下异常：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当线程请求的栈深度超过最大值，会抛出 StackOverflowError 异常；&lt;/li&gt;
&lt;li&gt;栈进行动态扩展时如果无法申请到足够内存，会抛出 OutOfMemoryError 异常。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;13-本地方法栈&#34;&gt;1.3 本地方法栈&lt;/h3&gt;
&lt;p&gt;本地方法栈与 Java 虚拟机栈类似，它们之间的区别只不过是本地方法栈为本地方法服务。&lt;/p&gt;
&lt;p&gt;本地方法一般是用其它语言（C、C++ 或汇编语言等）编写的，并且被编译为基于本机硬件和操作系统的程序，对待这些方法需要特别处理。&lt;/p&gt;
&lt;h3 id=&#34;14-堆&#34;&gt;1.4 堆&lt;/h3&gt;
&lt;p&gt;所有对象都在这里分配内存，是垃圾收集的主要区域（&amp;ldquo;GC 堆&amp;rdquo;）。&lt;/p&gt;
&lt;p&gt;现代的垃圾收集器基本都是采用分代收集算法，其主要的思想是针对不同类型的对象采取不同的垃圾回收算法。可以将堆分成两块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新生代（Young Generation）&lt;/li&gt;
&lt;li&gt;老年代（Old Generation）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;堆不需要连续内存，并且可以动态增加其内存，增加失败会抛出 OutOfMemoryError 异常。&lt;/p&gt;
&lt;p&gt;可以通过 -Xms 和 -Xmx 这两个虚拟机参数来指定一个程序的堆内存大小，第一个参数设置初始值，第二个参数设置最大值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;java&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Xms1M&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Xmx2M&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HackTheJava&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;15-方法区&#34;&gt;1.5 方法区&lt;/h3&gt;
&lt;p&gt;用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。&lt;/p&gt;
&lt;p&gt;和堆一样不需要连续的内存，并且可以动态扩展，动态扩展失败一样会抛出 OutOfMemoryError 异常。&lt;/p&gt;
&lt;p&gt;对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载，但是一般比较难实现。&lt;/p&gt;
&lt;p&gt;HotSpot 虚拟机把它当成永久代来进行垃圾回收。但很难确定永久代的大小，因为它受到很多因素影响，并且每次 Full GC 之后永久代的大小都会改变，所以经常会抛出 OutOfMemoryError 异常。为了更容易管理方法区，从 JDK 1.8 开始，移除永久代，并把方法区移至元空间，它位于本地内存中，而不是虚拟机内存中。&lt;/p&gt;
&lt;p&gt;方法区是一个 JVM 规范，永久代与元空间都是其一种实现方式。在 JDK 1.8 之后，原来永久代的数据被分到了堆和元空间中。元空间存储类的元信息，静态变量和常量池等放入堆中。&lt;/p&gt;
&lt;h3 id=&#34;16-运行时常量池&#34;&gt;1.6 运行时常量池&lt;/h3&gt;
&lt;p&gt;运行时常量池是方法区的一部分。&lt;/p&gt;
&lt;p&gt;Class 文件中的常量池（编译器生成的字面量和符号引用）会在类加载后被放入这个区域。&lt;/p&gt;
&lt;p&gt;除了在编译期生成的常量，还允许动态生成，例如 String 类的 intern()。&lt;/p&gt;
&lt;h3 id=&#34;17-直接内存&#34;&gt;1.7 直接内存&lt;/h3&gt;
&lt;p&gt;在 JDK 1.4 中新引入了 NIO 类，它可以使用 Native 函数库直接分配堆外内存，然后通过 Java 堆里的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在堆内存和堆外内存来回拷贝数据。&lt;/p&gt;
&lt;h2 id=&#34;2-垃圾收集&#34;&gt;2 垃圾收集&lt;/h2&gt;
&lt;p&gt;垃圾收集主要是针对堆和方法区进行。程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后就会消失，因此不需要对这三个区域进行垃圾回收。&lt;/p&gt;
&lt;h3 id=&#34;21-判断一个对象是否可回收&#34;&gt;2.1 判断一个对象是否可回收&lt;/h3&gt;
&lt;h4 id=&#34;211-引用计数算法&#34;&gt;2.1.1 引用计数算法&lt;/h4&gt;
&lt;p&gt;为对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收。&lt;/p&gt;
&lt;p&gt;在两个对象出现循环引用的情况下，此时引用计数器永远不为 0，导致无法对它们进行回收。正是因为循环引用的存在，因此 Java 虚拟机不使用引用计数算法。&lt;/p&gt;
&lt;h4 id=&#34;212-可达性分析算法&#34;&gt;2.1.2 可达性分析算法&lt;/h4&gt;
&lt;p&gt;以 GC Roots 为起始点进行搜索，可达的对象都是存活的，不可达的对象可被回收。&lt;/p&gt;
&lt;p&gt;Java 虚拟机使用该算法来判断对象是否可被回收，GC Roots 一般包含以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虚拟机栈中局部变量表中引用的对象&lt;/li&gt;
&lt;li&gt;本地方法栈中 JNI 中引用的对象&lt;/li&gt;
&lt;li&gt;方法区中类静态属性引用的对象&lt;/li&gt;
&lt;li&gt;方法区中的常量引用的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;213-方法区的回收&#34;&gt;2.1.3 方法区的回收&lt;/h4&gt;
&lt;p&gt;因为方法区主要存放永久代对象，而永久代对象的回收率比新生代低很多，所以在方法区上进行回收性价比不高。&lt;/p&gt;
&lt;p&gt;主要是对常量池的回收和对类的卸载。&lt;/p&gt;
&lt;p&gt;为了避免内存溢出，在大量使用反射和动态代理的场景都需要虚拟机具备类卸载功能。&lt;/p&gt;
&lt;p&gt;类的卸载条件很多，需要满足以下三个条件，并且满足了条件也不一定会被卸载：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该类所有的实例都已经被回收，此时堆中不存在该类的任何实例。&lt;/li&gt;
&lt;li&gt;加载该类的 ClassLoader 已经被回收。&lt;/li&gt;
&lt;li&gt;该类对应的 Class 对象没有在任何地方被引用，也就无法在任何地方通过反射访问该类方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;214-finalize&#34;&gt;2.1.4 finalize()&lt;/h4&gt;
&lt;p&gt;类似 C++ 的析构函数，用于关闭外部资源。但是 try-finally 等方式可以做得更好，并且该方法运行代价很高，不确定性大，无法保证各个对象的调用顺序，因此最好不要使用。&lt;/p&gt;
&lt;p&gt;当一个对象可被回收时，如果需要执行该对象的 finalize() 方法，那么就有可能在该方法中让对象重新被引用，从而实现自救。自救只能进行一次，如果回收的对象之前调用了 finalize() 方法自救，后面回收时不会再调用该方法。&lt;/p&gt;
&lt;h3 id=&#34;22-引用类型&#34;&gt;2.2 引用类型&lt;/h3&gt;
&lt;p&gt;无论是通过引用计数算法判断对象的引用数量，还是通过可达性分析算法判断对象是否可达，判定对象是否可被回收都与引用有关。&lt;/p&gt;
&lt;p&gt;Java 提供了四种强度不同的引用类型。&lt;/p&gt;
&lt;h4 id=&#34;221-强引用&#34;&gt;2.2.1 强引用&lt;/h4&gt;
&lt;p&gt;被强引用关联的对象不会被回收。&lt;/p&gt;
&lt;p&gt;使用 new 一个新对象的方式来创建强引用。&lt;/p&gt;
&lt;h4 id=&#34;222-软引用&#34;&gt;2.2.2 软引用&lt;/h4&gt;
&lt;p&gt;被软引用关联的对象只有在内存不够的情况下才会被回收。&lt;/p&gt;
&lt;p&gt;使用 SoftReference 类来创建软引用。&lt;/p&gt;
&lt;h4 id=&#34;223-弱引用&#34;&gt;2.2.3 弱引用&lt;/h4&gt;
&lt;p&gt;被弱引用关联的对象一定会被回收，也就是说它只能存活到下一次垃圾回收发生之前。&lt;/p&gt;
&lt;p&gt;使用 WeakReference 类来创建弱引用。&lt;/p&gt;
&lt;h4 id=&#34;224-虚引用&#34;&gt;2.2.4 虚引用&lt;/h4&gt;
&lt;p&gt;又称为幽灵引用或者幻影引用，一个对象是否有虚引用的存在，不会对其生存时间造成影响，也无法通过虚引用得到一个对象。&lt;/p&gt;
&lt;p&gt;为一个对象设置虚引用的唯一目的是能在这个对象被回收时收到一个系统通知。&lt;/p&gt;
&lt;p&gt;使用 PhantomReference 来创建虚引用。&lt;/p&gt;
&lt;h3 id=&#34;23-垃圾收集算法&#34;&gt;2.3 垃圾收集算法&lt;/h3&gt;
&lt;h4 id=&#34;231-标记---清除&#34;&gt;2.3.1 标记 - 清除&lt;/h4&gt;
&lt;p&gt;在标记阶段，程序会检查每个对象是否为活动对象，如果是活动对象，则程序会在对象头部打上标记。&lt;/p&gt;
&lt;p&gt;在清除阶段，会进行对象回收并取消标志位，另外，还会判断回收后的分块与前一个空闲分块是否连续，若连续，会合并这两个分块。回收对象就是把对象作为分块，连接到被称为 “空闲链表” 的单向链表，之后进行分配时只需要遍历这个空闲链表，就可以找到分块。&lt;/p&gt;
&lt;p&gt;在分配时，程序会搜索空闲链表寻找空间大于等于新对象大小 size 的块 block。如果它找到的块等于 size，会直接返回这个分块；如果找到的块大于 size，会将块分割成大小为 size 与 (block - size) 的两部分，返回大小为 size 的分块，并把大小为 (block - size) 的块返回给空闲链表。&lt;/p&gt;
&lt;p&gt;不足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标记和清除过程效率都不高；&lt;/li&gt;
&lt;li&gt;会产生大量不连续的内存碎片，导致无法给大对象分配内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/005b481b-502b-4e3f-985d-d043c2b330aa.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h4 id=&#34;232-标记-整理&#34;&gt;2.3.2 标记-整理&lt;/h4&gt;
&lt;p&gt;让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。&lt;/p&gt;
&lt;p&gt;优点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不会产生内存碎片&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不足:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要移动大量对象，处理效率比较低。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/ccd773a5-ad38-4022-895c-7ac318f31437.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h4 id=&#34;233-复制&#34;&gt;2.3.3 复制&lt;/h4&gt;
&lt;p&gt;将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。&lt;/p&gt;
&lt;p&gt;主要不足是只使用了内存的一半。&lt;/p&gt;
&lt;p&gt;现在的商业虚拟机都采用这种收集算法回收新生代，但是并不是划分为大小相等的两块，而是一块较大的 Eden 空间和两块较小的 Survivor 空间，每次使用 Eden 和其中一块 Survivor。在回收时，将 Eden 和 Survivor 中还存活着的对象全部复制到另一块 Survivor 上，最后清理 Eden 和使用过的那一块 Survivor。&lt;/p&gt;
&lt;p&gt;HotSpot 虚拟机的 Eden 和 Survivor 大小比例默认为 8:1，保证了内存的利用率达到 90%。如果每次回收有多于 10% 的对象存活，那么一块 Survivor 就不够用了，此时需要依赖于老年代进行空间分配担保，也就是借用老年代的空间存储放不下的对象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/b2b77b9e-958c-4016-8ae5-9c6edd83871e.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h4 id=&#34;234-分代收集&#34;&gt;2.3.4 分代收集&lt;/h4&gt;
&lt;p&gt;现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。&lt;/p&gt;
&lt;p&gt;一般将堆分为新生代和老年代。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新生代使用：复制算法&lt;/li&gt;
&lt;li&gt;老年代使用：标记 - 清除 或者 标记 - 整理 算法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;24-垃圾收集器&#34;&gt;2.4 垃圾收集器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/c625baa0-dde6-449e-93df-c3a67f2f430f.jpg&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;以上是 HotSpot 虚拟机中的 7 个垃圾收集器，连线表示垃圾收集器可以配合使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单线程与多线程：单线程指的是垃圾收集器只使用一个线程，而多线程使用多个线程；&lt;/li&gt;
&lt;li&gt;串行与并行：串行指的是垃圾收集器与用户程序交替执行，这意味着在执行垃圾收集的时候需要停顿用户程序；并行指的是垃圾收集器和用户程序同时执行。除了 CMS 和 G1 之外，其它垃圾收集器都是以串行的方式执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-内存分配与回收策略&#34;&gt;3 内存分配与回收策略&lt;/h2&gt;
&lt;h3 id=&#34;31-minor-gc和full-gc&#34;&gt;3.1 Minor GC和Full GC&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Minor GC：回收新生代，因为新生代对象存活时间很短，因此 Minor GC 会频繁执行，执行的速度一般也会比较快。&lt;/li&gt;
&lt;li&gt;Full GC：回收老年代和新生代，老年代对象其存活时间长，因此 Full GC 很少执行，执行速度会比 Minor GC 慢很多。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-内存分配策略&#34;&gt;3.2 内存分配策略&lt;/h3&gt;
&lt;h4 id=&#34;321-对象优先在-eden-分配&#34;&gt;3.2.1. 对象优先在 Eden 分配&lt;/h4&gt;
&lt;p&gt;大多数情况下，对象在新生代 Eden 上分配，当 Eden 空间不够时，发起 Minor GC。&lt;/p&gt;
&lt;h4 id=&#34;322-大对象直接进入老年代&#34;&gt;3.2.2. 大对象直接进入老年代&lt;/h4&gt;
&lt;p&gt;大对象是指需要连续内存空间的对象，最典型的大对象是那种很长的字符串以及数组。&lt;/p&gt;
&lt;p&gt;经常出现大对象会提前触发垃圾收集以获取足够的连续空间分配给大对象。&lt;/p&gt;
&lt;p&gt;-XX:PretenureSizeThreshold，大于此值的对象直接在老年代分配，避免在 Eden 和 Survivor 之间的大量内存复制。&lt;/p&gt;
&lt;h4 id=&#34;323-长期存活的对象进入老年代&#34;&gt;3.2.3. 长期存活的对象进入老年代&lt;/h4&gt;
&lt;p&gt;为对象定义年龄计数器，对象在 Eden 出生并经过 Minor GC 依然存活，将移动到 Survivor 中，年龄就增加 1 岁，增加到一定年龄则移动到老年代中。&lt;/p&gt;
&lt;p&gt;-XX:MaxTenuringThreshold 用来定义年龄的阈值。&lt;/p&gt;
&lt;h4 id=&#34;324-动态对象年龄判定&#34;&gt;3.2.4. 动态对象年龄判定&lt;/h4&gt;
&lt;p&gt;虚拟机并不是永远要求对象的年龄必须达到 MaxTenuringThreshold 才能晋升老年代，如果在 Survivor 中相同年龄所有对象大小的总和大于 Survivor 空间的一半，则年龄大于或等于该年龄的对象可以直接进入老年代，无需等到 MaxTenuringThreshold 中要求的年龄。&lt;/p&gt;
&lt;h4 id=&#34;325-空间分配担保&#34;&gt;3.2.5. 空间分配担保&lt;/h4&gt;
&lt;p&gt;在发生 Minor GC 之前，虚拟机先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果条件成立的话，那么 Minor GC 可以确认是安全的。&lt;/p&gt;
&lt;p&gt;如果不成立的话虚拟机会查看 HandlePromotionFailure 的值是否允许担保失败，如果允许那么就会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次 Minor GC；如果小于，或者 HandlePromotionFailure 的值不允许冒险，那么就要进行一次 Full GC。&lt;/p&gt;
&lt;h3 id=&#34;33-full-gc触发条件&#34;&gt;3.3 Full GC触发条件&lt;/h3&gt;
&lt;p&gt;对于 Minor GC，其触发条件非常简单，当 Eden 空间满时，就将触发一次 Minor GC。而 Full GC 则相对复杂，有以下条件：&lt;/p&gt;
&lt;h4 id=&#34;331-调用-systemgc&#34;&gt;3.3.1. 调用 System.gc()&lt;/h4&gt;
&lt;p&gt;只是建议虚拟机执行 Full GC，但是虚拟机不一定真正去执行。不建议使用这种方式，而是让虚拟机管理内存。&lt;/p&gt;
&lt;h4 id=&#34;332-老年代空间不足&#34;&gt;3.3.2. 老年代空间不足&lt;/h4&gt;
&lt;p&gt;老年代空间不足的常见场景为前文所讲的大对象直接进入老年代、长期存活的对象进入老年代等。&lt;/p&gt;
&lt;p&gt;为了避免以上原因引起的 Full GC，应当尽量不要创建过大的对象以及数组。除此之外，可以通过 -Xmn 虚拟机参数调大新生代的大小，让对象尽量在新生代被回收掉，不进入老年代。还可以通过 -XX:MaxTenuringThreshold 调大对象进入老年代的年龄，让对象在新生代多存活一段时间。&lt;/p&gt;
&lt;h4 id=&#34;333-空间分配担保失败&#34;&gt;3.3.3. 空间分配担保失败&lt;/h4&gt;
&lt;p&gt;使用复制算法的 Minor GC 需要老年代的内存空间作担保，如果担保失败会执行一次 Full GC。具体内容请参考上面的第 5 小节。&lt;/p&gt;
&lt;h4 id=&#34;334-jdk-17-及以前的永久代空间不足&#34;&gt;3.3.4. JDK 1.7 及以前的永久代空间不足&lt;/h4&gt;
&lt;p&gt;在 JDK 1.7 及以前，HotSpot 虚拟机中的方法区是用永久代实现的，永久代中存放的为一些 Class 的信息、常量、静态变量等数据。&lt;/p&gt;
&lt;p&gt;当系统中要加载的类、反射的类和调用的方法较多时，永久代可能会被占满，在未配置为采用 CMS GC 的情况下也会执行 Full GC。如果经过 Full GC 仍然回收不了，那么虚拟机会抛出 java.lang.OutOfMemoryError。&lt;/p&gt;
&lt;p&gt;为避免以上原因引起的 Full GC，可采用的方法为增大永久代空间或转为使用 CMS GC。&lt;/p&gt;
&lt;h4 id=&#34;335-concurrent-mode-failure&#34;&gt;3.3.5. Concurrent Mode Failure&lt;/h4&gt;
&lt;p&gt;执行 CMS GC 的过程中同时有对象要放入老年代，而此时老年代空间不足（可能是 GC 过程中浮动垃圾过多导致暂时性的空间不足），便会报 Concurrent Mode Failure 错误，并触发 Full GC。&lt;/p&gt;
&lt;h2 id=&#34;4-类加载机制&#34;&gt;4 类加载机制&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;类是在运行期间第一次使用时动态加载的，而不是一次性加载所有类。因为如果一次性加载，那么会占用很多的内存。&lt;/p&gt;
&lt;h3 id=&#34;41-类的生命周期&#34;&gt;4.1 类的生命周期&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/335fe19c-4a76-45ab-9320-88c90d6a0d7e.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;包括以下 7 个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;加载（Loading）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;验证（Verification）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;准备（Preparation）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解析（Resolution）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;初始化（Initialization）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用（Using）&lt;/li&gt;
&lt;li&gt;卸载（Unloading）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;42-类加载过程&#34;&gt;4.2 类加载过程&lt;/h3&gt;
&lt;p&gt;包含了加载、验证、准备、解析和初始化这 5 个阶段。&lt;/p&gt;
&lt;h4 id=&#34;421-加载&#34;&gt;4.2.1. 加载&lt;/h4&gt;
&lt;p&gt;加载是类加载的一个阶段，注意不要混淆。&lt;/p&gt;
&lt;p&gt;加载过程完成以下三件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过类的完全限定名称获取定义该类的二进制字节流。&lt;/li&gt;
&lt;li&gt;将该字节流表示的静态存储结构转换为方法区的运行时存储结构。&lt;/li&gt;
&lt;li&gt;在内存中生成一个代表该类的 Class 对象，作为方法区中该类各种数据的访问入口。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中二进制字节流可以从以下方式中获取：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从 ZIP 包读取，成为 JAR、EAR、WAR 格式的基础。&lt;/li&gt;
&lt;li&gt;从网络中获取，最典型的应用是 Applet。&lt;/li&gt;
&lt;li&gt;运行时计算生成，例如动态代理技术，在 java.lang.reflect.Proxy 使用 ProxyGenerator.generateProxyClass 的代理类的二进制字节流。&lt;/li&gt;
&lt;li&gt;由其他文件生成，例如由 JSP 文件生成对应的 Class 类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;422-验证&#34;&gt;4.2.2. 验证&lt;/h4&gt;
&lt;p&gt;确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。&lt;/p&gt;
&lt;h4 id=&#34;423-准备&#34;&gt;4.2.3. 准备&lt;/h4&gt;
&lt;p&gt;类变量是被 static 修饰的变量，准备阶段为类变量分配内存并设置初始值，使用的是方法区的内存。&lt;/p&gt;
&lt;p&gt;实例变量不会在这阶段分配内存，它会在对象实例化时随着对象一起被分配在堆中。应该注意到，实例化不是类加载的一个过程，类加载发生在所有实例化操作之前，并且类加载只进行一次，实例化可以进行多次。&lt;/p&gt;
&lt;p&gt;初始值一般为 0 值，例如下面的类变量 value 被初始化为 0 而不是 123。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果类变量是常量，那么它将初始化为表达式所定义的值而不是 0。例如下面的常量 value 被初始化为 123 而不是 0。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;424-解析&#34;&gt;4.2.4. 解析&lt;/h4&gt;
&lt;p&gt;将常量池的符号引用替换为直接引用的过程。&lt;/p&gt;
&lt;p&gt;其中解析过程在某些情况下可以在初始化阶段之后再开始，这是为了支持 Java 的动态绑定。&lt;/p&gt;
&lt;h4 id=&#34;425-初始化&#34;&gt;4.2.5. 初始化&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;初始化阶段才真正开始执行类中定义的 Java 程序代码。初始化阶段是虚拟机执行类构造器 &amp;lt;clinit&amp;gt;() 方法的过程。在准备阶段，类变量已经赋过一次系统要求的初始值，而在初始化阶段，根据程序员通过程序制定的主观计划去初始化类变量和其它资源。&lt;/p&gt;
&lt;p&gt;&amp;lt;clinit&amp;gt;() 是由编译器自动收集类中所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序决定。特别注意的是，静态语句块只能访问到定义在它之前的类变量，定义在它之后的类变量只能赋值，不能访问。例如以下代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;// 给变量赋值可以正常编译通过
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 这句编译器会提示“非法向前引用”
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于父类的 &amp;lt;clinit&amp;gt;() 方法先执行，也就意味着父类中定义的静态语句块的执行要优先于子类。例如以下代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Parent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Parent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Sub&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 2
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接口中不可以使用静态语句块，但仍然有类变量初始化的赋值操作，因此接口与类一样都会生成 &amp;lt;clinit&amp;gt;() 方法。但接口与类不同的是，执行接口的 &amp;lt;clinit&amp;gt;() 方法不需要先执行父接口的 &amp;lt;clinit&amp;gt;() 方法。只有当父接口中定义的变量使用时，父接口才会初始化。另外，接口的实现类在初始化时也一样不会执行接口的 &amp;lt;clinit&amp;gt;() 方法。&lt;/p&gt;
&lt;p&gt;虚拟机会保证一个类的 &amp;lt;clinit&amp;gt;() 方法在多线程环境下被正确的加锁和同步，如果多个线程同时初始化一个类，只会有一个线程执行这个类的 &amp;lt;clinit&amp;gt;() 方法，其它线程都会阻塞等待，直到活动线程执行 &amp;lt;clinit&amp;gt;() 方法完毕。如果在一个类的 &amp;lt;clinit&amp;gt;() 方法中有耗时的操作，就可能造成多个线程阻塞，在实际过程中此种阻塞很隐蔽。&lt;/p&gt;
&lt;h3 id=&#34;43-类初始化时机&#34;&gt;4.3 类初始化时机&lt;/h3&gt;
&lt;h4 id=&#34;431-主动引用&#34;&gt;4.3.1. 主动引用&lt;/h4&gt;
&lt;p&gt;虚拟机规范中并没有强制约束何时进行加载，但是规范严格规定了有且只有下列五种情况必须对类进行初始化（加载、验证、准备都会随之发生）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类没有进行过初始化，则必须先触发其初始化。最常见的生成这 4 条指令的场景是：使用 new 关键字实例化对象的时候；读取或设置一个类的静态字段（被 final 修饰、已在编译期把结果放入常量池的静态字段除外）的时候；以及调用一个类的静态方法的时候。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 java.lang.reflect 包的方法对类进行反射调用的时候，如果类没有进行初始化，则需要先触发其初始化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当虚拟机启动时，用户需要指定一个要执行的主类（包含 main() 方法的那个类），虚拟机会先初始化这个主类；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当使用 JDK 1.7 的动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果为 REF_getStatic, REF_putStatic, REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;432-被动引用&#34;&gt;4.3.2. 被动引用&lt;/h4&gt;
&lt;p&gt;以上 5 种场景中的行为称为对一个类进行主动引用。除此之外，所有引用类的方式都不会触发初始化，称为被动引用。被动引用的常见例子包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过子类引用父类的静态字段，不会导致子类初始化。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SubClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// value 字段在 SuperClass 中定义
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;通过数组定义来引用类，不会触发此类的初始化。该过程会对数组类进行初始化，数组类是一个由虚拟机自动生成的、直接继承自 Object 的子类，其中包含了数组的属性和方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;SuperClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sca&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SuperClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;常量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ConstClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;HELLOWORLD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;44-类与类加载器&#34;&gt;4.4 类与类加载器&lt;/h3&gt;
&lt;p&gt;两个类相等，需要类本身相等，并且使用同一个类加载器进行加载。这是因为每一个类加载器都拥有一个独立的类名称空间。&lt;/p&gt;
&lt;p&gt;这里的相等，包括类的 Class 对象的 equals() 方法、isAssignableFrom() 方法、isInstance() 方法的返回结果为 true，也包括使用 instanceof 关键字做对象所属关系判定结果为 true。&lt;/p&gt;
&lt;h3 id=&#34;45-类加载器分类&#34;&gt;4.5 类加载器分类&lt;/h3&gt;
&lt;p&gt;从 Java 虚拟机的角度来讲，只存在以下两种不同的类加载器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;启动类加载器（Bootstrap ClassLoader），使用 C++ 实现，是虚拟机自身的一部分；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有其它类的加载器，使用 Java 实现，独立于虚拟机，继承自抽象类 java.lang.ClassLoader。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从 Java 开发人员的角度看，类加载器可以划分得更细致一些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;启动类加载器（Bootstrap ClassLoader）此类加载器负责将存放在 &amp;lt;JRE_HOME&amp;gt;\lib 目录中的，或者被 -Xbootclasspath 参数所指定的路径中的，并且是虚拟机识别的（仅按照文件名识别，如 rt.jar，名字不符合的类库即使放在 lib 目录中也不会被加载）类库加载到虚拟机内存中。启动类加载器无法被 Java 程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给启动类加载器，直接使用 null 代替即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扩展类加载器（Extension ClassLoader）这个类加载器是由 ExtClassLoader（sun.misc.Launcher$ExtClassLoader）实现的。它负责将 &amp;lt;JAVA_HOME&amp;gt;/lib/ext 或者被 java.ext.dir 系统变量所指定路径中的所有类库加载到内存中，开发者可以直接使用扩展类加载器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用程序类加载器（Application ClassLoader）这个类加载器是由 AppClassLoader（sun.misc.Launcher$AppClassLoader）实现的。由于这个类加载器是 ClassLoader 中的 getSystemClassLoader() 方法的返回值，因此一般称为系统类加载器。它负责加载用户类路径（ClassPath）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;46-双亲委派模型&#34;&gt;4.6 双亲委派模型&lt;/h3&gt;
&lt;p&gt;应用程序是由三种类加载器互相配合从而实现类加载，除此之外还可以加入自己定义的类加载器。&lt;/p&gt;
&lt;p&gt;下图展示了类加载器之间的层次关系，称为双亲委派模型（Parents Delegation Model）。该模型要求除了顶层的启动类加载器外，其它的类加载器都要有自己的父类加载器。这里的父子关系一般通过组合关系（Composition）来实现，而不是继承关系（Inheritance）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/0dd2d40a-5b2b-4d45-b176-e75a4cd4bdbf.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h4 id=&#34;461-工作过程&#34;&gt;4.6.1. 工作过程&lt;/h4&gt;
&lt;p&gt;一个类加载器首先将类加载请求转发到父类加载器，只有当父类加载器无法完成时才尝试自己加载。&lt;/p&gt;
&lt;h4 id=&#34;462-好处&#34;&gt;4.6.2. 好处&lt;/h4&gt;
&lt;p&gt;使得 Java 类随着它的类加载器一起具有一种带有优先级的层次关系，从而使得基础类得到统一。&lt;/p&gt;
&lt;p&gt;例如 java.lang.Object 存放在 rt.jar 中，如果编写另外一个 java.lang.Object 并放到 ClassPath 中，程序可以编译通过。由于双亲委派模型的存在，所以在 rt.jar 中的 Object 比在 ClassPath 中的 Object 优先级更高，这是因为 rt.jar 中的 Object 使用的是启动类加载器，而 ClassPath 中的 Object 使用的是应用程序类加载器。rt.jar 中的 Object 优先级更高，那么程序中所有的 Object 都是这个 Object。&lt;/p&gt;
&lt;h4 id=&#34;463-实现&#34;&gt;4.6.3. 实现&lt;/h4&gt;
&lt;p&gt;以下是抽象类 java.lang.ClassLoader 的代码片段，其中的 loadClass() 方法运行过程如下：先检查类是否已经加载过，如果没有则让父类加载器去加载。当父类加载器加载失败时抛出 ClassNotFoundException，此时尝试自己去加载。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ClassLoader&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// The parent class loader for delegation
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ClassLoader&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loadClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loadClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loadClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;synchronized&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getClassLoadingLock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;// First, check if the class has already been loaded
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;Class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;findLoadedClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;loadClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
                    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;findBootstrapClassOrNull&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
                    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;c1&#34;&gt;// ClassNotFoundException thrown if class not found
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                    &lt;span class=&#34;c1&#34;&gt;// from the non-null parent class loader
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;c1&#34;&gt;// If still not found, then invoke findClass in order
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                    &lt;span class=&#34;c1&#34;&gt;// to find the class.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                    &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;findClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;resolveClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;findClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ClassNotFoundException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;47-自定义类加载器实现&#34;&gt;4.7 自定义类加载器实现&lt;/h3&gt;
&lt;p&gt;以下代码中的 FileSystemClassLoader 是自定义类加载器，继承自 java.lang.ClassLoader，用于加载文件系统上的类。它首先根据类的全名在文件系统上查找类的字节代码文件（.class 文件），然后读取该文件内容，最后通过 defineClass() 方法来把这些字节代码转换成 java.lang.Class 类的实例。&lt;/p&gt;
&lt;p&gt;java.lang.ClassLoader 的 loadClass() 实现了双亲委派模型的逻辑，自定义类加载器一般不去重写它，但是需要重写 findClass() 方法。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文转载自：&lt;a class=&#34;link&#34; href=&#34;https://github.com/CyC2018/CS-Notes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/CyC2018/CS-Notes&lt;/a&gt;，用于个人复习。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Socket与IO模型</title>
        <link>https://cuterwrite.top/p/io-model/</link>
        <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/io-model/</guid>
        <description>&lt;img src="https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/20210503/cheetah-3749168_1920.4pgxzkp625g0.jpg" alt="Featured image of post Socket与IO模型" /&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;  &lt;em&gt;generated with &lt;a class=&#34;link&#34; href=&#34;https://github.com/thlorenz/doctoc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DocToc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#socket%E4%B8%8Eio%E6%A8%A1%E5%9E%8B&#34; &gt;Socket与IO模型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-io%E6%A8%A1%E5%9E%8B&#34; &gt;1 IO模型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#11-%E9%98%BB%E5%A1%9E%E5%BC%8Fio&#34; &gt;1.1 阻塞式IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#12-%E9%9D%9E%E9%98%BB%E5%A1%9E%E5%BC%8Fio&#34; &gt;1.2 非阻塞式IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#13-io%E5%A4%8D%E7%94%A8&#34; &gt;1.3 IO复用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#14-%E4%BF%A1%E5%8F%B7%E9%A9%B1%E5%8A%A8io&#34; &gt;1.4 信号驱动IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#15-%E5%BC%82%E6%AD%A5io&#34; &gt;1.5 异步IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#16-io%E6%A8%A1%E5%9E%8B%E5%AF%B9%E6%AF%94&#34; &gt;1.6 IO模型对比&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-io%E5%A4%8D%E7%94%A8&#34; &gt;2 IO复用&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#21-select&#34; &gt;2.1 select&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#22-poll&#34; &gt;2.2 poll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#23-epoll&#34; &gt;2.3 epoll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#24-lt%E4%B8%8Eet&#34; &gt;2.4 LT与ET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#25-selectpollepoll%E5%AF%B9%E6%AF%94&#34; &gt;2.5 select、poll、epoll对比&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;socket与io模型&#34;&gt;Socket与IO模型&lt;/h1&gt;
&lt;h2 id=&#34;1-io模型&#34;&gt;1 IO模型&lt;/h2&gt;
&lt;h3 id=&#34;11-阻塞式io&#34;&gt;1.1 阻塞式IO&lt;/h3&gt;
&lt;p&gt;应用进程被阻塞，直到&lt;strong&gt;数据从内核缓冲区复制到应用进程缓冲区中&lt;/strong&gt;才返回。&lt;/p&gt;
&lt;p&gt;应该注意到，在阻塞的过程中，其它应用进程还可以执行，因此阻塞不意味着整个操作系统都被阻塞。因为其它应用进程还可以执行，所以不消耗 CPU 时间，这种模型的 CPU 利用率会比较高。&lt;/p&gt;
&lt;h3 id=&#34;12-非阻塞式io&#34;&gt;1.2 非阻塞式IO&lt;/h3&gt;
&lt;p&gt;应用进程执行系统调用之后，内核返回一个错误码。应用进程&lt;strong&gt;可以继续执行&lt;/strong&gt;，但是需要不断的执行系统调用来获知 I/O 是否完成，这种方式称为&lt;strong&gt;轮询&lt;/strong&gt;（polling）。&lt;/p&gt;
&lt;p&gt;由于 CPU 要处理更多的系统调用，因此这种模型的 CPU 利用率比较低。&lt;/p&gt;
&lt;h3 id=&#34;13-io复用&#34;&gt;1.3 IO复用&lt;/h3&gt;
&lt;p&gt;使用 select 或者 poll 等待数据，并且可以等待多个套接字中的任何一个变为可读。这一过程会被阻塞，当某一个套接字可读时返回，之后再使用 recvfrom 把数据从内核复制到进程中。&lt;/p&gt;
&lt;p&gt;它可以让单个进程具有处理多个 I/O 事件的能力。又被称为 Event Driven I/O，即事件驱动 I/O。&lt;/p&gt;
&lt;p&gt;如果一个 Web 服务器没有 I/O 复用，那么每一个 Socket 连接都需要创建一个线程去处理。如果同时有几万个连接，那么就需要创建相同数量的线程。相比于多进程和多线程技术，I/O 复用&lt;strong&gt;不需要进程线程创建和切换的开销&lt;/strong&gt;，系统开销更小。&lt;/p&gt;
&lt;h3 id=&#34;14-信号驱动io&#34;&gt;1.4 信号驱动IO&lt;/h3&gt;
&lt;p&gt;应用进程使用 sigaction 系统调用，内核立即返回，应用进程&lt;strong&gt;可以继续执行&lt;/strong&gt;，也就是说等待数据阶段应用进程是非阻塞的。&lt;strong&gt;内核在数据到达时&lt;/strong&gt;向应用进程&lt;strong&gt;发送 SIGIO 信号&lt;/strong&gt;，应用进程收到之后在信号处理程序中调用 recvfrom 将数据从内核复制到应用进程中。&lt;/p&gt;
&lt;p&gt;相比于非阻塞式 I/O 的轮询方式，信号驱动 I/O 的 CPU 利用率更高。&lt;/p&gt;
&lt;h3 id=&#34;15-异步io&#34;&gt;1.5 异步IO&lt;/h3&gt;
&lt;p&gt;应用进程执行 aio_read 系统调用会立即返回，应用进程可以继续执行，不会被阻塞，内核会在所有操作完成之后向应用进程发送信号。&lt;/p&gt;
&lt;p&gt;异步 I/O 与信号驱动 I/O 的区别在于，异步 I/O 的信号是通知应用进程 I/O 完成，而信号驱动 I/O 的信号是通知应用进程可以开始 I/O。&lt;/p&gt;
&lt;h3 id=&#34;16-io模型对比&#34;&gt;1.6 IO模型对比&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;同步IO：将数据从内核缓冲区复制到应用进程缓冲区的阶段（第二阶段），应用进程会阻塞。&lt;/li&gt;
&lt;li&gt;异步IO：第二阶段应用进程不会阻塞。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同步IO包括：BIO、NIO、IO复用和信号驱动IO，它们的区别在第一阶段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BIO会直接阻塞应用进程，直到数据从内核缓冲区复制到应用进程缓冲区。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NIO采用轮询方式判断IO是否完成，避免阻塞。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信号驱动IO采用SIGIO信号方式，避免阻塞&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IO多路复用使用select/poll/epoll等待描述符成为就绪状态，避免阻塞。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，NIO、信号驱动IO和异步IO在第一阶段不会阻塞。&lt;/p&gt;
&lt;h2 id=&#34;2-io复用&#34;&gt;2 IO复用&lt;/h2&gt;
&lt;h3 id=&#34;21-select&#34;&gt;2.1 select&lt;/h3&gt;
&lt;p&gt;select 允许应用程序监视一组文件描述符，等待一个或者多个描述符成为就绪状态，从而完成 I/O 操作。&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单个进程所打开的FD是有限制的，通过FD_SETSIZE设置，默认1024&lt;/li&gt;
&lt;li&gt;每次调用select，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大&lt;/li&gt;
&lt;li&gt;对socket扫描时是线性扫描（对所有的fds遍历扫描），采用轮询的方法，效率较低（高并发时）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22-poll&#34;&gt;2.2 poll&lt;/h3&gt;
&lt;p&gt;poll与select相比，只是没有fd的限制，其它基本一样&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每次调用poll，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大&lt;/li&gt;
&lt;li&gt;对socket扫描时是线性扫描，采用轮询的方法，效率较低（高并发时）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;23-epoll&#34;&gt;2.3 epoll&lt;/h3&gt;
&lt;p&gt;select 和 poll 速度都比较慢，每次调用都需要将全部描述符从应用进程缓冲区复制到内核缓冲区。&lt;/p&gt;
&lt;p&gt;epoll 只需要将描述符从进程缓冲区向内核缓冲区拷贝一次，并且进程不需要通过轮询来获得事件完成的描述符。&lt;/p&gt;
&lt;p&gt;缺点：epoll只能工作在linux下&lt;/p&gt;
&lt;h3 id=&#34;24-lt与et&#34;&gt;2.4 LT与ET&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;LT：LT模式下，只要这个fd还有数据可读，每次 epoll_wait都会返回它的事件，提醒用户程序去操作。&lt;/li&gt;
&lt;li&gt;ET：ET模式下，它只会提示一次，直到下次再有数据流入之前都不会再提示了，无论fd中是否还有数据可读。所以在ET模式下，read一个fd的时候一定要把它的buffer读完，或者遇到EAGAIN错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;25-selectpollepoll对比&#34;&gt;2.5 select、poll、epoll对比&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;select&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;poll&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;epoll&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;数据结构&lt;/td&gt;
&lt;td&gt;bitmap&lt;/td&gt;
&lt;td&gt;数组&lt;/td&gt;
&lt;td&gt;红黑树&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;最大连接数&lt;/td&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;td&gt;无上限&lt;/td&gt;
&lt;td&gt;无上限&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fd拷贝&lt;/td&gt;
&lt;td&gt;每次调用select拷贝&lt;/td&gt;
&lt;td&gt;每次调用poll拷贝&lt;/td&gt;
&lt;td&gt;fd首次调用epoll_ctl拷贝，每次调用epoll_wait不拷贝&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;工作效率&lt;/td&gt;
&lt;td&gt;轮询：O(n)&lt;/td&gt;
&lt;td&gt;轮询：O(n)&lt;/td&gt;
&lt;td&gt;回调：O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;本文转载自：&lt;a class=&#34;link&#34; href=&#34;https://github.com/CyC2018/CS-Notes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/CyC2018/CS-Notes&lt;/a&gt;，用于个人复习。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>计算机基础知识点总结（数据库系统 &#43; MySQL &#43; Redis）</title>
        <link>https://cuterwrite.top/p/database-system/</link>
        <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/database-system/</guid>
        <description>&lt;img src="https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/20210503/windmills-5614160_1920.7f194ofsigg0.jpg" alt="Featured image of post 计算机基础知识点总结（数据库系统 &#43; MySQL &#43; Redis）" /&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;  &lt;em&gt;generated with &lt;a class=&#34;link&#34; href=&#34;https://github.com/thlorenz/doctoc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DocToc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E4%B8%80%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86&#34; &gt;一、数据库系统原理&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-%E4%BA%8B%E5%8A%A1&#34; &gt;1 事务&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#11-%E6%A6%82%E5%BF%B5&#34; &gt;1.1 概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#12-acid&#34; &gt;1.2 ACID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#13-autocommit&#34; &gt;1.3 AUTOCOMMIT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%E5%B9%B6%E5%8F%91%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98&#34; &gt;2 并发一致性问题&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#21-%E4%B8%A2%E5%A4%B1%E4%BF%AE%E6%94%B9&#34; &gt;2.1 丢失修改&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#22-%E8%AF%BB%E8%84%8F%E6%95%B0%E6%8D%AE&#34; &gt;2.2 读脏数据&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#23-%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB&#34; &gt;2.3 不可重复读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#24-%E5%B9%BB%E5%BD%B1%E8%AF%BB&#34; &gt;2.4 幻影读&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-%E5%B0%81%E9%94%81&#34; &gt;3 封锁&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#31-%E5%B0%81%E9%94%81%E7%B2%92%E5%BA%A6&#34; &gt;3.1 封锁粒度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#32-%E5%B0%81%E9%94%81%E7%B1%BB%E5%9E%8B&#34; &gt;3.2 封锁类型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#321-%E8%AF%BB%E5%86%99%E9%94%81&#34; &gt;3.2.1 读写锁&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#322-%E6%84%8F%E5%90%91%E9%94%81&#34; &gt;3.2.2 意向锁&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#33-%E5%B0%81%E9%94%81%E5%8D%8F%E8%AE%AE&#34; &gt;3.3 封锁协议&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#331-%E4%B8%89%E7%BA%A7%E5%B0%81%E9%94%81%E5%8D%8F%E8%AE%AE&#34; &gt;3.3.1 三级封锁协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#332-%E4%BA%8C%E6%AE%B5%E9%94%81%E5%8D%8F%E8%AE%AE&#34; &gt;3.3.2 二段锁协议&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#34-mysql%E9%9A%90%E5%BC%8F%E4%B8%8E%E6%98%BE%E7%A4%BA%E9%94%81%E5%AE%9A&#34; &gt;3.4 MySQL隐式与显示锁定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB&#34; &gt;4 隔离级别&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#41-%E6%9C%AA%E6%8F%90%E4%BA%A4%E8%AF%BB&#34; &gt;4.1 未提交读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#42-%E6%8F%90%E4%BA%A4%E8%AF%BB&#34; &gt;4.2 提交读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#43-%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB&#34; &gt;4.3 可重复读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#44-%E5%8F%AF%E4%B8%B2%E8%A1%8C%E5%8C%96&#34; &gt;4.4 可串行化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5-%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6&#34; &gt;5 多版本并发控制&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#51-%E5%9F%BA%E6%9C%AC%E6%80%9D%E6%83%B3&#34; &gt;5.1 基本思想&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#52-%E7%89%88%E6%9C%AC%E5%8F%B7&#34; &gt;5.2 版本号&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#53-undo%E6%97%A5%E5%BF%97&#34; &gt;5.3 Undo日志&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#54-readview&#34; &gt;5.4 ReadView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#55-%E5%BF%AB%E7%85%A7%E8%AF%BB%E4%B8%8E%E5%BD%93%E5%89%8D%E8%AF%BB&#34; &gt;5.5 快照读与当前读&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#551-%E5%BF%AB%E7%85%A7%E8%AF%BB&#34; &gt;5.5.1 快照读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#552-%E5%BD%93%E5%89%8D%E8%AF%BB&#34; &gt;5.5.2 当前读&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6-next-key-locks&#34; &gt;6 Next-Key Locks&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#61-record-locks&#34; &gt;6.1 Record Locks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#62-gap-locks&#34; &gt;6.2 Gap Locks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#63-next-key-locks&#34; &gt;6.3 Next-Key Locks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E4%BA%8Cmysql&#34; &gt;二、MySQL&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-%E7%B4%A2%E5%BC%95&#34; &gt;1 索引&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#11-b%E6%A0%91%E5%8E%9F%E7%90%86&#34; &gt;1.1 B+树原理&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#111-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&#34; &gt;1.1.1 数据结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#112-%E6%93%8D%E4%BD%9C&#34; &gt;1.1.2. 操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#113-%E4%B8%8E%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E6%AF%94%E8%BE%83&#34; &gt;1.1.3 与红黑树的比较&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#12-mysql%E7%B4%A2%E5%BC%95&#34; &gt;1.2 MySQL索引&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#121-b%E6%A0%91%E7%B4%A2%E5%BC%95&#34; &gt;1.2.1 B+树索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#122-%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95&#34; &gt;1.2.2 哈希索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#123-%E5%85%A8%E6%96%87%E7%B4%A2%E5%BC%95&#34; &gt;1.2.3 全文索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#124-%E7%A9%BA%E9%97%B4%E6%95%B0%E6%8D%AE%E7%B4%A2%E5%BC%95&#34; &gt;1.2.4 空间数据索引&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#13-%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96&#34; &gt;1.3 索引优化&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#131-%E7%8B%AC%E7%AB%8B%E7%9A%84%E5%88%97&#34; &gt;1.3.1. 独立的列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#132-%E5%A4%9A%E5%88%97%E7%B4%A2%E5%BC%95&#34; &gt;1.3.2. 多列索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#133-%E7%B4%A2%E5%BC%95%E5%88%97%E7%9A%84%E9%A1%BA%E5%BA%8F&#34; &gt;1.3.3. 索引列的顺序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#134-%E5%89%8D%E7%BC%80%E7%B4%A2%E5%BC%95&#34; &gt;1.3.4. 前缀索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#135-%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95&#34; &gt;1.3.5. 覆盖索引&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#14-%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BC%98%E7%82%B9&#34; &gt;1.4 索引的优点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#15-%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%BF%E7%94%A8%E6%9D%A1%E4%BB%B6&#34; &gt;1.5 索引的使用条件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#16-mysql%E9%87%8C%E7%9A%84%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B&#34; &gt;1.6 MySQL里的索引类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#17-%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E5%92%8C%E9%9D%9E%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95&#34; &gt;1.7 聚簇索引和非聚簇索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#18-%E5%9B%9E%E8%A1%A8%E6%9F%A5%E8%AF%A2&#34; &gt;1.8 回表查询&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96&#34; &gt;2 查询性能优化&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#21-explain&#34; &gt;2.1 Explain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#22-%E4%BC%98%E5%8C%96%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE&#34; &gt;2.2 优化数据访问&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#221-%E5%87%8F%E5%B0%91%E8%AF%B7%E6%B1%82%E7%9A%84%E6%95%B0%E6%8D%AE%E9%87%8F&#34; &gt;2.2.1 减少请求的数据量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#222-%E5%87%8F%E5%B0%91%E6%89%AB%E6%8F%8F%E7%9A%84%E8%A1%8C%E6%95%B0&#34; &gt;2.2.2 减少扫描的行数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#23-%E9%87%8D%E6%9E%84%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F&#34; &gt;2.3 重构查询方式&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#231-%E5%88%87%E5%88%86%E5%A4%A7%E6%9F%A5%E8%AF%A2&#34; &gt;2.3.1 切分大查询&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#232-%E5%88%86%E8%A7%A3%E5%A4%A7%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2&#34; &gt;2.3.2 分解大连接查询&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E&#34; &gt;3 存储引擎&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#31-innodb&#34; &gt;3.1 InnoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#32-myisam&#34; &gt;3.2 MyISAM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#33-%E5%8C%BA%E5%88%AB&#34; &gt;3.3 区别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B&#34; &gt;4 数据类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5-%E5%88%86%E8%A1%A8&#34; &gt;5 分表&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#51-%E6%B0%B4%E5%B9%B3%E5%88%87%E5%88%86&#34; &gt;5.1 水平切分&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#52-%E5%9E%82%E7%9B%B4%E5%88%87%E5%88%86&#34; &gt;5.2 垂直切分&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#53-sharding-%E7%AD%96%E7%95%A5&#34; &gt;5.3 Sharding 策略&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#54-sharding-%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98&#34; &gt;5.4 Sharding 存在的问题&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#541-%E4%BA%8B%E5%8A%A1%E9%97%AE%E9%A2%98&#34; &gt;5.4.1. 事务问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#542-%E8%BF%9E%E6%8E%A5&#34; &gt;5.4.2. 连接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#543-id-%E5%94%AF%E4%B8%80%E6%80%A7&#34; &gt;5.4.3. ID 唯一性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6-%E5%A4%8D%E5%88%B6&#34; &gt;6 复制&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#61-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6&#34; &gt;6.1 主从复制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#62-%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB&#34; &gt;6.2 读写分离&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E4%B8%89redis&#34; &gt;三、Redis&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-%E6%A6%82%E8%BF%B0&#34; &gt;1 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B&#34; &gt;2 数据类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&#34; &gt;3 数据结构&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#31-%E5%AD%97%E5%85%B8&#34; &gt;3.1 字典&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#32-%E8%B7%B3%E8%B7%83%E8%A1%A8&#34; &gt;3.2 跳跃表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF&#34; &gt;4 使用场景&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#41-%E8%AE%A1%E6%95%B0%E5%99%A8&#34; &gt;4.1 计数器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#42-%E7%BC%93%E5%AD%98&#34; &gt;4.2 缓存&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#43-%E6%9F%A5%E6%89%BE%E8%A1%A8&#34; &gt;4.3 查找表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#44-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97&#34; &gt;4.4 消息队列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#45-%E4%BC%9A%E8%AF%9D%E7%BC%93%E5%AD%98&#34; &gt;4.5 会话缓存&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#46-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81&#34; &gt;4.6 分布式锁&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#47-%E5%85%B6%E4%BB%96&#34; &gt;4.7 其他&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5-%E9%94%AE%E7%9A%84%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4&#34; &gt;5 键的过期时间&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6-%E6%95%B0%E6%8D%AE%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5&#34; &gt;6 数据淘汰策略&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#7-%E6%8C%81%E4%B9%85%E5%8C%96&#34; &gt;7 持久化&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#71-rdb&#34; &gt;7.1 RDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#72-aof&#34; &gt;7.2 AOF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#8-%E4%BA%8B%E5%8A%A1&#34; &gt;8 事务&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#9-%E4%BA%8B%E4%BB%B6&#34; &gt;9 事件&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#91-%E6%96%87%E4%BB%B6%E4%BA%8B%E4%BB%B6&#34; &gt;9.1 文件事件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#92-%E6%97%B6%E9%97%B4%E4%BA%8B%E4%BB%B6&#34; &gt;9.2 时间事件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#93-%E4%BA%8B%E4%BB%B6%E7%9A%84%E8%B0%83%E5%BA%A6%E4%B8%8E%E6%89%A7%E8%A1%8C&#34; &gt;9.3 事件的调度与执行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#10-%E5%A4%8D%E5%88%B6&#34; &gt;10 复制&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#101-%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B&#34; &gt;10.1 连接过程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#102-%E4%B8%BB%E4%BB%8E%E9%93%BE&#34; &gt;10.2 主从链&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#11-%E5%93%A8%E5%85%B5&#34; &gt;11 哨兵&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#12-%E5%88%86%E7%89%87&#34; &gt;12 分片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#13-io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8&#34; &gt;13 IO多路复用&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#131-%E4%BB%80%E4%B9%88%E6%98%AFio%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8&#34; &gt;13.1 什么是IO多路复用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#132-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8&#34; &gt;13.2 为什么需要IO多路复用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#133-io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F&#34; &gt;13.3 IO多路复用的实现方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#134-select%E7%BC%BA%E7%82%B9&#34; &gt;13.4 select缺点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#135-poll%E4%B8%8Eselect%E5%AF%B9%E6%AF%94&#34; &gt;13.5 poll与select对比&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#136-poll%E7%BC%BA%E7%82%B9&#34; &gt;13.6 poll缺点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#137-epoll%E7%BC%BA%E7%82%B9&#34; &gt;13.7 epoll缺点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#138-epoll%E7%9A%84%E5%BA%94%E7%94%A8&#34; &gt;13.8 epoll的应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#139-selectpollepoll%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB&#34; &gt;13.9 select/poll/epoll之间的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1310-epoll-lt%E5%92%8Cet%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB&#34; &gt;13.10 epoll LT和ET模式的区别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;一数据库系统原理&#34;&gt;一、数据库系统原理&lt;/h1&gt;
&lt;h2 id=&#34;1-事务&#34;&gt;1 事务&lt;/h2&gt;
&lt;h3 id=&#34;11-概念&#34;&gt;1.1 概念&lt;/h3&gt;
&lt;p&gt;事务指的是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。&lt;/p&gt;
&lt;h3 id=&#34;12-acid&#34;&gt;1.2 ACID&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;原子性&lt;/p&gt;
&lt;p&gt;事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。&lt;/p&gt;
&lt;p&gt;回滚可以用回滚日志（Undo Log）来实现，回滚日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一致性&lt;/p&gt;
&lt;p&gt;数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对同一个数据的读取结果都是相同的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;隔离性&lt;/p&gt;
&lt;p&gt;一个事务所做的修改在最终提交以前，对其它事务是不可见的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;持久性&lt;/p&gt;
&lt;p&gt;一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。系统发生崩溃可以用重做日志（Redo Log）进行恢复，从而实现持久性。与回滚日志记录数据的逻辑修改不同，重做日志记录的是数据页的物理修改。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207210437023.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;只有满足一致性，事务的执行结果才是正确的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务满足持久化是为了能应对系统崩溃的情况。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;13-autocommit&#34;&gt;1.3 AUTOCOMMIT&lt;/h3&gt;
&lt;p&gt;MySQL 默认采用自动提交模式。也就是说，如果不显式使用&lt;code&gt;START TRANSACTION&lt;/code&gt;语句来开始一个事务，那么每个查询操作都会被当做一个事务并自动提交。&lt;/p&gt;
&lt;h2 id=&#34;2-并发一致性问题&#34;&gt;2 并发一致性问题&lt;/h2&gt;
&lt;h3 id=&#34;21-丢失修改&#34;&gt;2.1 丢失修改&lt;/h3&gt;
&lt;p&gt;丢失修改指一个事务的更新操作被另外一个事务的更新操作替换。一般在现实生活中常会遇到，例如：T&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 和 T&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; 两个事务都对一个数据进行修改，T&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 先修改并提交生效，T&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; 随后修改，T&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; 的修改覆盖了 T&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 的修改。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207221744244.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;22-读脏数据&#34;&gt;2.2 读脏数据&lt;/h3&gt;
&lt;p&gt;读脏数据指在不同的事务下，当前事务可以读到另外事务未提交的数据。例如：T&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 修改一个数据但未提交，T&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; 随后读取这个数据。如果 T&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 撤销了这次修改，那么 T&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; 读取的数据是脏数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207221920368.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;23-不可重复读&#34;&gt;2.3 不可重复读&lt;/h3&gt;
&lt;p&gt;不可重复读指在一个事务内多次读取同一数据集合。在这一事务还未结束前，另一事务也访问了该同一数据集合并做了修改，由于第二个事务的修改，第一次事务的两次读取的数据可能不一致。例如：T&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; 读取一个数据，T&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 对该数据做了修改。如果 T&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; 再次读取这个数据，此时读取的结果和第一次读取的结果不同。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207222102010.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;24-幻影读&#34;&gt;2.4 幻影读&lt;/h3&gt;
&lt;p&gt;幻读本质上也属于不可重复读的情况，T&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 读取某个范围的数据，T&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; 在这个范围内插入新的数据，T&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207222134306.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-封锁&#34;&gt;3 封锁&lt;/h2&gt;
&lt;h3 id=&#34;31-封锁粒度&#34;&gt;3.1 封锁粒度&lt;/h3&gt;
&lt;p&gt;MySQL 中提供了两种封锁粒度：行级锁以及表级锁。&lt;/p&gt;
&lt;p&gt;应该尽量只锁定需要修改的那部分数据，而不是所有的资源。锁定的数据量越少，发生锁争用的可能就越小，系统的并发程度就越高。&lt;/p&gt;
&lt;p&gt;但是加锁需要消耗资源，锁的各种操作（包括获取锁、释放锁、以及检查锁状态）都会增加系统开销。因此封锁粒度越小，系统开销就越大。&lt;/p&gt;
&lt;p&gt;在选择封锁粒度时，需要在锁开销和并发程度之间做一个权衡。&lt;/p&gt;
&lt;h3 id=&#34;32-封锁类型&#34;&gt;3.2 封锁类型&lt;/h3&gt;
&lt;h4 id=&#34;321-读写锁&#34;&gt;3.2.1 读写锁&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;互斥锁（Exclusive），简写为 X 锁，又称写锁。&lt;/li&gt;
&lt;li&gt;共享锁（Shared），简写为 S 锁，又称读锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有以下两个规定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个事务对数据对象 A 加了 X 锁，就可以对 A 进行读取和更新。加锁期间其它事务不能对 A 加任何锁。&lt;/li&gt;
&lt;li&gt;一个事务对数据对象 A 加了 S 锁，可以对 A 进行读取操作，但是不能进行更新操作。加锁期间其它事务能对 A 加 S 锁，但是不能加 X 锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;锁的兼容关系如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207213523777.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h4 id=&#34;322-意向锁&#34;&gt;3.2.2 意向锁&lt;/h4&gt;
&lt;p&gt;使用意向锁（Intention Locks）可以更容易地支持多粒度封锁。&lt;/p&gt;
&lt;p&gt;在存在行级锁和表级锁的情况下，事务 T 想要对表 A 加 X 锁，就需要先检测是否有其它事务对表 A 或者表 A 中的任意一行加了锁，那么就需要对表 A 的每一行都检测一次，这是非常耗时的。&lt;/p&gt;
&lt;p&gt;意向锁在原来的 X/S 锁之上引入了 IX/IS，IX/IS 都是表锁，用来表示一个事务想要在表中的某个数据行上加 X 锁或 S 锁。有以下两个规定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个事务在获得某个数据行对象的 S 锁之前，必须先获得表的 IS 锁或者更强的锁；&lt;/li&gt;
&lt;li&gt;一个事务在获得某个数据行对象的 X 锁之前，必须先获得表的 IX 锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过引入意向锁，事务 T 想要对表 A 加 X 锁，只需要先检测是否有其它事务对表 A 加了 X/IX/S/IS 锁，如果加了就表示有其它事务正在使用这个表或者表中某一行的锁，因此事务 T 加 X 锁失败。&lt;/p&gt;
&lt;p&gt;各种锁的兼容关系如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207214442687.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;解释如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任意 IS/IX 锁之间都是兼容的，因为它们只表示想要对表加锁，而不是真正加锁；&lt;/li&gt;
&lt;li&gt;这里兼容关系针对的是表级锁，而表级的 IX 锁和行级的 X 锁兼容，两个事务可以对两个数据行加 X 锁。（事务 T&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 想要对数据行 R&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 加 X 锁，事务 T&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; 想要对同一个表的数据行 R&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; 加 X 锁，两个事务都需要对该表加 IX 锁，但是 IX 锁是兼容的，并且 IX 锁与行级的 X 锁也是兼容的，因此两个事务都能加锁成功，对同一个表中的两个数据行做修改。）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;33-封锁协议&#34;&gt;3.3 封锁协议&lt;/h3&gt;
&lt;h4 id=&#34;331-三级封锁协议&#34;&gt;3.3.1 三级封锁协议&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;一级封锁协议：事务 T 要修改数据 A 时必须加 X 锁，直到 T 结束才释放锁。可以解决丢失修改问题，因为不能同时有两个事务对同一个数据进行修改，那么事务的修改就不会被覆盖。&lt;/li&gt;
&lt;li&gt;二级封锁协议：在一级的基础上，要求读取数据 A 时必须加 S 锁，读取完马上释放 S 锁。可以解决读脏数据问题，因为如果一个事务在对数据 A 进行修改，根据 1 级封锁协议，会加 X 锁，那么就不能再加 S 锁了，也就是不会读入数据。&lt;/li&gt;
&lt;li&gt;三级封锁协议：在二级的基础上，要求读取数据 A 时必须加 S 锁，直到事务结束了才能释放 S 锁。可以解决不可重复读的问题，因为读 A 时，其它事务不能对 A 加 X 锁，从而避免了在读的期间数据发生改变。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;332-二段锁协议&#34;&gt;3.3.2 二段锁协议&lt;/h4&gt;
&lt;p&gt;加锁和解锁分为两个阶段进行。&lt;/p&gt;
&lt;p&gt;可串行化调度是指，通过并发控制，使得并发执行的事务结果与某个串行执行的事务结果相同。串行执行的事务互不干扰，不会出现并发一致性问题。&lt;/p&gt;
&lt;p&gt;事务遵循两段锁协议是保证可串行化调度的充分条件。例如以下操作满足两段锁协议，它是可串行化调度。&lt;/p&gt;
&lt;h3 id=&#34;34-mysql隐式与显示锁定&#34;&gt;3.4 MySQL隐式与显示锁定&lt;/h3&gt;
&lt;p&gt;MySQL 的 InnoDB 存储引擎采用两段锁协议，会根据隔离级别在需要的时候自动加锁，并且所有的锁都是在同一时刻被释放，这被称为隐式锁定。&lt;/p&gt;
&lt;p&gt;InnoDB 也可以使用特定的语句进行显示锁定：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;LOCK&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;In&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SHARE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;MODE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FOR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4-隔离级别&#34;&gt;4 隔离级别&lt;/h2&gt;
&lt;h3 id=&#34;41-未提交读&#34;&gt;4.1 未提交读&lt;/h3&gt;
&lt;p&gt;事务中的修改，即使没有提交，对其它事务也是可见的。&lt;/p&gt;
&lt;h3 id=&#34;42-提交读&#34;&gt;4.2 提交读&lt;/h3&gt;
&lt;p&gt;一个事务只能读取已经提交的事务所做的修改。换句话说，一个事务所做的修改在提交之前对其它事务是不可见的。&lt;/p&gt;
&lt;h3 id=&#34;43-可重复读&#34;&gt;4.3 可重复读&lt;/h3&gt;
&lt;p&gt;保证在同一个事务中多次读取同一数据的结果是一样的。&lt;/p&gt;
&lt;h3 id=&#34;44-可串行化&#34;&gt;4.4 可串行化&lt;/h3&gt;
&lt;p&gt;强制事务串行执行，这样多个事务互不干扰，不会出现并发一致性问题。&lt;/p&gt;
&lt;p&gt;该隔离级别需要加锁实现，因为要使用加锁机制保证同一时间只有一个事务执行，也就是保证事务串行执行。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207223400787.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-多版本并发控制&#34;&gt;5 多版本并发控制&lt;/h2&gt;
&lt;p&gt;多版本并发控制（Multi-Version Concurrency Control, MVCC）是 MySQL 的 InnoDB 存储引擎实现隔离级别的一种具体方式，用于实现提交读和可重复读这两种隔离级别。而未提交读隔离级别总是读取最新的数据行，要求很低，无需使用 MVCC。可串行化隔离级别需要对所有读取的行都加锁，单纯使用 MVCC 无法实现。&lt;/p&gt;
&lt;h3 id=&#34;51-基本思想&#34;&gt;5.1 基本思想&lt;/h3&gt;
&lt;p&gt;在封锁一节中提到，加锁能解决多个事务同时执行时出现的并发一致性问题。在实际场景中读操作往往多于写操作，因此又引入了读写锁来避免不必要的加锁操作，例如读和读没有互斥关系。读写锁中读和写操作仍然是互斥的，而 MVCC 利用了多版本的思想，写操作更新最新的版本快照，而读操作去读旧版本快照，没有互斥关系，这一点和 CopyOnWrite 类似。&lt;/p&gt;
&lt;p&gt;在 MVCC 中事务的修改操作（DELETE、INSERT、UPDATE）会为数据行新增一个版本快照。&lt;/p&gt;
&lt;p&gt;脏读和不可重复读最根本的原因是事务读取到其它事务未提交的修改。在事务进行读取操作时，为了解决脏读和不可重复读问题，MVCC 规定只能读取已经提交的快照。当然一个事务可以读取自身未提交的快照，这不算是脏读。&lt;/p&gt;
&lt;h3 id=&#34;52-版本号&#34;&gt;5.2 版本号&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;系统版本号 SYS_ID：是一个递增的数字，每开始一个新的事务，系统版本号就会自动递增。&lt;/li&gt;
&lt;li&gt;事务版本号 TRX_ID ：事务开始时的系统版本号。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;53-undo日志&#34;&gt;5.3 Undo日志&lt;/h3&gt;
&lt;p&gt;MVCC 的多版本指的是多个版本的快照，快照存储在 Undo 日志中，该日志通过回滚指针 ROLL_PTR 把一个数据行的所有快照连接起来。&lt;/p&gt;
&lt;p&gt;例如在 MySQL 创建一个表 t，包含主键 id 和一个字段 x。我们先插入一个数据行，然后对该数据行执行两次更新操作。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;INSERT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;INTO&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;VALUES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为没有使用 &lt;code&gt;START TRANSACTION&lt;/code&gt; 将上面的操作当成一个事务来执行，根据 MySQL 的 AUTOCOMMIT 机制，每个操作都会被当成一个事务来执行，所以上面的操作总共涉及到三个事务。快照中除了记录事务版本号 TRX_ID 和操作之外，还记录了一个 bit 的 DEL 字段，用于标记是否被删除。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208164808217.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;INSERT、UPDATE、DELETE 操作会创建一个日志，并将事务版本号 TRX_ID  写入。DELETE 可以看成是一个特殊的 UPDATE，还会额外将 DEL 字段设置为 1。&lt;/p&gt;
&lt;h3 id=&#34;54-readview&#34;&gt;5.4 ReadView&lt;/h3&gt;
&lt;p&gt;MVCC 维护了一个 ReadView 结构，主要包含了当前系统未提交的事务列表 TRX_IDs {TRX_ID_1, TRX_ID_2, &amp;hellip;}，还有该列表的最小值 TRX_ID_MIN 和 TRX_ID_MAX。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208171445674.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;在进行 SELECT 操作时，根据数据行快照的 TRX_ID 与 TRX_ID_MIN 和 TRX_ID_MAX 之间的关系，从而判断数据行快照是否可以使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TRX_ID &amp;lt; TRX_ID_MIN，表示该数据行快照时在当前所有未提交事务之前进行更改的，因此可以使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TRX_ID &amp;gt; TRX_ID_MAX，表示该数据行快照是在事务启动之后被更改的，因此不可使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TRX_ID_MIN &amp;lt;= TRX_ID &amp;lt;= TRX_ID_MAX，需要根据隔离级别再进行判断：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提交读：如果 TRX_ID  在 TRX_IDs  列表中，表示该数据行快照对应的事务还未提交，则该快照不可使用。否则表示已经提交，可以使用。&lt;/li&gt;
&lt;li&gt;可重复读：都不可以使用。因为如果可以使用的话，那么其它事务也可以读到这个数据行快照并进行修改，那么当前事务再去读这个数据行得到的值就会发生改变，也就是出现了不可重复读问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在数据行快照不可使用的情况下，需要沿着 Undo Log 的回滚指针 ROLL_PTR  找到下一个快照，再进行上面的判断。&lt;/p&gt;
&lt;h3 id=&#34;55-快照读与当前读&#34;&gt;5.5 快照读与当前读&lt;/h3&gt;
&lt;h4 id=&#34;551-快照读&#34;&gt;5.5.1 快照读&lt;/h4&gt;
&lt;p&gt;MVCC 的 SELECT 操作是快照中的数据，不需要进行加锁操作。&lt;/p&gt;
&lt;h4 id=&#34;552-当前读&#34;&gt;5.5.2 当前读&lt;/h4&gt;
&lt;p&gt;MVCC 其它会对数据库进行修改的操作（INSERT、UPDATE、DELETE）需要进行加锁操作，从而读取最新的数据。可以看到 MVCC 并不是完全不用加锁，而只是避免了 SELECT 的加锁操作。&lt;/p&gt;
&lt;h2 id=&#34;6-next-key-locks&#34;&gt;6 Next-Key Locks&lt;/h2&gt;
&lt;p&gt;Next-Key Locks 是 MySQL 的 InnoDB 存储引擎的一种锁实现。&lt;/p&gt;
&lt;p&gt;MVCC 不能解决幻影读问题，Next-Key Locks 就是为了解决这个问题而存在的。在可重复读（REPEATABLE READ）隔离级别下，使用 MVCC + Next-Key Locks 可以解决幻读问题。&lt;/p&gt;
&lt;h3 id=&#34;61-record-locks&#34;&gt;6.1 Record Locks&lt;/h3&gt;
&lt;p&gt;锁定一个记录上的索引，而不是记录本身。&lt;/p&gt;
&lt;p&gt;如果表没有设置索引，InnoDB 会自动在主键上创建隐藏的聚簇索引，因此 Record Locks 依然可以使用。&lt;/p&gt;
&lt;h3 id=&#34;62-gap-locks&#34;&gt;6.2 Gap Locks&lt;/h3&gt;
&lt;p&gt;锁定索引之间的间隙，但是不包含索引本身。&lt;/p&gt;
&lt;h3 id=&#34;63-next-key-locks&#34;&gt;6.3 Next-Key Locks&lt;/h3&gt;
&lt;p&gt;它是 Record Locks 和 Gap Locks 的结合，不仅锁定一个记录上的索引，也锁定索引之间的间隙。它锁定一个前开后闭区间。&lt;/p&gt;
&lt;h1 id=&#34;二mysql&#34;&gt;二、MySQL&lt;/h1&gt;
&lt;h2 id=&#34;1-索引&#34;&gt;1 索引&lt;/h2&gt;
&lt;h3 id=&#34;11-b树原理&#34;&gt;1.1 B+树原理&lt;/h3&gt;
&lt;h4 id=&#34;111-数据结构&#34;&gt;1.1.1 数据结构&lt;/h4&gt;
&lt;p&gt;B Tree 指的是 Balance Tree，也就是平衡树。平衡树是一颗查找树，并且所有叶子节点位于同一层。&lt;/p&gt;
&lt;p&gt;B+ Tree 是基于 B Tree 和&lt;strong&gt;叶子节点顺序访问指针&lt;/strong&gt;进行实现，它具有 B Tree 的平衡性，并且通过顺序访问指针来提高&lt;strong&gt;区间查询&lt;/strong&gt;的性能。&lt;/p&gt;
&lt;p&gt;在 B+ Tree 中，一个节点中的 key 从左到右非递减排列，如果某个指针的左右相邻 key 分别是 key&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt; 和 key&lt;!-- raw HTML omitted --&gt;i+1&lt;!-- raw HTML omitted --&gt;，且不为 null，则该指针指向节点的所有 key 大于等于 key&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt; 且小于等于 key&lt;!-- raw HTML omitted --&gt;i+1&lt;!-- raw HTML omitted --&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/33576849-9275-47bb-ada7-8ded5f5e7c73.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h4 id=&#34;112-操作&#34;&gt;1.1.2. 操作&lt;/h4&gt;
&lt;p&gt;进行查找操作时，首先在根节点进行&lt;strong&gt;二分查找&lt;/strong&gt;，找到一个 key 所在的指针，然后递归地在指针所指向的节点进行查找。直到查找到叶子节点，然后在叶子节点上进行二分查找，找出 key 所对应的 data。&lt;/p&gt;
&lt;p&gt;插入删除操作会破坏平衡树的平衡性，因此在进行插入删除操作之后，需要对树进行&lt;strong&gt;分裂、合并、旋转&lt;/strong&gt;等操作来维护平衡性。&lt;/p&gt;
&lt;h4 id=&#34;113-与红黑树的比较&#34;&gt;1.1.3 与红黑树的比较&lt;/h4&gt;
&lt;p&gt;红黑树等平衡树也可以用来实现索引，但是文件系统及数据库系统普遍采用 B+ Tree 作为索引结构，这是因为使用 B+ 树访问磁盘数据有更高的性能。&lt;/p&gt;
&lt;p&gt;（一）B+ 树有更低的树高&lt;/p&gt;
&lt;p&gt;平衡树的树高 O(h)=O(log&lt;!-- raw HTML omitted --&gt;d&lt;!-- raw HTML omitted --&gt;N)，其中 d 为每个节点的出度。红黑树的出度为 2，而 B+ Tree 的出度一般都非常大，所以红黑树的树高 h 很明显比 B+ Tree 大非常多。&lt;/p&gt;
&lt;p&gt;（二）磁盘访问原理&lt;/p&gt;
&lt;p&gt;操作系统一般将内存和磁盘分割成固定大小的块，每一块称为一页，内存与磁盘以页为单位交换数据。数据库系统将索引的一个节点的大小设置为页的大小，使得一次 I/O 就能完全载入一个节点。&lt;/p&gt;
&lt;p&gt;如果数据不在同一个磁盘块上，那么通常需要移动制动手臂进行寻道，而制动手臂因为其物理结构导致了移动效率低下，从而增加磁盘数据读取时间。B+ 树相对于红黑树有更低的树高，进行寻道的次数与树高成正比，在同一个磁盘块上进行访问只需要很短的磁盘旋转时间，所以 B+ 树更适合磁盘数据的读取。&lt;/p&gt;
&lt;p&gt;（三）磁盘预读特性&lt;/p&gt;
&lt;p&gt;为了减少磁盘 I/O 操作，磁盘往往不是严格按需读取，而是每次都会预读。预读过程中，磁盘进行顺序读取，顺序读取不需要进行磁盘寻道，并且只需要很短的磁盘旋转时间，速度会非常快。并且可以利用预读特性，相邻的节点也能够被预先载入。&lt;/p&gt;
&lt;h3 id=&#34;12-mysql索引&#34;&gt;1.2 MySQL索引&lt;/h3&gt;
&lt;h4 id=&#34;121-b树索引&#34;&gt;1.2.1 B+树索引&lt;/h4&gt;
&lt;p&gt;是大多数 MySQL 存储引擎的默认索引类型。&lt;/p&gt;
&lt;p&gt;因为不再需要进行全表扫描，只需要对树进行搜索即可，所以查找速度快很多。&lt;/p&gt;
&lt;p&gt;因为 B+ Tree 的有序性，所以除了用于查找，还可以用于排序和分组。&lt;/p&gt;
&lt;p&gt;可以指定多个列作为索引列，多个索引列共同组成键。&lt;/p&gt;
&lt;p&gt;适用于全键值、键值范围和键前缀查找，其中键前缀查找只适用于最左前缀查找。如果不是按照索引列的顺序进行查找，则无法使用索引。&lt;/p&gt;
&lt;p&gt;InnoDB 的 B+Tree 索引分为主索引和辅助索引。主索引的叶子节点 data 域记录着完整的数据记录，这种索引方式被称为聚簇索引。因为无法把数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/45016e98-6879-4709-8569-262b2d6d60b9.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;辅助索引的叶子节点的 data 域记录着主键的值，因此在使用辅助索引进行查找时，需要先查找到主键值，然后再到主索引中进行查找。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/7c349b91-050b-4d72-a7f8-ec86320307ea.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h4 id=&#34;122-哈希索引&#34;&gt;1.2.2 哈希索引&lt;/h4&gt;
&lt;p&gt;哈希索引能以 O(1) 时间进行查找，但是失去了有序性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无法用于排序与分组；&lt;/li&gt;
&lt;li&gt;只支持精确查找，无法用于部分查找和范围查找。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;InnoDB 存储引擎有一个特殊的功能叫“自适应哈希索引”，当某个索引值被使用的非常频繁时，会在 B+Tree 索引之上再创建一个哈希索引，这样就让 B+Tree 索引具有哈希索引的一些优点，比如快速的哈希查找。&lt;/p&gt;
&lt;h4 id=&#34;123-全文索引&#34;&gt;1.2.3 全文索引&lt;/h4&gt;
&lt;p&gt;MyISAM 存储引擎支持全文索引，用于查找文本中的关键词，而不是直接比较是否相等。&lt;/p&gt;
&lt;p&gt;查找条件使用 MATCH AGAINST，而不是普通的 WHERE。&lt;/p&gt;
&lt;p&gt;全文索引使用倒排索引实现，它记录着关键词到其所在文档的映射。&lt;/p&gt;
&lt;p&gt;InnoDB 存储引擎在 MySQL 5.6.4 版本中也开始支持全文索引。&lt;/p&gt;
&lt;h4 id=&#34;124-空间数据索引&#34;&gt;1.2.4 空间数据索引&lt;/h4&gt;
&lt;p&gt;MyISAM 存储引擎支持空间数据索引（R-Tree），可以用于地理数据存储。空间数据索引会从所有维度来索引数据，可以有效地使用任意维度来进行组合查询。&lt;/p&gt;
&lt;p&gt;必须使用 GIS 相关的函数来维护数据。&lt;/p&gt;
&lt;h3 id=&#34;13-索引优化&#34;&gt;1.3 索引优化&lt;/h3&gt;
&lt;h4 id=&#34;131-独立的列&#34;&gt;1.3.1. 独立的列&lt;/h4&gt;
&lt;p&gt;在进行查询时，索引列不能是表达式的一部分，也不能是函数的参数，否则无法使用索引。&lt;/p&gt;
&lt;p&gt;例如下面的查询不能使用 actor_id 列的索引：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;actor_id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sakila&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;actor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;actor_id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;132-多列索引&#34;&gt;1.3.2. 多列索引&lt;/h4&gt;
&lt;p&gt;在需要使用多个列作为条件进行查询时，使用多列索引比使用多个单列索引性能更好。例如下面的语句中，最好把 actor_id 和 film_id 设置为多列索引。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;film_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;actor_&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sakila&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;film_actor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;actor_id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;film_id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;133-索引列的顺序&#34;&gt;1.3.3. 索引列的顺序&lt;/h4&gt;
&lt;p&gt;让选择性最强的索引列放在前面。&lt;/p&gt;
&lt;p&gt;索引的选择性是指：不重复的索引值和记录总数的比值。最大值为 1，此时每个记录都有唯一的索引与其对应。选择性越高，每个记录的区分度越高，查询效率也越高。&lt;/p&gt;
&lt;p&gt;例如下面显示的结果中 customer_id 的选择性比 staff_id 更高，因此最好把 customer_id 列放在多列索引的前面。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COUNT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DISTINCT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;staff_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COUNT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;staff_id_selectivity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COUNT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DISTINCT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;customer_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COUNT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;customer_id_selectivity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COUNT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;payment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;   staff_id_selectivity: 0.0001
customer_id_selectivity: 0.0373
               COUNT(*): 16049
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;134-前缀索引&#34;&gt;1.3.4. 前缀索引&lt;/h4&gt;
&lt;p&gt;对于 BLOB、TEXT 和 VARCHAR 类型的列，必须使用前缀索引，只索引开始的部分字符。&lt;/p&gt;
&lt;p&gt;前缀长度的选取需要根据索引选择性来确定。&lt;/p&gt;
&lt;h4 id=&#34;135-覆盖索引&#34;&gt;1.3.5. 覆盖索引&lt;/h4&gt;
&lt;p&gt;索引包含所有需要查询的字段的值。&lt;/p&gt;
&lt;p&gt;具有以下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;索引通常远小于数据行的大小，只读取索引能大大减少数据访问量。&lt;/li&gt;
&lt;li&gt;一些存储引擎（例如 MyISAM）在内存中只缓存索引，而数据依赖于操作系统来缓存。因此，只访问索引可以不使用系统调用（通常比较费时）。&lt;/li&gt;
&lt;li&gt;对于 InnoDB 引擎，若辅助索引能够覆盖查询，则无需访问主索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;14-索引的优点&#34;&gt;1.4 索引的优点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;大大减少了服务器需要扫描的数据行数。&lt;/li&gt;
&lt;li&gt;帮助服务器避免进行排序和分组，以及避免创建临时表（B+Tree 索引是有序的，可以用于 ORDER BY 和 GROUP BY 操作。临时表主要是在排序和分组过程中创建，不需要排序和分组，也就不需要创建临时表）。&lt;/li&gt;
&lt;li&gt;将随机 I/O 变为顺序 I/O（B+Tree 索引是有序的，会将相邻的数据都存储在一起）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;15-索引的使用条件&#34;&gt;1.5 索引的使用条件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对于非常小的表、大部分情况下简单的全表扫描比建立索引更高效；&lt;/li&gt;
&lt;li&gt;对于中到大型的表，索引就非常有效；&lt;/li&gt;
&lt;li&gt;但是对于特大型的表，建立和维护索引的代价将会随之增长。这种情况下，需要用到一种技术可以直接区分出需要查询的一组数据，而不是一条记录一条记录地匹配，例如可以使用分区技术。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;16-mysql里的索引类型&#34;&gt;1.6 MySQL里的索引类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;普通索引&lt;/li&gt;
&lt;li&gt;唯一索引&lt;/li&gt;
&lt;li&gt;主键索引&lt;/li&gt;
&lt;li&gt;组合索引&lt;/li&gt;
&lt;li&gt;全文索引&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;17-聚簇索引和非聚簇索引&#34;&gt;1.7 聚簇索引和非聚簇索引&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;聚簇索引也叫簇类索引，是一种对磁盘上实际数据重新组织以按指定的一个或多个列的值排序。（聚簇索引就是主键的一种术语）&lt;/li&gt;
&lt;li&gt;非聚簇索引，叶级页指向表中的记录，记录的物理顺序与逻辑顺序没有必然的联系。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;或者：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;聚簇索引：规定存储在磁盘上的数据是连续的，这个连续是指&lt;strong&gt;物理顺序就是连续&lt;/strong&gt;的。&lt;/li&gt;
&lt;li&gt;非聚簇索引：既然聚簇索引是连续的，那非聚簇索引就是不连续的。索引的存储和数据的存储是分离的，也就是说找到了索引但没找到数据，需要根据索引上的值(主键)再次回表查询,非聚簇索引也叫做辅助索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;p&gt;第一种，直接根据主键查询获取所有字段数据，此时主键是聚簇索引，因为主键对应的索引叶子节点存储了id=1的所有字段的值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;student&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第二种，根据编号查询编号和名称，编号本身是一个唯一索引，但查询的列包含了学生编号和学生名称，当命中编号索引时，该索引的节点的数据存储的是主键ID，需要根据主键ID重新查询一次，所以这种查询下no不是聚簇索引&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;student&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第三种，我们根据编号查询编号（有人会问知道编号了还要查询？要，你可能需要验证该编号在数据库中是否存在），这种查询命中编号索引时，直接返回编号，因为所需要的数据就是该索引，不需要回表查询，这种场景下no是聚簇索引&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;student&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主键一定是聚簇索引，MySQL的InnoDB中一定有主键，即便研发人员不手动设置，则会使用unique索引，没有unique索引，则会使用数据库内部的一个行的id来当作主键索引,其它普通索引需要区分SQL场景，当SQL查询的列就是索引本身时，我们称这种场景下该普通索引也可以叫做聚簇索引，MyisAM引擎没有聚簇索引。&lt;/p&gt;
&lt;h3 id=&#34;18-回表查询&#34;&gt;1.8 回表查询&lt;/h3&gt;
&lt;p&gt;要说回表查询，先要从InnoDB的索引实现说起。InnoDB有两大类索引，一类是聚集索引(Clustered Index)，一类是非聚簇索引(Secondary Index)。&lt;/p&gt;
&lt;p&gt;InnoDB的聚集索引：InnoDB聚集索引的叶子节点存储行记录，因此InnoDB必须要有且只有一个聚集索引。&lt;/p&gt;
&lt;p&gt;1.如果表定义了PK(Primary Key，主键)，那么PK就是聚集索引。&lt;/p&gt;
&lt;p&gt;2.如果表没有定义PK，则第一个NOT NULL UNIQUE的列就是聚集索引。&lt;/p&gt;
&lt;p&gt;3.否则InnoDB会另外创建一个隐藏的ROWID作为聚集索引。&lt;/p&gt;
&lt;p&gt;这种机制使得基于PK的查询速度非常快，因为直接定位的行记录。&lt;/p&gt;
&lt;p&gt;InnoDB的普通索引：InnoDB普通索引的叶子节点存储主键ID(MyISAM则是存储的行记录头指针)。&lt;/p&gt;
&lt;p&gt;回表查询：先通过非聚簇索引查询主键ID，再通过主键ID查询数据。&lt;/p&gt;
&lt;h2 id=&#34;2-查询性能优化&#34;&gt;2 查询性能优化&lt;/h2&gt;
&lt;h3 id=&#34;21-explain&#34;&gt;2.1 Explain&lt;/h3&gt;
&lt;p&gt;Explain 用来分析 SELECT 查询语句，开发人员可以通过分析 Explain 结果来优化查询语句。&lt;/p&gt;
&lt;p&gt;比较重要的字段有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;select_type : 查询类型，有简单查询、联合查询、子查询等&lt;/li&gt;
&lt;li&gt;key : 使用的索引&lt;/li&gt;
&lt;li&gt;rows : 扫描的行数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22-优化数据访问&#34;&gt;2.2 优化数据访问&lt;/h3&gt;
&lt;h4 id=&#34;221-减少请求的数据量&#34;&gt;2.2.1 减少请求的数据量&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;只返回必要的列：最好不要使用 SELECT * 语句。&lt;/li&gt;
&lt;li&gt;只返回必要的行：使用 LIMIT 语句来限制返回的数据。&lt;/li&gt;
&lt;li&gt;缓存重复查询的数据：使用缓存可以避免在数据库中进行查询，特别在要查询的数据经常被重复查询时，缓存带来的查询性能提升将会是非常明显的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;222-减少扫描的行数&#34;&gt;2.2.2 减少扫描的行数&lt;/h4&gt;
&lt;p&gt;最有效的方式是使用索引来覆盖查询。&lt;/p&gt;
&lt;h3 id=&#34;23-重构查询方式&#34;&gt;2.3 重构查询方式&lt;/h3&gt;
&lt;h4 id=&#34;231-切分大查询&#34;&gt;2.3.1 切分大查询&lt;/h4&gt;
&lt;p&gt;一个大查询如果一次性执行的话，可能一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询。&lt;/p&gt;
&lt;h4 id=&#34;232-分解大连接查询&#34;&gt;2.3.2 分解大连接查询&lt;/h4&gt;
&lt;p&gt;将一个大连接查询分解成对每一个表进行一次单表查询，然后在应用程序中进行关联，这样做的好处有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;让缓存更高效。对于连接查询，如果其中一个表发生变化，那么整个查询缓存就无法使用。而分解后的多个查询，即使其中一个表发生变化，对其它表的查询缓存依然可以使用。&lt;/li&gt;
&lt;li&gt;分解成多个单表查询，这些单表查询的缓存结果更可能被其它查询使用到，从而减少冗余记录的查询。&lt;/li&gt;
&lt;li&gt;减少锁竞争；&lt;/li&gt;
&lt;li&gt;在应用层进行连接，可以更容易对数据库进行拆分，从而更容易做到高性能和可伸缩。&lt;/li&gt;
&lt;li&gt;查询本身效率也可能会有所提升。例如下面的例子中，使用 IN() 代替连接查询，可以让 MySQL 按照 ID 顺序进行查询，这可能比随机的连接要更高效。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-存储引擎&#34;&gt;3 存储引擎&lt;/h2&gt;
&lt;h3 id=&#34;31-innodb&#34;&gt;3.1 InnoDB&lt;/h3&gt;
&lt;p&gt;是 MySQL 默认的事务型存储引擎，只有在需要它不支持的特性时，才考虑使用其它存储引擎。&lt;/p&gt;
&lt;p&gt;实现了四个标准的隔离级别，默认级别是可重复读（REPEATABLE READ）。在可重复读隔离级别下，通过多版本并发控制（MVCC）+ Next-Key Locking 防止幻影读。&lt;/p&gt;
&lt;p&gt;主索引是聚簇索引，在索引中保存了数据，从而避免直接读取磁盘，因此对查询性能有很大的提升。&lt;/p&gt;
&lt;p&gt;内部做了很多优化，包括从磁盘读取数据时采用的可预测性读、能够加快读操作并且自动创建的自适应哈希索引、能够加速插入操作的插入缓冲区等。&lt;/p&gt;
&lt;p&gt;支持真正的在线热备份。其它存储引擎不支持在线热备份，要获取一致性视图需要停止对所有表的写入，而在读写混合场景中，停止写入可能也意味着停止读取。&lt;/p&gt;
&lt;h3 id=&#34;32-myisam&#34;&gt;3.2 MyISAM&lt;/h3&gt;
&lt;p&gt;设计简单，数据以紧密格式存储。对于只读数据，或者表比较小、可以容忍修复操作，则依然可以使用它。&lt;/p&gt;
&lt;p&gt;提供了大量的特性，包括压缩表、空间数据索引等。&lt;/p&gt;
&lt;p&gt;不支持事务。&lt;/p&gt;
&lt;p&gt;不支持行级锁，只能对整张表加锁，读取时会对需要读到的所有表加共享锁，写入时则对表加排它锁。但在表有读取操作的同时，也可以往表中插入新的记录，这被称为并发插入（CONCURRENT INSERT）。&lt;/p&gt;
&lt;p&gt;可以手工或者自动执行检查和修复操作，但是和事务恢复以及崩溃恢复不同，可能导致一些数据丢失，而且修复操作是非常慢的。&lt;/p&gt;
&lt;p&gt;如果指定了 DELAY_KEY_WRITE 选项，在每次修改执行完成时，不会立即将修改的索引数据写入磁盘，而是会写到内存中的键缓冲区，只有在清理键缓冲区或者关闭表的时候才会将对应的索引块写入磁盘。这种方式可以极大的提升写入性能，但是在数据库或者主机崩溃时会造成索引损坏，需要执行修复操作。&lt;/p&gt;
&lt;h3 id=&#34;33-区别&#34;&gt;3.3 区别&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;事务：InnoDB 是事务型的，可以使用 Commit 和 Rollback 语句。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;并发：MyISAM 只支持表级锁，而 InnoDB 还支持行级锁。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外键：InnoDB 支持外键。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;备份：InnoDB 支持在线热备份。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;崩溃恢复：MyISAM 崩溃后发生损坏的概率比 InnoDB 高很多，而且恢复的速度也更慢。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其它特性：MyISAM 支持压缩表和空间数据索引。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-数据类型&#34;&gt;4 数据类型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;整型：tinyint、smallint、mediumint、int、bigint&lt;/li&gt;
&lt;li&gt;浮点数：float、double、decimal&lt;/li&gt;
&lt;li&gt;字符串：char、varchar&lt;/li&gt;
&lt;li&gt;时间和日期：datetime、timestamp&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-分表&#34;&gt;5 分表&lt;/h2&gt;
&lt;h3 id=&#34;51-水平切分&#34;&gt;5.1 水平切分&lt;/h3&gt;
&lt;p&gt;水平切分又称为 Sharding，它是将同一个表中的记录拆分到多个结构相同的表中。&lt;/p&gt;
&lt;p&gt;当一个表的数据不断增多时，Sharding 是必然的选择，它可以将数据分布到集群的不同节点上，从而缓存单个数据库的压力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/63c2909f-0c5f-496f-9fe5-ee9176b31aba.jpg&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;52-垂直切分&#34;&gt;5.2 垂直切分&lt;/h3&gt;
&lt;p&gt;垂直切分是将一张表按列切分成多个表，通常是按照列的关系密集程度进行切分，也可以利用垂直切分将经常被使用的列和不经常被使用的列切分到不同的表中。&lt;/p&gt;
&lt;p&gt;在数据库的层面使用垂直切分将按数据库中表的密集程度部署到不同的库中，例如将原来的电商数据库垂直切分成商品数据库、用户数据库等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e130e5b8-b19a-4f1e-b860-223040525cf6.jpg&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;53-sharding-策略&#34;&gt;5.3 Sharding 策略&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;哈希取模：hash(key) % N；&lt;/li&gt;
&lt;li&gt;范围：可以是 ID 范围也可以是时间范围；&lt;/li&gt;
&lt;li&gt;映射表：使用单独的一个数据库来存储映射关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;54-sharding-存在的问题&#34;&gt;5.4 Sharding 存在的问题&lt;/h3&gt;
&lt;h4 id=&#34;541-事务问题&#34;&gt;5.4.1. 事务问题&lt;/h4&gt;
&lt;p&gt;使用分布式事务来解决，比如 XA 接口。&lt;/p&gt;
&lt;h4 id=&#34;542-连接&#34;&gt;5.4.2. 连接&lt;/h4&gt;
&lt;p&gt;可以将原来的连接分解成多个单表查询，然后在用户程序中进行连接。&lt;/p&gt;
&lt;h4 id=&#34;543-id-唯一性&#34;&gt;5.4.3. ID 唯一性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;使用全局唯一 ID（GUID）&lt;/li&gt;
&lt;li&gt;为每个分片指定一个 ID 范围&lt;/li&gt;
&lt;li&gt;分布式 ID 生成器 (如 Twitter 的 Snowflake 算法)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-复制&#34;&gt;6 复制&lt;/h2&gt;
&lt;h3 id=&#34;61-主从复制&#34;&gt;6.1 主从复制&lt;/h3&gt;
&lt;p&gt;主要涉及三个线程：binlog 线程、I/O 线程和 SQL 线程。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;binlog 线程&lt;/strong&gt;  ：负责将主服务器上的数据更改写入二进制日志（Binary log）中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I/O 线程&lt;/strong&gt;  ：负责从主服务器上读取二进制日志，并写入从服务器的中继日志（Relay log）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SQL 线程&lt;/strong&gt;  ：负责读取中继日志，解析出主服务器已经执行的数据更改并在从服务器中重放（Replay）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/master-slave.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;62-读写分离&#34;&gt;6.2 读写分离&lt;/h3&gt;
&lt;p&gt;主服务器处理写操作以及实时性要求比较高的读操作，而从服务器处理读操作。&lt;/p&gt;
&lt;p&gt;读写分离能提高性能的原因在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主从服务器负责各自的读和写，极大程度缓解了锁的争用；&lt;/li&gt;
&lt;li&gt;从服务器可以使用 MyISAM，提升查询性能以及节约系统开销；&lt;/li&gt;
&lt;li&gt;增加冗余，提高可用性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;读写分离常用代理方式来实现，代理服务器接收应用层传来的读写请求，然后决定转发到哪个服务器。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;三redis&#34;&gt;三、Redis&lt;/h1&gt;
&lt;h2 id=&#34;1-概述&#34;&gt;1 概述&lt;/h2&gt;
&lt;p&gt;Redis 是速度非常快的非关系型（NoSQL）内存键值数据库，可以存储键和五种不同类型的值之间的映射。&lt;/p&gt;
&lt;p&gt;键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。&lt;/p&gt;
&lt;p&gt;Redis 支持很多特性，例如将内存中的数据持久化到硬盘中，使用复制来扩展读性能，使用分片来扩展写性能。&lt;/p&gt;
&lt;h2 id=&#34;2-数据类型&#34;&gt;2 数据类型&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;数据类型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;可以存储的值&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;操作&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;STRING&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;字符串、整数或者浮点数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;对整个字符串或者字符串的其中一部分执行操作&amp;lt;/br&amp;gt; 对整数和浮点数执行自增或者自减操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;LIST&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;列表&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从两端压入或者弹出元素 &amp;lt;/br&amp;gt; 对单个或者多个元素进行修剪，&amp;lt;/br&amp;gt; 只保留一个范围内的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;SET&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无序集合&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;添加、获取、移除单个元素&amp;lt;/br&amp;gt; 检查一个元素是否存在于集合中&amp;lt;/br&amp;gt; 计算交集、并集、差集&amp;lt;/br&amp;gt; 从集合里面随机获取元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;HASH&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;包含键值对的无序散列表&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;添加、获取、移除单个键值对&amp;lt;/br&amp;gt; 获取所有键值对&amp;lt;/br&amp;gt; 检查某个键是否存在&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ZSET&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;有序集合&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;添加、获取、删除元素&amp;lt;/br&amp;gt; 根据分值范围或者成员来获取元素&amp;lt;/br&amp;gt; 计算一个键的排名&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;3-数据结构&#34;&gt;3 数据结构&lt;/h2&gt;
&lt;h3 id=&#34;31-字典&#34;&gt;3.1 字典&lt;/h3&gt;
&lt;p&gt;dictht 是一个散列表结构，使用拉链法解决哈希冲突。&lt;/p&gt;
&lt;h3 id=&#34;32-跳跃表&#34;&gt;3.2 跳跃表&lt;/h3&gt;
&lt;p&gt;是有序集合的底层实现之一。&lt;/p&gt;
&lt;p&gt;跳跃表是基于多指针有序链表实现的，可以看成多个有序链表。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/beba612e-dc5b-4fc2-869d-0b23408ac90a.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;在查找时，从上层指针开始查找，找到对应的区间之后再到下一层去查找。下图演示了查找 22 的过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/0ea37ee2-c224-4c79-b895-e131c6805c40.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;与红黑树等平衡树相比，跳跃表具有以下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入速度非常快速，因为不需要进行旋转等操作来维护平衡性；&lt;/li&gt;
&lt;li&gt;更容易实现；&lt;/li&gt;
&lt;li&gt;支持无锁操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-使用场景&#34;&gt;4 使用场景&lt;/h2&gt;
&lt;h3 id=&#34;41-计数器&#34;&gt;4.1 计数器&lt;/h3&gt;
&lt;p&gt;可以对 String 进行自增自减运算，从而实现计数器功能。&lt;/p&gt;
&lt;p&gt;Redis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。&lt;/p&gt;
&lt;h3 id=&#34;42-缓存&#34;&gt;4.2 缓存&lt;/h3&gt;
&lt;p&gt;将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。&lt;/p&gt;
&lt;h3 id=&#34;43-查找表&#34;&gt;4.3 查找表&lt;/h3&gt;
&lt;p&gt;例如 DNS 记录就很适合使用 Redis 进行存储。&lt;/p&gt;
&lt;p&gt;查找表和缓存类似，也是利用了 Redis 快速的查找特性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。&lt;/p&gt;
&lt;h3 id=&#34;44-消息队列&#34;&gt;4.4 消息队列&lt;/h3&gt;
&lt;p&gt;List 是一个双向链表，可以通过 lpush 和 rpop 写入和读取消息&lt;/p&gt;
&lt;p&gt;不过最好使用 Kafka、RabbitMQ 等消息中间件。&lt;/p&gt;
&lt;h3 id=&#34;45-会话缓存&#34;&gt;4.5 会话缓存&lt;/h3&gt;
&lt;p&gt;可以使用 Redis 来统一存储多台应用服务器的会话信息。&lt;/p&gt;
&lt;p&gt;当应用服务器不再存储用户的会话信息，也就不再具有状态，一个用户可以请求任意一个应用服务器，从而更容易实现高可用性以及可伸缩性。&lt;/p&gt;
&lt;h3 id=&#34;46-分布式锁&#34;&gt;4.6 分布式锁&lt;/h3&gt;
&lt;p&gt;在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。&lt;/p&gt;
&lt;p&gt;可以使用 Redis 自带的 SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。&lt;/p&gt;
&lt;h3 id=&#34;47-其他&#34;&gt;4.7 其他&lt;/h3&gt;
&lt;p&gt;Set 可以实现交集、并集等操作，从而实现共同好友等功能。&lt;/p&gt;
&lt;p&gt;ZSet 可以实现有序性操作，从而实现排行榜等功能。&lt;/p&gt;
&lt;h2 id=&#34;5-键的过期时间&#34;&gt;5 键的过期时间&lt;/h2&gt;
&lt;p&gt;Redis 可以为每个键设置过期时间，当键过期时，会自动删除该键。&lt;/p&gt;
&lt;p&gt;对于散列表这种容器，只能为整个键设置过期时间（整个散列表），而不能为键里面的单个元素设置过期时间。&lt;/p&gt;
&lt;h2 id=&#34;6-数据淘汰策略&#34;&gt;6 数据淘汰策略&lt;/h2&gt;
&lt;p&gt;可以设置内存最大使用量，当内存使用量超出时，会施行数据淘汰策略。&lt;/p&gt;
&lt;p&gt;Redis 具体有 6 种淘汰策略：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;策略&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;volatile-lru&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从已设置过期时间的数据集中挑选最近最少使用的数据淘汰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;volatile-ttl&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从已设置过期时间的数据集中挑选将要过期的数据淘汰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;volatile-random&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从已设置过期时间的数据集中任意选择数据淘汰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;allkeys-lru&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从所有数据集中挑选最近最少使用的数据淘汰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;allkeys-random&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从所有数据集中任意选择数据进行淘汰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;noeviction&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;禁止驱逐数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;作为内存数据库，出于对性能和内存消耗的考虑，Redis 的淘汰算法实际实现上并非针对所有 key，而是抽样一小部分并且从中选出被淘汰的 key。&lt;/p&gt;
&lt;p&gt;使用 Redis 缓存数据时，为了提高缓存命中率，需要保证缓存数据都是热点数据。可以将内存最大使用量设置为热点数据占用的内存量，然后启用 allkeys-lru 淘汰策略，将最近最少使用的数据淘汰。&lt;/p&gt;
&lt;p&gt;Redis 4.0 引入了 volatile-lfu 和 allkeys-lfu 淘汰策略，LFU 策略通过统计访问频率，将访问频率最少的键值对淘汰。&lt;/p&gt;
&lt;h2 id=&#34;7-持久化&#34;&gt;7 持久化&lt;/h2&gt;
&lt;p&gt;Redis 是内存型数据库，为了保证数据在断电后不会丢失，需要将内存中的数据持久化到硬盘上。&lt;/p&gt;
&lt;h3 id=&#34;71-rdb&#34;&gt;7.1 RDB&lt;/h3&gt;
&lt;p&gt;将某个时间点的所有数据都存放到硬盘上。&lt;/p&gt;
&lt;p&gt;可以将快照复制到其它服务器从而创建具有相同数据的服务器副本。&lt;/p&gt;
&lt;p&gt;如果系统发生故障，将会丢失最后一次创建快照之后的数据。&lt;/p&gt;
&lt;p&gt;如果数据量很大，保存快照的时间会很长。&lt;/p&gt;
&lt;h3 id=&#34;72-aof&#34;&gt;7.2 AOF&lt;/h3&gt;
&lt;p&gt;将写命令添加到 AOF 文件（Append Only File）的末尾。&lt;/p&gt;
&lt;p&gt;使用 AOF 持久化需要设置同步选项，从而确保写命令同步到磁盘文件上的时机。这是因为对文件进行写入并不会马上将内容同步到磁盘上，而是先存储到缓冲区，然后由操作系统决定什么时候同步到磁盘。有以下同步选项：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;选项&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;同步频率&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;always&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;每个写命令都同步&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;everysec&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;每秒同步一次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;no&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;让操作系统来决定何时同步&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;always 选项会严重减低服务器的性能；&lt;/li&gt;
&lt;li&gt;everysec 选项比较合适，可以保证系统崩溃时只会丢失一秒左右的数据，并且 Redis 每秒执行一次同步对服务器性能几乎没有任何影响；&lt;/li&gt;
&lt;li&gt;no 选项并不能给服务器性能带来多大的提升，而且也会增加系统崩溃时数据丢失的数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;随着服务器写请求的增多，AOF 文件会越来越大。Redis 提供了一种将 AOF 重写的特性，能够去除 AOF 文件中的冗余写命令。&lt;/p&gt;
&lt;h2 id=&#34;8-事务&#34;&gt;8 事务&lt;/h2&gt;
&lt;p&gt;一个事务包含了多个命令，服务器在执行事务期间，不会改去执行其它客户端的命令请求。&lt;/p&gt;
&lt;p&gt;事务中的多个命令被一次性发送给服务器，而不是一条一条发送，这种方式被称为流水线，它可以减少客户端与服务器之间的网络通信次数从而提升性能。&lt;/p&gt;
&lt;p&gt;Redis 最简单的事务实现方式是使用 MULTI 和 EXEC 命令将事务操作包围起来。&lt;/p&gt;
&lt;h2 id=&#34;9-事件&#34;&gt;9 事件&lt;/h2&gt;
&lt;p&gt;Redis 服务器是一个事件驱动程序。&lt;/p&gt;
&lt;h3 id=&#34;91-文件事件&#34;&gt;9.1 文件事件&lt;/h3&gt;
&lt;p&gt;服务器通过套接字与客户端或者其它服务器进行通信，文件事件就是对套接字操作的抽象。&lt;/p&gt;
&lt;p&gt;Redis 基于 Reactor 模式开发了自己的网络事件处理器，使用 I/O 多路复用程序来同时监听多个套接字，并将到达的事件传送给文件事件分派器，分派器会根据套接字产生的事件类型调用相应的事件处理器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/9ea86eb5-000a-4281-b948-7b567bd6f1d8.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;92-时间事件&#34;&gt;9.2 时间事件&lt;/h3&gt;
&lt;p&gt;服务器有一些操作需要在给定的时间点执行，时间事件是对这类定时操作的抽象。&lt;/p&gt;
&lt;p&gt;时间事件又分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定时事件：是让一段程序在指定的时间之内执行一次；&lt;/li&gt;
&lt;li&gt;周期性事件：是让一段程序每隔指定时间就执行一次。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redis 将所有时间事件都放在一个无序链表中，通过遍历整个链表查找出已到达的时间事件，并调用相应的事件处理器。&lt;/p&gt;
&lt;h3 id=&#34;93-事件的调度与执行&#34;&gt;9.3 事件的调度与执行&lt;/h3&gt;
&lt;p&gt;服务器需要不断监听文件事件的套接字才能得到待处理的文件事件，但是不能一直监听，否则时间事件无法在规定的时间内执行，因此监听时间应该根据距离现在最近的时间事件来决定。&lt;/p&gt;
&lt;p&gt;从事件处理的角度来看，服务器运行流程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/c0a9fa91-da2e-4892-8c9f-80206a6f7047.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;10-复制&#34;&gt;10 复制&lt;/h2&gt;
&lt;p&gt;通过使用 slaveof host port 命令来让一个服务器成为另一个服务器的从服务器。&lt;/p&gt;
&lt;p&gt;一个从服务器只能有一个主服务器，并且不支持主主复制。&lt;/p&gt;
&lt;h3 id=&#34;101-连接过程&#34;&gt;10.1 连接过程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;主服务器创建快照文件，发送给从服务器，并在发送期间使用缓冲区记录执行的写命令。快照文件发送完毕之后，开始向从服务器发送存储在缓冲区中的写命令；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从服务器丢弃所有旧数据，载入主服务器发来的快照文件，之后从服务器开始接受主服务器发来的写命令；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主服务器每执行一次写命令，就向从服务器发送相同的写命令。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;102-主从链&#34;&gt;10.2 主从链&lt;/h3&gt;
&lt;p&gt;随着负载不断上升，主服务器可能无法很快地更新所有从服务器，或者重新连接和重新同步从服务器将导致系统超载。为了解决这个问题，可以创建一个中间层来分担主服务器的复制工作。中间层的服务器是最上层服务器的从服务器，又是最下层服务器的主服务器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/395a9e83-b1a1-4a1d-b170-d081e7bb5bab.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;11-哨兵&#34;&gt;11 哨兵&lt;/h2&gt;
&lt;p&gt;Sentinel（哨兵）可以监听集群中的服务器，并在主服务器进入下线状态时，自动从从服务器中选举出新的主服务器。&lt;/p&gt;
&lt;h2 id=&#34;12-分片&#34;&gt;12 分片&lt;/h2&gt;
&lt;p&gt;分片是将数据划分为多个部分的方法，可以将数据存储到多台机器里面，这种方法在解决某些问题时可以获得线性级别的性能提升。&lt;/p&gt;
&lt;p&gt;假设有 4 个 Redis 实例 R0，R1，R2，R3，还有很多表示用户的键 user:1，user:2，&amp;hellip; ，有不同的方式来选择一个指定的键存储在哪个实例中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最简单的方式是范围分片，例如用户 id 从 0~1000 的存储到实例 R0 中，用户 id 从 1001~2000 的存储到实例 R1 中，等等。但是这样需要维护一张映射范围表，维护操作代价很高。&lt;/li&gt;
&lt;li&gt;还有一种方式是哈希分片，使用 CRC32 哈希函数将键转换为一个数字，再对实例数量求模就能知道应该存储的实例。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据执行分片的位置，可以分为三种分片方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端分片：客户端使用一致性哈希等算法决定键应当分布到哪个节点。&lt;/li&gt;
&lt;li&gt;代理分片：将客户端请求发送到代理上，由代理转发请求到正确的节点上。&lt;/li&gt;
&lt;li&gt;服务器分片：Redis Cluster。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;13-io多路复用&#34;&gt;13 IO多路复用&lt;/h2&gt;
&lt;h3 id=&#34;131-什么是io多路复用&#34;&gt;13.1 什么是IO多路复用&lt;/h3&gt;
&lt;p&gt;IO多路复用是一种同步IO模型，实现一个线程可以监视多个文件句柄；一旦某个文件句柄就绪，就能够通知应用程序进行相应的读写操作；没有文件句柄就绪时会阻塞应用程序，交出cpu。多路是指网络连接，复用指的是同一个线程&lt;/p&gt;
&lt;h3 id=&#34;132-为什么需要io多路复用&#34;&gt;13.2 为什么需要IO多路复用&lt;/h3&gt;
&lt;p&gt;解决BIO和NIO的问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BIO：服务端采用单线程，当accept一个请求后，在recv或send调用阻塞时，将无法accept其他请求（必须等上一个请求处recv或send完），无法处理并发。&lt;/p&gt;
&lt;p&gt;当服务器端采用多线程，当accept一个请求后，开启线程进行recv，可以完成并发处理，但随着请求数增加需要增加系统线程，大量的线程占用很大的内存空间，并且线程切换会带来很大的开销，10000个线程真正发生读写事件的线程数不会超过20%，每次accept都开一个线程也是一种资源浪费&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NIO：服务器端当accept一个请求后，加入fds集合，每次轮询一遍fds集合recv(非阻塞)数据，没有数据则立即返回错误，每次轮询所有fd（包括没有发生读写事件的fd）会很浪费cpu&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IO多路复用：服务器端采用单线程通过select/epoll等系统调用获取fd列表，遍历有事件的fd进行accept/recv/send，使其能支持更多的并发连接请求&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;133-io多路复用的实现方式&#34;&gt;13.3 IO多路复用的实现方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;select&lt;/li&gt;
&lt;li&gt;poll&lt;/li&gt;
&lt;li&gt;epoll&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;134-select缺点&#34;&gt;13.4 select缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;单个进程所打开的FD是有限制的，通过FD_SETSIZE设置，默认1024&lt;/li&gt;
&lt;li&gt;每次调用select，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大&lt;/li&gt;
&lt;li&gt;对socket扫描时是线性扫描（对所有的fds遍历扫描），采用轮询的方法，效率较低（高并发时）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;135-poll与select对比&#34;&gt;13.5 poll与select对比&lt;/h3&gt;
&lt;p&gt;poll与select相比，只是没有fd的限制，其它基本一样&lt;/p&gt;
&lt;h3 id=&#34;136-poll缺点&#34;&gt;13.6 poll缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每次调用poll，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大&lt;/li&gt;
&lt;li&gt;对socket扫描时是线性扫描，采用轮询的方法，效率较低（高并发时）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;137-epoll缺点&#34;&gt;13.7 epoll缺点&lt;/h3&gt;
&lt;p&gt;epoll只能工作在linux下&lt;/p&gt;
&lt;h3 id=&#34;138-epoll的应用&#34;&gt;13.8 epoll的应用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;redis&lt;/li&gt;
&lt;li&gt;nginx&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;139-selectpollepoll之间的区别&#34;&gt;13.9 select/poll/epoll之间的区别&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;select&lt;/th&gt;
&lt;th&gt;poll&lt;/th&gt;
&lt;th&gt;epoll&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;数据结构&lt;/td&gt;
&lt;td&gt;bitmap&lt;/td&gt;
&lt;td&gt;数组&lt;/td&gt;
&lt;td&gt;红黑树&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;最大连接数&lt;/td&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;td&gt;无上限&lt;/td&gt;
&lt;td&gt;无上限&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fd拷贝&lt;/td&gt;
&lt;td&gt;每次调用select拷贝&lt;/td&gt;
&lt;td&gt;每次调用poll拷贝&lt;/td&gt;
&lt;td&gt;fd首次调用epoll_ctl拷贝，每次调用epoll_wait不拷贝&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;工作效率&lt;/td&gt;
&lt;td&gt;轮询：O(n)&lt;/td&gt;
&lt;td&gt;轮询：O(n)&lt;/td&gt;
&lt;td&gt;回调：O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;1310-epoll-lt和et模式的区别&#34;&gt;13.10 epoll LT和ET模式的区别&lt;/h3&gt;
&lt;p&gt;epoll有EPOLLLT和EPOLLET两种触发模式，LT是默认的模式，ET是“高速”模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LT模式下，只要这个fd还有数据可读，每次 epoll_wait都会返回它的事件，提醒用户程序去操作&lt;/li&gt;
&lt;li&gt;ET模式下，它只会提示一次，直到下次再有数据流入之前都不会再提示了，无论fd中是否还有数据可读。所以在ET模式下，read一个fd的时候一定要把它的buffer读完，或者遇到EAGAIN错误&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;本文转载自：https://github.com/CyC2018/CS-Notes，用于个人复习。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ArrayList源码分析</title>
        <link>https://cuterwrite.top/p/arraylist-source-code/</link>
        <pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/arraylist-source-code/</guid>
        <description>&lt;img src="https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/20210503/man-5640540_1920.5mr5hqwq7xc0.jpg" alt="Featured image of post ArrayList源码分析" /&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;  &lt;em&gt;generated with &lt;a class=&#34;link&#34; href=&#34;https://github.com/thlorenz/doctoc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DocToc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#arraylist%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90&#34; &gt;ArrayList源码分析&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-%E7%AE%80%E4%BB%8B&#34; &gt;1 简介&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#11-arraylist%E5%92%8Cvector%E7%9A%84%E5%8C%BA%E5%88%AB&#34; &gt;1.1 ArrayList和Vector的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#12-arraylist%E5%92%8Clinkedlist%E7%9A%84%E5%8C%BA%E5%88%AB&#34; &gt;1.2 ArrayList和LinkedList的区别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90&#34; &gt;2 核心源码分析&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#21-%E5%B1%9E%E6%80%A7&#34; &gt;2.1 属性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#22-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0&#34; &gt;2.2 构造函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#23-%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6&#34; &gt;2.3 扩容机制&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#231-add%E6%96%B9%E6%B3%95&#34; &gt;2.3.1 add方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#232-ensurecapacityinternal%E6%96%B9%E6%B3%95&#34; &gt;2.3.2 ensureCapacityInternal方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#233-ensureexplicitcapacity&#34; &gt;2.3.3 ensureExplicitCapacity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#234-grow%E6%96%B9%E6%B3%95&#34; &gt;2.3.4 grow方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#235-hugecapacity%E6%96%B9%E6%B3%95&#34; &gt;2.3.5 hugeCapacity方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#24-%E6%8B%B7%E8%B4%9D%E6%9C%BA%E5%88%B6&#34; &gt;2.4 拷贝机制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#25-ensurecapacity%E6%96%B9%E6%B3%95&#34; &gt;2.5 ensureCapacity方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;arraylist源码分析&#34;&gt;ArrayList源码分析&lt;/h1&gt;
&lt;h2 id=&#34;1-简介&#34;&gt;1 简介&lt;/h2&gt;
&lt;p&gt;底层：Object[]，容量能动态增长。在添加大量元素前，会先调用ensureCapacity来增加ArrayList的容量，可以减少递增再分配的次数。&lt;/p&gt;
&lt;p&gt;ArrayList继承了AbstractList，实现了List，RandomAccess，Cloneable，Serializable等接口。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RandomAccess：标志接口，接口体是空的，只是用来表明ArrayList是支持快速随机访问的。&lt;/li&gt;
&lt;li&gt;Cloneable：能被克隆&lt;/li&gt;
&lt;li&gt;Serializable：可序列化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;11-arraylist和vector的区别&#34;&gt;1.1 ArrayList和Vector的区别&lt;/h3&gt;
&lt;p&gt;底层都是Object[]，但是ArrayList线程不安全，Vector线程安全。&lt;/p&gt;
&lt;h3 id=&#34;12-arraylist和linkedlist的区别&#34;&gt;1.2 ArrayList和LinkedList的区别&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;线程安全：ArrayList和LinkedList都是线程不安全的。&lt;/li&gt;
&lt;li&gt;底层数据结构：ArrayList是Object[]，LinkedList底层是双向链表。&lt;/li&gt;
&lt;li&gt;插入和删除：ArrayList插入和删除元素的时间复杂度受元素位置的影响，为O(n - i)；LinkedList的插入和删除元素的时间复杂度不受插入元素位置的影响，都近似于O(1)，但如果在指定位置插入和删除，需要先移动到指定位置再执行操作，时间复杂度近似于O(n)。&lt;/li&gt;
&lt;li&gt;是否支持快速随机访问：ArrayList支持，LinkedList不支持。&lt;/li&gt;
&lt;li&gt;内存空间占用：ArrayList需要在列表末尾预留一定的容量空间，LinkedList的每一个元素都需要多消耗pre和next指针的空间。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-核心源码分析&#34;&gt;2 核心源码分析&lt;/h2&gt;
&lt;h3 id=&#34;21-属性&#34;&gt;2.1 属性&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;默认初始容量大小&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEFAULT_CAPACITY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;元素个数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存放数据的数组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;transient&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elementData&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;空数组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EMPTY_ELEMENTDATA&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用于默认大小实例的共享空数组实例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEFAULTCAPACITY_EMPTY_ELEMENTDATA&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;22-构造函数&#34;&gt;2.2 构造函数&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;无参&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;elementData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEFAULTCAPACITY_EMPTY_ELEMENTDATA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：以无参数构造方法创建 ArrayList 时，实际上初始化赋值的是一个空数组。当真正对数组进行添加元素操作时，才真正分配容量。即向数组中添加第一个元素时，数组容量扩为 10。（用了懒汉式的单例设计模式）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定容量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;initialCapacity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initialCapacity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;elementData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initialCapacity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initialCapacity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;elementData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EMPTY_ELEMENTDATA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;c1&#34;&gt;//抛出异常
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定collection&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Collection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;elementData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toArray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elementData&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elementData&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[].&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;elementData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;copyOf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elementData&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[].&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
     &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;elementData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EMPTY_ELEMENTDATA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;23-扩容机制&#34;&gt;2.3 扩容机制&lt;/h3&gt;
&lt;h4 id=&#34;231-add方法&#34;&gt;2.3.1 add方法&lt;/h4&gt;
&lt;h4 id=&#34;232-ensurecapacityinternal方法&#34;&gt;2.3.2 ensureCapacityInternal方法&lt;/h4&gt;
&lt;h4 id=&#34;233-ensureexplicitcapacity&#34;&gt;2.3.3 ensureExplicitCapacity&lt;/h4&gt;
&lt;h4 id=&#34;234-grow方法&#34;&gt;2.3.4 grow方法&lt;/h4&gt;
&lt;h4 id=&#34;235-hugecapacity方法&#34;&gt;2.3.5 hugeCapacity方法&lt;/h4&gt;
&lt;h3 id=&#34;24-拷贝机制&#34;&gt;2.4 拷贝机制&lt;/h3&gt;
&lt;h3 id=&#34;25-ensurecapacity方法&#34;&gt;2.5 ensureCapacity方法&lt;/h3&gt;
</description>
        </item>
        <item>
        <title>实用工具和网址</title>
        <link>https://cuterwrite.top/p/useful-tool/</link>
        <pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/useful-tool/</guid>
        <description>&lt;img src="https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/20210503/sky-5375005_1920.4x9nxtuuftk0.jpg" alt="Featured image of post 实用工具和网址" /&gt;&lt;h1 id=&#34;实用工具和网址&#34;&gt;实用工具和网址&lt;/h1&gt;
&lt;h2 id=&#34;在线画图工具&#34;&gt;在线画图工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ProcessOn：&lt;a class=&#34;link&#34; href=&#34;https://www.processon.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.processon.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Figma：&lt;a class=&#34;link&#34; href=&#34;https://www.figma.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.figma.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;在线解编码工具&#34;&gt;在线解编码工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;BASE64：&lt;a class=&#34;link&#34; href=&#34;https://base64.supfree.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://base64.supfree.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MD5：&lt;a class=&#34;link&#34; href=&#34;https://www.zxgj.cn/g/md5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zxgj.cn/g/md5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;AES/DES：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/tool/cipher/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/tool/cipher/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JWT：&lt;a class=&#34;link&#34; href=&#34;http://jwt.calebb.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://jwt.calebb.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ASCII：&lt;a class=&#34;link&#34; href=&#34;https://www.matools.com/code-convert-ascii&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.matools.com/code-convert-ascii&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Unicode：&lt;a class=&#34;link&#34; href=&#34;https://www.zxgj.cn/g/unicode&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zxgj.cn/g/unicode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;UTF8：&lt;a class=&#34;link&#34; href=&#34;https://www.zxgj.cn/g/utf8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zxgj.cn/g/utf8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;字符串：&lt;a class=&#34;link&#34; href=&#34;https://www.zxgj.cn/g/enstring&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zxgj.cn/g/enstring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;URL：&lt;a class=&#34;link&#34; href=&#34;http://tool.chinaz.com/tools/urlencode.aspx?jdfwkey=lbixzl&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://tool.chinaz.com/tools/urlencode.aspx?jdfwkey=lbixzl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;在线转换工具&#34;&gt;在线转换工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在线ACSII对照表：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/tool/ascii/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/tool/ascii/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;通用进制转换工具：&lt;a class=&#34;link&#34; href=&#34;https://www.zxgj.cn/g/jinzhi&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zxgj.cn/g/jinzhi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线浮点数十进制转换：&lt;a class=&#34;link&#34; href=&#34;http://www.binaryconvert.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.binaryconvert.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;RGB：&lt;a class=&#34;link&#34; href=&#34;https://www.zxgj.cn/g/yansezhi&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zxgj.cn/g/yansezhi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;时间戳：&lt;a class=&#34;link&#34; href=&#34;https://www.zxgj.cn/g/unix&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zxgj.cn/g/unix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;计量单位换算：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/tool/unitable/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/tool/unitable/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线JSON解析：&lt;a class=&#34;link&#34; href=&#34;http://www.json.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.json.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线JS代码格式化工具：&lt;a class=&#34;link&#34; href=&#34;https://prettier.io/playground/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://prettier.io/playground/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SQL压缩/格式化工具：&lt;a class=&#34;link&#34; href=&#34;https://www.zxgj.cn/g/sqlformat&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zxgj.cn/g/sqlformat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JSON和YAML在线转换：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/tool/jsonyaml/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/tool/jsonyaml/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JSON和XML在线转换:&lt;a class=&#34;link&#34; href=&#34;https://www.zxgj.cn/g/jsonxml&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zxgj.cn/g/jsonxml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;人民币大小写转换：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/tool/renmingbi/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/tool/renmingbi/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;正则表达式工具&#34;&gt;正则表达式工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;正则表达式调试工具：&lt;a class=&#34;link&#34; href=&#34;https://regexr.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://regexr.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;正则表达式可视化工具：&lt;a class=&#34;link&#34; href=&#34;https://jex.im/regulex/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://jex.im/regulex/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络工具&#34;&gt;网络工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IP地址归属地查询：&lt;a class=&#34;link&#34; href=&#34;https://www.ip138.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.ip138.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IP地址查询：&lt;a class=&#34;link&#34; href=&#34;https://www.ipip.net/ip.html/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.ipip.net/ip.html/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HTTP在线接口测试工具：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/php/http/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/php/http/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;在线编译运行工具&#34;&gt;在线编译运行工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C#在线编译运行（不支持input）：&lt;a class=&#34;link&#34; href=&#34;https://rextester.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://rextester.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C/C++在线编译：&lt;a class=&#34;link&#34; href=&#34;https://www.onlinegdb.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.onlinegdb.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线编译工具套装：&lt;a class=&#34;link&#34; href=&#34;https://c.runoob.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://c.runoob.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;在线生成器&#34;&gt;在线生成器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;UUID：&lt;a class=&#34;link&#34; href=&#34;https://www.zxgj.cn/g/uuid&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zxgj.cn/g/uuid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;随机数：&lt;a class=&#34;link&#34; href=&#34;https://www.zxgj.cn/g/suijishu&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zxgj.cn/g/suijishu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其它常用开发工具&#34;&gt;其它常用开发工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在线Nginx配置工具：&lt;a class=&#34;link&#34; href=&#34;https://nginxconfig.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://nginxconfig.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线对比工具：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/tool/textdiff/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/tool/textdiff/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线Chrome浏览器插件：&lt;a class=&#34;link&#34; href=&#34;https://www.crx4chrome.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.crx4chrome.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;变量命名神器：&lt;a class=&#34;link&#34; href=&#34;https://unbug.github.io/codelf/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://unbug.github.io/codelf/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;文本处理工具大全：&lt;a class=&#34;link&#34; href=&#34;https://gitee.com/wwwlib/funNLP?_from=gitee_search#https://github.com/wainshine/Company-Names-Corpus&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gitee.com/wwwlib/funNLP?_from=gitee_search#https://github.com/wainshine/Company-Names-Corpus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;在线素材网站&#34;&gt;在线素材网站&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;阿里巴巴矢量图标库：&lt;a class=&#34;link&#34; href=&#34;https://www.iconfont.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.iconfont.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;表情包在线网站：&lt;a class=&#34;link&#34; href=&#34;https://fabiaoqing.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://fabiaoqing.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;极简壁纸：&lt;a class=&#34;link&#34; href=&#34;https://bz.zzzmh.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bz.zzzmh.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wallpaper Abyss壁纸：&lt;a class=&#34;link&#34; href=&#34;https://wall.alphacoders.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wall.alphacoders.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pixabay图片素材库：&lt;a class=&#34;link&#34; href=&#34;https://pixabay.com/zh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pixabay.com/zh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Unsplash图片素材库：&lt;a class=&#34;link&#34; href=&#34;https://unsplash.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://unsplash.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pexels图片素材库：&lt;a class=&#34;link&#34; href=&#34;http://www.pexels.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.pexels.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PH图片素材库：&lt;a class=&#34;link&#34; href=&#34;https://pxhere.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pxhere.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NASA图片素材库：&lt;a class=&#34;link&#34; href=&#34;https://images.nasa.gov&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://images.nasa.gov&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;设计制作类工具&#34;&gt;设计制作类工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在线PS：&lt;a class=&#34;link&#34; href=&#34;https://www.uupoop.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.uupoop.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;中国色彩：&lt;a class=&#34;link&#34; href=&#34;http://zhongguose.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://zhongguose.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线音频剪辑：&lt;a class=&#34;link&#34; href=&#34;https://www.weixinsyt.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.weixinsyt.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线视频剪辑：&lt;a class=&#34;link&#34; href=&#34;https://www.kapwing.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.kapwing.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;LOGO在线制作：&lt;a class=&#34;link&#34; href=&#34;https://www.uugai.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.uugai.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;艺术字体在线生成：&lt;a class=&#34;link&#34; href=&#34;https://www.qt86.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.qt86.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线表格转换工具：&lt;a class=&#34;link&#34; href=&#34;https://tableconvert.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://tableconvert.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线海报设计工具：&lt;a class=&#34;link&#34; href=&#34;https://www.designcap.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.designcap.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;图片智能放大工具：&lt;a class=&#34;link&#34; href=&#34;https://bigjpg.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bigjpg.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;二维码美化器：&lt;a class=&#34;link&#34; href=&#34;https://mh.cli.im/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mh.cli.im/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线代码截图工具：&lt;a class=&#34;link&#34; href=&#34;https://carbon.now.sh/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://carbon.now.sh/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线抠图工具：&lt;a class=&#34;link&#34; href=&#34;https://www.remove.bg/zh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.remove.bg/zh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ICO图标在线生成：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/php/ico/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/php/ico/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SVG转PNG：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/tool/svg2img/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/tool/svg2img/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;视频转GIF：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/tool/giftxt/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/tool/giftxt/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;二维码在线生成：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/tool/ewm/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/tool/ewm/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;二维码在线解码：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/php/decoder/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/php/decoder/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;写作辅助工具&#34;&gt;写作辅助工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在线字数统计：&lt;a class=&#34;link&#34; href=&#34;https://www.eteste.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.eteste.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;mdnice markdown排版工具：&lt;a class=&#34;link&#34; href=&#34;https://mdnice.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mdnice.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;mdmall markdown排版工具：&lt;a class=&#34;link&#34; href=&#34;https://md.aclickall.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://md.aclickall.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;markdown目录生成器：&lt;a class=&#34;link&#34; href=&#34;https://ecotrust-canada.github.io/markdown-toc/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ecotrust-canada.github.io/markdown-toc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线图床（基于github）：&lt;a class=&#34;link&#34; href=&#34;https://picx.xpoet.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://picx.xpoet.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;图壳图床：&lt;a class=&#34;link&#34; href=&#34;https://imgkr.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://imgkr.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;免费图床：&lt;a class=&#34;link&#34; href=&#34;https://sm.ms/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://sm.ms/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线短链接工具：&lt;a class=&#34;link&#34; href=&#34;https://urlify.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://urlify.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线文本替换：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/tool/textreplace/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/tool/textreplace/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;在线办公工具&#34;&gt;在线办公工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;pdf在线处理工具1：&lt;a class=&#34;link&#34; href=&#34;https://smallpdf.com/cn/pdf-tools&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://smallpdf.com/cn/pdf-tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pdf在线处理工具2：&lt;a class=&#34;link&#34; href=&#34;https://tools.pdf24.org/zh/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://tools.pdf24.org/zh/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线多媒体转换：&lt;a class=&#34;link&#34; href=&#34;https://cn.office-converter.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cn.office-converter.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线文字识别工具：&lt;a class=&#34;link&#34; href=&#34;https://ocr.wdku.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ocr.wdku.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线文件压缩工具：&lt;a class=&#34;link&#34; href=&#34;https://docsmall.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docsmall.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;官方文档&#34;&gt;官方文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Git：&lt;a class=&#34;link&#34; href=&#34;https://www.liaoxuefeng.com/wiki/896043488029600/900375748016320&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.liaoxuefeng.com/wiki/896043488029600/900375748016320&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SVM：&lt;a class=&#34;link&#34; href=&#34;http://svnbook.red-bean.com/nightly/zh/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://svnbook.red-bean.com/nightly/zh/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nginx中文文档：&lt;a class=&#34;link&#34; href=&#34;https://www.nginx.cn/doc/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.nginx.cn/doc/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mybatis中文文档：&lt;a class=&#34;link&#34; href=&#34;https://mybatis.org/mybatis-3/zh/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mybatis.org/mybatis-3/zh/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;微信小程序官方文档：&lt;a class=&#34;link&#34; href=&#34;https://developers.weixin.qq.com/miniprogram/dev/framework/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://developers.weixin.qq.com/miniprogram/dev/framework/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NodeJs中文文档：&lt;a class=&#34;link&#34; href=&#34;http://nodejs.cn/learn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://nodejs.cn/learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Golang标准库：&lt;a class=&#34;link&#34; href=&#34;https://studygolang.com/pkgdoc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://studygolang.com/pkgdoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java 8官方文档：&lt;a class=&#34;link&#34; href=&#34;https://docs.oracle.com/javase/8/docs.api/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.oracle.com/javase/8/docs.api/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Maven官方文档：&lt;a class=&#34;link&#34; href=&#34;http://maven.apache.org/guides/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://maven.apache.org/guides/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Spring Boot官方文档：&lt;a class=&#34;link&#34; href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;RabbitMq官方文档：&lt;a class=&#34;link&#34; href=&#34;https://www.rabbitmq.com/documentation.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.rabbitmq.com/documentation.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dubbo中文文档：&lt;a class=&#34;link&#34; href=&#34;https://dubbo.apache.org/zh/docs/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://dubbo.apache.org/zh/docs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Netty官方文档：&lt;a class=&#34;link&#34; href=&#34;https://netty.io/wiki/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://netty.io/wiki/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ElasticSearch官方文档：&lt;a class=&#34;link&#34; href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Spring Cloud官方文档：&lt;a class=&#34;link&#34; href=&#34;https://spring.io/projects/spring-cloud&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://spring.io/projects/spring-cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker官方文档：&lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/get-started/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.docker.com/get-started/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;K8S中文文档：&lt;a class=&#34;link&#34; href=&#34;https://kubernetes.io/zh/docs/home/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://kubernetes.io/zh/docs/home/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vue.js中文文档：&lt;a class=&#34;link&#34; href=&#34;https://cn.vuejs.org/v2/guide/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cn.vuejs.org/v2/guide/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;React.js官方文档：&lt;a class=&#34;link&#34; href=&#34;https://reactjs.org/docs/getting-started.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://reactjs.org/docs/getting-started.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jenkins中文文档：&lt;a class=&#34;link&#34; href=&#34;https://www.jenkins.io/zh/doc/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.jenkins.io/zh/doc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ant design官方文档：&lt;a class=&#34;link&#34; href=&#34;https://www.antdv.com/docs/vue/introduce-cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.antdv.com/docs/vue/introduce-cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hutool：&lt;a class=&#34;link&#34; href=&#34;https://www.hutool.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.hutool.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Flink中文文档：&lt;a class=&#34;link&#34; href=&#34;https://flink-learning.org.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://flink-learning.org.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;厦门大学大数据实验室：&lt;a class=&#34;link&#34; href=&#34;http://dblab.xmu.edu.cn/blog/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://dblab.xmu.edu.cn/blog/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Flutter中文文档：&lt;a class=&#34;link&#34; href=&#34;https://flutter.cn/docs/development/tools/sdk/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://flutter.cn/docs/development/tools/sdk/releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Neo4j官方文档：&lt;a class=&#34;link&#34; href=&#34;https://neo4j.com/docs/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://neo4j.com/docs/&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Cypher：&lt;a class=&#34;link&#34; href=&#34;https://neo4j.com/docs/cypher-manual/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://neo4j.com/docs/cypher-manual/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python API：&lt;a class=&#34;link&#34; href=&#34;https://neo4j.com/docs/python-manual/current/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://neo4j.com/docs/python-manual/current/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python指南：
&lt;ul&gt;
&lt;li&gt;Python最佳实践：&lt;a class=&#34;link&#34; href=&#34;https://pythonguidecn.readthedocs.io/zh/latest/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pythonguidecn.readthedocs.io/zh/latest/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python3-cookbook：&lt;a class=&#34;link&#34; href=&#34;https://python3-cookbook.readthedocs.io/zh_CN/latest/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://python3-cookbook.readthedocs.io/zh_CN/latest/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go语言指南：
&lt;ul&gt;
&lt;li&gt;The way to Go：&lt;a class=&#34;link&#34; href=&#34;https://github.com/unknwon/the-way-to-go_ZH_CN/blob/master/eBook/directory.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/unknwon/the-way-to-go_ZH_CN/blob/master/eBook/directory.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go web编程：&lt;a class=&#34;link&#34; href=&#34;https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/SUMMARY.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/SUMMARY.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;7 days golang：&lt;a class=&#34;link&#34; href=&#34;https://geektutu.com/post/gee.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://geektutu.com/post/gee.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go 高级编程：&lt;a class=&#34;link&#34; href=&#34;https://chai2010.cn/advanced-go-programming-book/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://chai2010.cn/advanced-go-programming-book/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go By Example：&lt;a class=&#34;link&#34; href=&#34;https://gobyexample-cn.github.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gobyexample-cn.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;清华大学人工智能技术系列报告：&lt;a class=&#34;link&#34; href=&#34;https://reports.aminer.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://reports.aminer.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Spark中文文档v2.0.0：&lt;a class=&#34;link&#34; href=&#34;http://spark.apachecn.org/#/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://spark.apachecn.org/#/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;流媒体下载工具&#34;&gt;流媒体下载工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hotbox：&lt;a class=&#34;link&#34; href=&#34;https://www.hotbox.fun/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.hotbox.fun/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;算法学习&#34;&gt;算法学习&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;leetcode：&lt;a class=&#34;link&#34; href=&#34;https://leetcode-cn.com/problemset/all/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://leetcode-cn.com/problemset/all/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;nowcoder：&lt;a class=&#34;link&#34; href=&#34;https://www.nowcoder.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.nowcoder.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;labuladong的算法小抄：&lt;a class=&#34;link&#34; href=&#34;https://labuladong.gitbook.io/algo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://labuladong.gitbook.io/algo/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mysql索引背后的数据结构及算法原理：&lt;a class=&#34;link&#34; href=&#34;http://blog.codinglabs.org/articles/theory-of-mysql-index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://blog.codinglabs.org/articles/theory-of-mysql-index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;代码例子速查&#34;&gt;代码例子速查&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;代码速查表：&lt;a class=&#34;link&#34; href=&#34;https://devhints.io/react&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://devhints.io/react&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go by example: &lt;a class=&#34;link&#34; href=&#34;https://gobyexample-cn.github.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gobyexample-cn.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;计算机在线实验平台&#34;&gt;计算机在线实验平台&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;databrick（在线spark集群资源）：&lt;a class=&#34;link&#34; href=&#34;https://community.cloud.databricks.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://community.cloud.databricks.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;谷歌colab（在线jupyter）：&lt;a class=&#34;link&#34; href=&#34;https://colab.research.google.com/notebooks/welcome.ipynb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://colab.research.google.com/notebooks/welcome.ipynb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;腾讯云cloudstudio（在线vs theia）：&lt;a class=&#34;link&#34; href=&#34;https://coding.net/products/cloudstudio&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://coding.net/products/cloudstudio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;计算机课程学习&#34;&gt;计算机课程学习&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CS自学指南：&lt;a class=&#34;link&#34; href=&#34;https://pkuflyingpig.github.io/pku-cs-self-learning/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pkuflyingpig.github.io/pku-cs-self-learning/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PythonPark：&lt;a class=&#34;link&#34; href=&#34;https://hub.fastgit.org/Jack-Cherish/PythonPark&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://hub.fastgit.org/Jack-Cherish/PythonPark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ucore os实验指导书：&lt;a class=&#34;link&#34; href=&#34;https://chyyuu.gitbooks.io/ucore_os_docs/content/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://chyyuu.gitbooks.io/ucore_os_docs/content/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;学习CSS布局：&lt;a class=&#34;link&#34; href=&#34;https://zh.learnlayout.com/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zh.learnlayout.com/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>HashMap源码分析</title>
        <link>https://cuterwrite.top/p/hashmap/</link>
        <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/hashmap/</guid>
        <description>&lt;img src="https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/20210503/mountains-6207115_1920.6ff92y51zus0.jpg" alt="Featured image of post HashMap源码分析" /&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;  &lt;em&gt;generated with &lt;a class=&#34;link&#34; href=&#34;https://github.com/thlorenz/doctoc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DocToc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#hashmap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90&#34; &gt;HashMap源码分析&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-%E5%B1%9E%E6%80%A7&#34; &gt;1 属性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95&#34; &gt;2 构造方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-%E5%A2%9E%E5%8A%A0%E5%85%83%E7%B4%A0&#34; &gt;3 增加元素&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-%E8%AF%BB%E5%8F%96%E5%85%83%E7%B4%A0&#34; &gt;4 读取元素&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5-%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0&#34; &gt;5 删除元素&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6-%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90&#34; &gt;6 底层数据结构分析&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#61-jdk18%E4%B9%8B%E5%89%8D&#34; &gt;6.1 JDK1.8之前&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#62-jdk18%E4%B9%8B%E5%90%8E&#34; &gt;6.2 JDK1.8之后&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;hashmap源码分析&#34;&gt;HashMap源码分析&lt;/h1&gt;
&lt;h2 id=&#34;1-属性&#34;&gt;1 属性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;初始化容量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEFAULT_INITIAL_CAPACITY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最大容量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAXIMUM_CAPACITY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;负载因子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEFAULT_LOAD_FACTOR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;75f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;红黑树阈值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TREEIFY_THRESHOLD&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;链表阈值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UNTREEIFY_THRESHOLD&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;红黑树桶阈值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MIN_TREEIFY_CAPACITY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;table数组，用来初始化&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;transient&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;entrySet存放缓存&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;transient&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Entry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;entrySet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;桶的数量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;transient&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改次数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;transient&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;modCount&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阈值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;threshold&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;负载因子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loadFactor&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-构造方法&#34;&gt;2 构造方法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;HashMap()&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;HashMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;loadFactor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEFAULT_LOAD_FACTOR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HashMap(int initialCapacity)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;HashMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;initialCapacity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;initialCapacity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEFAULT_LOAD_FACTOR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HashMap(int initialCapacity, float loadFactor )&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;HashMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;initialCapacity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loadFactor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initialCapacity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//抛出数值异常
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initialCapacity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAXIMUM_CAPACITY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;initialCapacity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAXIMUM_CAPACITY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loadFactor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isNaN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loadFactor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)){&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//抛出数值异常
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;loadFactor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loadFactor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//tableSizeFor，大于等于当前值的下一个2的幂，比如输入17，返回32
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;threshold&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tableSizeFor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initialCapacity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-增加元素&#34;&gt;3 增加元素&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;put方法分析&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;V&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;V&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;putVal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hash方法分析&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;//key为空返回0，先计算key的hashcode，然后与h无符号右移16位后的二进制进行异或
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hashCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;putVal方法分析&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;V&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;putVal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;V&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;onlyIfAbsent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;evict&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    * 如果table是否等于空或者等于0，如果是则进行初始化
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    * 哈希取模，i = (n - 1) &amp;amp; hash，对值的位置进行确定
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    * 也是capacity为2的幂的原因，与运算效率高于%
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    * capacity为2的幂次时，(n - 1) &amp;amp; hash = hash % n
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    * 如果tab[i] = null，新增一个元素
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//说明该位置有值了
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; 
                               &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;eqauls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)))){&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//key值存在，无论链表还是红黑树都需要替换
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//如果是红黑树
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;putTreeVal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;            * 链表，遍历到最后节点然后插入；
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;            */&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binCount&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;binCount&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++){&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
                    &lt;span class=&#34;c1&#34;&gt;//大于红黑树阈值，转换红黑树
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;binCount&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TREEIFY_THRESHOLD&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;treeifyBin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
                    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hahs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; 
                                       &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)))){&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;        * 如果链表中重复就直接替换
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;        */&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;V&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldValue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;onlyIfAbsent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldValue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;afterNodeAccess&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldValue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//记录修改次数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;modCount&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//如果超过threshold，调用resize
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;threshold&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;resize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;afterNodeInsertion&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;evict&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;如果定位到的数组位置没有元素，直接插入。&lt;/li&gt;
&lt;li&gt;如果定位到的数组位置有元素，就要和插入的key比较，key相同则直接覆盖，如果不相同，则判断p是否是TreeNode，如果是则调用e=((TreeNode&amp;lt;K,V)p).putTreeVal(this, tab, hash, key, value)将元素添加进入。如果不是则遍历链表插入到链表尾部。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;resize方法分析&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;resize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldTab&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldCap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oldTab&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldTab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldThr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;threshold&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newCap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newThr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oldCap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oldCap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAXIMUM_CAPACITY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;threshold&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldTab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newCap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldCap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAXIMUM_CAPACITY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                  &lt;span class=&#34;n&#34;&gt;oldCap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEFAULT_INITIAL_CAPACITY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//threshold加倍
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;newThr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldThr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oldThr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;newCap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldThr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//默认Capacity和threshold，分别为16和12
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;newCap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEFAULT_INITIAL_CAPACITY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;newThr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DEFAULT_LOAD_FACTOR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEFAULT_INITIAL_CAPACITY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newThr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ft&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newCap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loadFactor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;newThr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newCap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAXIMUN_CAPACITY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ft&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAXIMUM_CAPACITY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;
                 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ft&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;threshold&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newThr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newTab&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;[])&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newCap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newTab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oldTab&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;        * 省略，拷贝旧的hash桶到newTab
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;        */&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-读取元素&#34;&gt;4 读取元素&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;get方法分析&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;V&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;getNode方法分析&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;//table有元素
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
       &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//从第一个node开始
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; 
                                 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)))){&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//first的下一个node
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//若是红黑树，调用红黑树查找方法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getTreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//否则遍历链表查找
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;
                                      &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)))){&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//table没元素了，直接返回null
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5-删除元素&#34;&gt;5 删除元素&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;remove方法分析&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;V&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;removeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;
      &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;removeNode方法分析&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;removeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
                           &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;matchValue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;movable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
       &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;V&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; 
                               &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)))){&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//如果是红黑树，调用红黑树查找方法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getTreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;//否则，迭代链表
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;
                                          &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)))){&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
                        &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
                    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//找到节点了
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;matchValue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;
                            &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)))){&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//调用红黑树删除节点的方法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;removeTreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;movable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;//是链表头部
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//修改次数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;modCount&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;afterNodeRemoval&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;6-底层数据结构分析&#34;&gt;6 底层数据结构分析&lt;/h2&gt;
&lt;h3 id=&#34;61-jdk18之前&#34;&gt;6.1 JDK1.8之前&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;底层：数组加链表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基本原理：通过key的hashcode经过扰动处理得到hash值，然后通过(n - 1) &amp;amp; hash判断当前元素存放的位置，如果当前位置存在元素的话，就判断该元素与要存放的元素的hash值以及key是否相同，如果相同则直接覆盖，不相同就用拉链法解决冲突。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扰动函数：hash方法，目的是防止一些实现比较差的hashcode方法，减少碰撞。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hash方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;性能较于1.8差，扰动次数为4&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拉链法：将链表和数组结合，也就是创建一个链表数组Node&amp;lt;K,V&amp;gt;[]，如果遇到哈希冲突，则将冲突的值加到链表中即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;62-jdk18之后&#34;&gt;6.2 JDK1.8之后&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;底层：数组加链表加红黑树&lt;/li&gt;
&lt;li&gt;基本原理：当链表长度大于阈值8时，会调用treeifyBin方法，根据HashMap数组决定是否转化成红黑树，只有当&lt;strong&gt;数组长度大于或者等于64&lt;/strong&gt;时，才会执行转换红黑树的操作，减减少搜索时间。否则只会进行resize()方法对数组进行扩容。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>前端开发知识点复习-基础篇</title>
        <link>https://cuterwrite.top/p/web-development-1/</link>
        <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/web-development-1/</guid>
        <description>&lt;img src="https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/20210503/lake-5538757_1920.2fnhpht9u2vw.jpg" alt="Featured image of post 前端开发知识点复习-基础篇" /&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;  &lt;em&gt;generated with &lt;a class=&#34;link&#34; href=&#34;https://github.com/thlorenz/doctoc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DocToc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E7%82%B9-%E5%9F%BA%E7%A1%80%E7%AF%87&#34; &gt;前端开发知识点-基础篇&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-cookiesessionsessionstorage%E5%92%8Clocalstorage&#34; &gt;1 Cookie、Session、SessionStorage和LocalStorage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-http%E5%92%8Chttps%E7%9A%84%E5%8C%BA%E5%88%AB&#34; &gt;2 Http和Https的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-http20%E7%9A%84%E7%89%B9%E6%80%A7&#34; &gt;3 Http2.0的特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-osi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B&#34; &gt;4 OSI七层模型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5-tcp%E5%92%8Cudp%E7%9A%84%E5%8C%BA%E5%88%AB&#34; &gt;5 TCP和UDP的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6-tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B&#34; &gt;6 TCP三次握手和四次挥手&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#7-http%E7%8A%B6%E6%80%81%E7%A0%81&#34; &gt;7 HTTP状态码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#8-http%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6&#34; &gt;8 HTTP缓存机制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#9-xss%E6%94%BB%E5%87%BB%E5%92%8Ccsrf%E6%94%BB%E5%87%BB&#34; &gt;9 XSS攻击和CSRF攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#10-http%E5%B8%B8%E8%A7%81%E8%AF%B7%E6%B1%82%E5%A4%B4&#34; &gt;10 HTTP常见请求头&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#11-http%E5%B8%B8%E8%A7%81%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95&#34; &gt;11 HTTP常见请求方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#12-%E8%BE%93%E5%85%A5url%E5%88%B0%E6%98%BE%E7%A4%BA%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%BF%87%E7%A8%8B&#34; &gt;12 输入URL到显示页面的过程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#13-websocket&#34; &gt;13 Websocket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#14-bom%E5%AF%B9%E8%B1%A1&#34; &gt;14 BOM对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#15-cors%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E7%9A%84%E6%96%B9%E5%BC%8F&#34; &gt;15 CORS跨域请求的方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#16-css%E7%9B%92%E6%A8%A1%E5%9E%8B&#34; &gt;16 CSS盒模型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#17-link%E6%A0%87%E7%AD%BE%E5%92%8Cimport%E6%A0%87%E7%AD%BE%E7%9A%84%E5%8C%BA%E5%88%AB&#34; &gt;17 link标签和import标签的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#18-transition%E5%92%8Canimation%E7%9A%84%E5%8C%BA%E5%88%AB&#34; &gt;18 transition和animation的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#19-flex%E5%B8%83%E5%B1%80&#34; &gt;19 Flex布局&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#20-bfc&#34; &gt;20 BFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#21-%E5%9D%97%E5%85%83%E7%B4%A0%E5%92%8C%E8%A1%8C%E5%85%83%E7%B4%A0&#34; &gt;21 块元素和行元素&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#22-html5%E5%92%8Ccss3%E7%9A%84%E6%96%B0%E5%85%83%E7%B4%A0&#34; &gt;22 HTML5和CSS3的新元素&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#23-%E9%87%8D%E7%BB%98%E5%92%8C%E9%87%8D%E6%8E%92&#34; &gt;23 重绘和重排&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#24-%E9%97%AD%E5%8C%85&#34; &gt;24 闭包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#25-%E7%B1%BB%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E7%BB%A7%E6%89%BF&#34; &gt;25 类的创建和继承&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#26-promisegeneratorasyncawait&#34; &gt;26 promise、generator、async/await&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#27-%E4%BA%8B%E4%BB%B6%E6%B5%81&#34; &gt;27 事件流&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#28-%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98%E4%BB%A3%E7%90%86&#34; &gt;28 事件委托（代理）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#29-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF&#34; &gt;29 事件循环&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#30-%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD%E5%92%8C%E9%A2%84%E5%8A%A0%E8%BD%BD&#34; &gt;30 图片懒加载和预加载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#31-new%E6%93%8D%E4%BD%9C%E7%AC%A6&#34; &gt;31 new操作符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#32-bindapplycall%E7%9A%84%E5%8C%BA%E5%88%AB&#34; &gt;32 bind、apply、call的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#33-%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96&#34; &gt;33 节流和防抖&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#34-%E6%B7%B1%E6%8B%B7%E8%B4%9D&#34; &gt;34 深拷贝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#35-%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E6%94%B9%E5%8F%98%E7%9B%91%E5%90%AC-proxy&#34; &gt;35 对象属性改变监听-Proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#36-%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E5%92%8C%E6%9A%82%E6%97%B6%E6%80%A7%E6%AD%BB%E5%8C%BA&#34; &gt;36 变量提升和暂时性死区&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#37-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0&#34; &gt;37 箭头函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#38-%E5%8E%9F%E5%9E%8B%E9%93%BE&#34; &gt;38 原型链&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#39-es6%E6%96%B0%E7%89%B9%E6%80%A7&#34; &gt;39 ES6新特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#40-%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95&#34; &gt;40 垂直居中的方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#41-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96&#34; &gt;41 前端性能优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#42-get%E5%92%8Cpost%E7%9A%84%E5%8C%BA%E5%88%AB&#34; &gt;42 get和post的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#43-web-worker&#34; &gt;43 web worker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#44-%E6%B5%AE%E5%8A%A8%E6%B8%85%E9%99%A4&#34; &gt;44 浮动清除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#45-css%E9%80%89%E6%8B%A9%E5%99%A8&#34; &gt;45 CSS选择器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;前端开发知识点-基础篇&#34;&gt;前端开发知识点-基础篇&lt;/h1&gt;
&lt;h2 id=&#34;1-cookiesessionsessionstorage和localstorage&#34;&gt;1 Cookie、Session、SessionStorage和LocalStorage&lt;/h2&gt;
&lt;p&gt;Cookie：服务器提供的一种用于维护会话状态信息的数据，通过服务器发送到浏览器，浏览器保存在本地的一种纯文本文件，当下一次有同源的请求时，将保存的Cookie数据添加到请求头部，发送给服务端。可以用来实现记录用户登录状态等功能。&lt;/p&gt;
&lt;p&gt;Session：服务器为了保存用户状态而创建的一个特殊的对象。在浏览器第一次访问服务器时，服务器会创建一个session对象,该对象有一个唯一的id,即sessionid，服务器会把sessionid以cookie的形式发送给浏览器,当浏览器再次访问服务器时,会携带cookie在请求头,可以通过cookie中的sessionid来访问session对象，可以实现在http无状态基础上实现用户状态管理。&lt;/p&gt;
&lt;p&gt;Cookie的特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cookie数据存放在客户端上。&lt;/li&gt;
&lt;li&gt;Cookie是非安全的，由于存在本地，有被盗取的可能。&lt;/li&gt;
&lt;li&gt;Cookie保存的数据不能超过4K。&lt;/li&gt;
&lt;li&gt;Cookie始终在同源的HTTP请求中携带。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如何设置Cookie：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务端：使用Set-Cookie的响应头部，包含5个属性值expires、 domain、path、secure和httponly，分别代表过期时间、域名、路径、安全传输、是否禁用客户端js脚本访问。&lt;/li&gt;
&lt;li&gt;客户端：通过JS脚本，例如document.cookie&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Cookie和Session和区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cookie存放在客户端，Session存放在服务端。&lt;/li&gt;
&lt;li&gt;Cookie是非安全的，考虑安全应该使用Session&lt;/li&gt;
&lt;li&gt;访问增多时，服务器压力比较大，考虑使用Cookie&lt;/li&gt;
&lt;li&gt;单个Cookie保存的数据不能超过4K&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Cookie、SessionStorage和LocalStorage的区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cookie始终在同源的HTTP请求中携带。（即使不需要）&lt;/li&gt;
&lt;li&gt;Cookie可以限制可访问的path&lt;/li&gt;
&lt;li&gt;存储大小：Cookie存放数据不能超过4k，WebStorage可以达到5M或更大。&lt;/li&gt;
&lt;li&gt;有效期不同：SessionStorage只在当前浏览器窗口关闭前有效，LocalStorage始终有效，用作持久化，Cookie在设置的过期时间之前一直有效。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Cookie常用场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;保持用户登录状态&lt;/li&gt;
&lt;li&gt;跟踪用户行为，记录用户选项&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-http和https的区别&#34;&gt;2 Http和Https的区别&lt;/h2&gt;
&lt;p&gt;HTTPS基本原理：客户端使用HTTPS URL访问服务端，要去服务端建立SSL连接，服务端接收到客户端请求后，会将网站的证书（携带公钥）返回给客户端，客户端和服务端开始协商SSL连接的安全等级，也就是&lt;strong&gt;加密等级&lt;/strong&gt;，然后两者通过协商一致的安全等级，建立&lt;strong&gt;会话密钥&lt;/strong&gt;，然后客户端通过网站的公钥来加密会话密钥，传给网站，服务端通过自己的&lt;strong&gt;私钥&lt;/strong&gt;解密出会话密钥，通过会话密钥加密与客户端的通信。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安全性：HTTPS是安全超文本协议，在HTTP基础上有更强的安全性，简单来说，HTTPS是使用了TLS/SSL加密的HTTP协议。&lt;/li&gt;
&lt;li&gt;申请证书：HTTPS需要使用CA证书。&lt;/li&gt;
&lt;li&gt;传输协议：HTTP以明文形式传输数据，HTTPS以加密形式传输数据。&lt;/li&gt;
&lt;li&gt;端口号不同：一般来说，HTTP协议的端口为80，HTTPS的端口为443&lt;/li&gt;
&lt;li&gt;连接方式：HTTP的连接简单，是无状态的，HTTPS在HTTP的基础上使用了SSL协议进行加密传输。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-http20的特性&#34;&gt;3 Http2.0的特性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;提升了访问速度&lt;/li&gt;
&lt;li&gt;允许多路复用：允许同时通过单一的HTTP/2连接发送多重请求-响应信息。&lt;/li&gt;
&lt;li&gt;二进制分帧：将所有的传输数据分割为更小的数据帧，并对它们进行二进制编码。&lt;/li&gt;
&lt;li&gt;首部压缩&lt;/li&gt;
&lt;li&gt;服务器端推送&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-osi七层模型&#34;&gt;4 OSI七层模型&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;应用层：文件传输，常用协议HTTP、STMP、FTP&lt;/li&gt;
&lt;li&gt;表示层：数据格式化、代码转换、数据加密&lt;/li&gt;
&lt;li&gt;会话层：建立和解除会话&lt;/li&gt;
&lt;li&gt;传输层：提供端对端的接口，TCP/UDP&lt;/li&gt;
&lt;li&gt;网络层：为数据包选择路由，IP/ICMP&lt;/li&gt;
&lt;li&gt;数据链路层：传输带有地址的帧。&lt;/li&gt;
&lt;li&gt;物理层：二进制的数据形式在物理媒体上传输数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5-tcp和udp的区别&#34;&gt;5 TCP和UDP的区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;TCP是面向连接的，UDP是无连接的，即发送数据前不需要先建立连接。&lt;/li&gt;
&lt;li&gt;TCP提供可靠的服务，无差错、不丢失、不重复、按序到达，UDP尽最大努力交付。（大数据量使用TCP）&lt;/li&gt;
&lt;li&gt;TCP面向字节流，UDP面向报文。（UDP无拥塞控制，可能出现丢包）&lt;/li&gt;
&lt;li&gt;TCP只能1对1，UDP支持1对1和1对多。&lt;/li&gt;
&lt;li&gt;TCP首部较大为20字节，UDP只有8字节。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;6-tcp三次握手和四次挥手&#34;&gt;6 TCP三次握手和四次挥手&lt;/h2&gt;
&lt;p&gt;TCP三次握手：（A为客户端，B为服务端）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;B处于监听，A向B发送连接请求报文SYN=1，ACK=0，选择一个初始的序号x&lt;/li&gt;
&lt;li&gt;B收到连接请求报文，如果同意连接，则向A发送连接确认报文SYN=1，ACK=1，确认号ack=x+1，选择初始序号y&lt;/li&gt;
&lt;li&gt;A收到B的连接确认报文，向B发送确认报文ACK=1，确认号ack=y+1，序号为x+1&lt;/li&gt;
&lt;li&gt;B收到A的确认，连接建立。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;三次握手的原因&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第三次握手防止失效的连接请求到达服务器，让服务器错误打开连接。客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务端返回的确认，导致：客户端超时重传重新建立连接，这时就会出现2个SYN连接。如果有第三次握手，客户端会忽略服务端之后发送的对滞留连接请求的确认，不进行第三次握手，因此就不会打开连接。&lt;/p&gt;
&lt;p&gt;TCP四次挥手：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A发送连接释放报文FIN=1，序号为u&lt;/li&gt;
&lt;li&gt;B收到后发出确认ACK=1, ack=x+1, 序号为v，此时TCP属于半关闭状态，A不能发数据，B能发数据。&lt;/li&gt;
&lt;li&gt;B不需要连接时，发送连接释放报文FIN=1，ACK=1，ack=u+1，序号为w&lt;/li&gt;
&lt;li&gt;A收到后发出确认ACK=1，ack=w+1，序号为u+1，进入TIME-WAIT状态，等待2MSL（最大报文存存活时间）后释放连接。&lt;/li&gt;
&lt;li&gt;B收到A的确认后释放连接。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;7-http状态码&#34;&gt;7 HTTP状态码&lt;/h2&gt;
&lt;p&gt;状态码按第一个数字分类，1表示信息，2表示成功，3表示重定向，4表示客户端错误，5表示服务端错误。&lt;/p&gt;
&lt;p&gt;常见状态码：101切换协议、200成功、301永久重定向、302临时重定向、304未修改、400请求无效、401未认证、403拒绝执行、404未找到资源&lt;/p&gt;
&lt;p&gt;200和304的区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;200是请求成功，一般用于GET和POST&lt;/li&gt;
&lt;li&gt;304是未修改，所请求的资源未修改，服务器返回此状态码时，不会返回任何资源，客户端通过缓存访问资源（协商缓存）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;8-http缓存机制&#34;&gt;8 HTTP缓存机制&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;强缓存：返回状态码为200，不会向服务端发送请求，直接从缓存取资源。相关字段有pragma、expires、cache-control（cache-control优先级更高，pragma优先级最高）。&lt;/li&gt;
&lt;li&gt;协商缓存：返回状态码为304，会向服务端发送请求，通过服务器告知缓存是否可用。相关字段有Last-Modified/If-Modified-Since，Etag/If-None-Match&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;缓存流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;缓存是否过期：未过期，则从缓存读取（强缓存），否则下一步。&lt;/li&gt;
&lt;li&gt;Etag值：True，向服务端发送带If-None-Match的请求，否则继续判断Last-Modified&lt;/li&gt;
&lt;li&gt;Last-Modified为True，向服务端发送带If-Modified-Since的请求，否则正式发送请求，相应后缓存协商。。（无缓存）&lt;/li&gt;
&lt;li&gt;服务器根据If-None-Match和If-Modified-Since决策返回200还是304，304则从缓存读取（协商缓存），200则走正常请求。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;9-xss攻击和csrf攻击&#34;&gt;9 XSS攻击和CSRF攻击&lt;/h2&gt;
&lt;p&gt;XSS攻击：跨站脚本攻击，盗取Cookie，在返回的HTML中嵌入js脚本，防范方法：用户输入检查（过滤特殊字符等）、设置set-cookie的httponly属性。&lt;/p&gt;
&lt;p&gt;CSRF攻击：跨站请求伪造，利用Cookie，以用户的名义发送恶意请求。防范方法：验证码、检查HTTPS头部的referer、使用token。&lt;/p&gt;
&lt;h2 id=&#34;10-http常见请求头&#34;&gt;10 HTTP常见请求头&lt;/h2&gt;
&lt;p&gt;可以划分为：通用首部、请求首部、相应首部和实体首部&lt;/p&gt;
&lt;p&gt;通用首部：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Accept：可接受的响应内容类型&lt;/li&gt;
&lt;li&gt;Accept-Encoding：可接受的响应内容编码形式&lt;/li&gt;
&lt;li&gt;Accept-Language：可接受的响应语言列表&lt;/li&gt;
&lt;li&gt;Cache-Control：是否使用强缓存&lt;/li&gt;
&lt;li&gt;Pragma：一般来说指，是否使用强缓存&lt;/li&gt;
&lt;li&gt;Connection：连接类型（keep-alive）&lt;/li&gt;
&lt;li&gt;User-Agent：浏览器的身份标识字符串&lt;/li&gt;
&lt;li&gt;Content-Length：8进制标识的请求体的长度。&lt;/li&gt;
&lt;li&gt;Content-Type：请求体的MIME类型，用于POST和GET&lt;/li&gt;
&lt;li&gt;Host：服务器的域名及监听端口号，80则可以省略&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;请求首部：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;cookie&lt;/li&gt;
&lt;li&gt;Etag/If-None-Match&lt;/li&gt;
&lt;li&gt;Last-Modified/if-Modified-Since等&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;响应首部：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;set-cookie等&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;11-http常见请求方法&#34;&gt;11 HTTP常见请求方法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;get：请求资源&lt;/li&gt;
&lt;li&gt;head：请求header&lt;/li&gt;
&lt;li&gt;post：建立或修改资源。&lt;/li&gt;
&lt;li&gt;put：取代资源&lt;/li&gt;
&lt;li&gt;delete：删除指定资源&lt;/li&gt;
&lt;li&gt;connect：&lt;/li&gt;
&lt;li&gt;options：允许客户端查看服务端的性能&lt;/li&gt;
&lt;li&gt;trace：回显服务器收到的请求，用于测试和诊断&lt;/li&gt;
&lt;li&gt;patch：对put的补充，对已有资源局部更新。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;12-输入url到显示页面的过程&#34;&gt;12 输入URL到显示页面的过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;首先需要找到这个url域名的服务器ip，首先会寻找缓存中的记录，如果没有则查找本地的hosts文件是否有记录，如果没有则进行下一步。&lt;/li&gt;
&lt;li&gt;DNS解析：首先，客户端通过发送DHCP请求报文获取网关路由器的IP地址，然后通过ARP协议获取网关路由器的MAC地址，接着向网关路由器发送DNS查询报文，到达DNS服务器后，在DNS数据库中查询域名解析后的IP地址。&lt;/li&gt;
&lt;li&gt;浏览器根据得到的IP地址及相应的端口号，构造一个HTTP请求报文，并将这个HTTP请求封装在一个TCP包中，依次经过传输层、网络层、数据链路层、物理层到达服务端，服务端解析这个请求来作出响应给浏览器。&lt;/li&gt;
&lt;li&gt;浏览器解析响应内容并渲染页面，结束连接。（DOM树和CSSOM树）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;13-websocket&#34;&gt;13 Websocket&lt;/h2&gt;
&lt;p&gt;WebSocket是HTML5中的协议，支持持久连续，http协议不支持持久性连接。Http1.0和HTTP1.1都不支持持久性的链接，HTTP1.1中的keep-alive，将多个http请求合并为1个。&lt;/p&gt;
&lt;p&gt;HTTP的生命周期通过Request来界定，也就是Request一个Response，那么在Http1.0协议中，这次Http请求就结束了。在Http1.1中进行了改进，有一个connection：Keep-alive，也就是说，在一个Http连接中，可以发送多个Request，接收多个Response。但是必须记住，在Http中一个Request只能对应有一个Response，而且这个Response是被动的，不能主动发起。&lt;/p&gt;
&lt;p&gt;WebSocket是基于Http协议的，或者说借用了Http协议来完成一部分握手，在握手阶段与Http是相同的。有2个相关的请求头，upgrade，connection。&lt;/p&gt;
&lt;p&gt;upgrade:websocket&lt;/p&gt;
&lt;p&gt;connection:upgrade&lt;/p&gt;
&lt;h2 id=&#34;14-bom对象&#34;&gt;14 BOM对象&lt;/h2&gt;
&lt;p&gt;浏览器对象，location、history和navigator&lt;/p&gt;
&lt;p&gt;常用属性和方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;history：go、back、forward&lt;/li&gt;
&lt;li&gt;navigator：userAgent、cookieEnabled&lt;/li&gt;
&lt;li&gt;location：
&lt;ol&gt;
&lt;li&gt;get类型：href、search、hash、host、hostname、pathname、port、protocal&lt;/li&gt;
&lt;li&gt;set类型：assgin（设置url）、replace（设置url，并且在history中移除）、reload&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;15-cors跨域请求的方式&#34;&gt;15 CORS跨域请求的方式&lt;/h2&gt;
&lt;p&gt;cors：跨域资源共享，客服了AJAX只能同源使用的限制。&lt;/p&gt;
&lt;p&gt;只要同时满足以下两大条件，就属于简单请求&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;请求方法为head、get、post之一&lt;/li&gt;
&lt;li&gt;请求头只有：Accepet、Accpet-Language、Content-Language、Last-Event-ID、Content-Type这五种，并且Content-type只有application/x-www-form-unlencoded、multipart/form-data、text/plain这三种。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于简单请求，浏览器直接发出CORS请求，在请求头加上Origin字段，用来说明来自哪个源，服务器根据这个值决定是否同意此次请求，同意则返回响应，响应头多出几个字段（以&lt;strong&gt;Access-Control-&lt;strong&gt;开头），否则返回一个正常的HTTP响应，但请求头&lt;/strong&gt;不包含Access-Control-Allow-Origin字段&lt;/strong&gt;，抛出一个错误。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;withCredentials属性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CORS请求默认不发送Cookie和HTTP认证信息，如果需要发送，一方面需要服务器同意，指定Access-Control-Allow-Credentials为True，另一方面ajax请求要设置withCredentials属性为true。此外，如果要发送Cookie，Access-Control-Allow-Origin就不能设置为星号，必须指定明确的、与明确网页一致的域名。同时，Cookie依然遵循同源政策。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;预检请求&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于复杂请求的CORS请求，会在正式通信前，增加一次HTTP查询请求，称为预检请求，浏览器先询问服务器，如果同意才会发出正式的XMLHttpRequest请求，否则就报错。&lt;/p&gt;
&lt;p&gt;预检请求用的请求方法为OPTIONS，请求头有Origin、Access-Control-Request-Method、Access-Control-Request-Headers这三个字段。&lt;/p&gt;
&lt;p&gt;一旦服务器通过了预检请求，以后每次浏览器正常的CORS请求，都跟正常请求一样，会有一个OrIgin请求头字段，服务器响应请求头会带有Access-Control-Allow-Origin。&lt;/p&gt;
&lt;h2 id=&#34;16-css盒模型&#34;&gt;16 CSS盒模型&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;标准盒模型：box-sizing：content-box；width=content&lt;/li&gt;
&lt;li&gt;IE盒模型：box-sizing：border-box；width=content+border+padding&lt;/li&gt;
&lt;li&gt;box-sizing：padding-box；width=content+padding&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;17-link标签和import标签的区别&#34;&gt;17 link标签和import标签的区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;link属于html标签，@import是css提供的。&lt;/li&gt;
&lt;li&gt;加载时机：页面加载时，link会同时加载，而@import引用的css会等到页面加载结束后加载。&lt;/li&gt;
&lt;li&gt;兼容性：@import只有IE5以上才支持。&lt;/li&gt;
&lt;li&gt;优先级：link大于@import&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;18-transition和animation的区别&#34;&gt;18 transition和animation的区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;大部分属性相同，都是随时间改变元素的属性值。&lt;/li&gt;
&lt;li&gt;transition需要触发一个事件才能改变属性，而animation不需要触发任何事件。&lt;/li&gt;
&lt;li&gt;transition为2帧，animation可以一帧一帧。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;19-flex布局&#34;&gt;19 Flex布局&lt;/h2&gt;
&lt;p&gt;弹性布局，用来为盒状模型提供最大的灵活性。&lt;/p&gt;
&lt;p&gt;划分：容器属性和元素属性&lt;/p&gt;
&lt;p&gt;容器属性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;flex-direction：主轴方向&lt;/li&gt;
&lt;li&gt;flex-wrap：换行规则&lt;/li&gt;
&lt;li&gt;flew-flow：上面两者结合。&lt;/li&gt;
&lt;li&gt;justify-content：主轴对齐方式&lt;/li&gt;
&lt;li&gt;align-items：交叉轴对齐方式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;元素属性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;order：排列顺序&lt;/li&gt;
&lt;li&gt;flex-glow：放大比例&lt;/li&gt;
&lt;li&gt;flex-shrink：缩小比例&lt;/li&gt;
&lt;li&gt;flex-basis：占据空间&lt;/li&gt;
&lt;li&gt;flex：上面三者的缩写&lt;/li&gt;
&lt;li&gt;align-self：允许元素与其它项目的对齐方式不一样，默认auto，继承父元素的align-item&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;20-bfc&#34;&gt;20 BFC&lt;/h2&gt;
&lt;p&gt;BFC：块级格式化上下文，用于清除浮动，防止margin重叠等&lt;/p&gt;
&lt;p&gt;BFC是页面上的一个独立容器，子元素不会影响到外面，计算BFC的高度时，浮动元素也会参与计算。&lt;/p&gt;
&lt;p&gt;会生成BFC的元素：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;float不为none的元素&lt;/li&gt;
&lt;li&gt;position为fixed和absolute的元素&lt;/li&gt;
&lt;li&gt;display为inline-block、table-cell、table-caption、flex、inline-flex的元素。&lt;/li&gt;
&lt;li&gt;overflow不为visible的元素&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;21-块元素和行元素&#34;&gt;21 块元素和行元素&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;块元素：独占一行，并且有自动填满父元素，可以设置margin和padding以及高度和宽度&lt;/li&gt;
&lt;li&gt;行元素：不会独占一行，width和height会失效，并且在垂直方向的padding和margin会失效。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;22-html5和css3的新元素&#34;&gt;22 HTML5和CSS3的新元素&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;HTML5新增元素：
&lt;ol&gt;
&lt;li&gt;新标签：8个语义标签（header、section、footer、aside、nav、main、article、figure）、mark高亮、progress进度、新表单控件(calendar、data、time、email、url、search)、新的input类型（color、date、datetime、datetime-local、email）&lt;/li&gt;
&lt;li&gt;canvas绘图，支持内联SVG，支持MathML&lt;/li&gt;
&lt;li&gt;多媒体：audio、video、source、embed track&lt;/li&gt;
&lt;li&gt;本地离线存储：manifest配置文件&lt;/li&gt;
&lt;li&gt;web存储：localStorage、SessionStorage&lt;/li&gt;
&lt;li&gt;其它：web worker、websocket&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;CSS3新元素
&lt;ol&gt;
&lt;li&gt;边框： border-radius、box-shadow&lt;/li&gt;
&lt;li&gt;背景：background-size、background-origin&lt;/li&gt;
&lt;li&gt;文本效果：text-shadow、word-wrap、word-break等&lt;/li&gt;
&lt;li&gt;2D/3D转换：transform&lt;/li&gt;
&lt;li&gt;动画：animation&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;23-重绘和重排&#34;&gt;23 重绘和重排&lt;/h2&gt;
&lt;p&gt;DOM的变化影响到了预算内宿的几何属性比如宽高，浏览器重新计算元素的几何属性，其他元素的几何属性也会受到影响，浏览器需要重新构造渲染树，这个过程称之为&lt;strong&gt;重排&lt;/strong&gt;，浏览器将受到影响的部分重新绘制在屏幕上的过程称为&lt;strong&gt;重绘&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;重绘和重排的原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;添加或删除可见的DOM元素&lt;/li&gt;
&lt;li&gt;元素尺寸位置的改变&lt;/li&gt;
&lt;li&gt;浏览器页面初始化&lt;/li&gt;
&lt;li&gt;浏览器窗口大小发生改变。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;重排一定导致重绘，重绘不一定导致重排。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;减少重排，提高性能的方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;元素的多次样式修改合并成一次修改。&lt;/li&gt;
&lt;li&gt;如需进行对DOM节点进行多次操作，先将其脱离文本流之后再进行多次操作。&lt;/li&gt;
&lt;li&gt;table布局的渲染与普通DOM节点的操作相比，性能消耗更大，如果可以，尽量减少table布局的使用。&lt;/li&gt;
&lt;li&gt;缓存常用的布局信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;24-闭包&#34;&gt;24 闭包&lt;/h2&gt;
&lt;p&gt;闭包：当一个嵌套的内部函数引用了外部函数的变量或者函数时，外部函数在执行时就产生了闭包。&lt;/p&gt;
&lt;p&gt;典型的闭包：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将函数作为灵一个函数的返回值&lt;/li&gt;
&lt;li&gt;将函数作为实参传给另一个函数调用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;闭包特点：函数嵌套函数，内部函数引用外部函数的变量。&lt;/p&gt;
&lt;p&gt;闭包的作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;延长外部函数局部变量的生命周期，可以用于实现计数器。&lt;/li&gt;
&lt;li&gt;可以形成变量的局部作用域，实现函数封装。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;闭包的缺点：函数定义的变量和数据会一直存在内存函数中，不会被及时释放，容易导致内存泄漏。&lt;/p&gt;
&lt;h2 id=&#34;25-类的创建和继承&#34;&gt;25 类的创建和继承&lt;/h2&gt;
&lt;p&gt;类的创建：new一个function，在这个function中的prototype里面添加属性和方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Animal&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//实例方法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sleep&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;正在睡觉!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//原型方法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;eat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;food&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;正在吃&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;food&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;类的继承：4种方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;原型链继承（new一个空对象，空对象指向Animal，缺点是无法多继承）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Cat&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构造继承（使用父亲的构造函数来增强子类实例，等于复制父亲的实例属性）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;优点：可以多继承&lt;/p&gt;
&lt;p&gt;缺点：只能继承实例属性和方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实例集成和拷贝继承：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实例继承：为父亲实例添加新特性，作为子类实例返回&lt;/li&gt;
&lt;li&gt;拷贝继承：拷贝父亲元素上的属性和方法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组合继承：构造继承和原型链继承的组合&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;constructor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过调用父类构造，继承父亲的属性并保留传参的优点，然后通过将父亲实例作为子类原型，实现函数复用。&lt;/p&gt;
&lt;p&gt;特点：可以继承实例属性，也可以继承原型属性&lt;/p&gt;
&lt;p&gt;缺点：调用了两次父类构造函数，生成了两份实例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;寄生组合继承：通过寄生方式，砍掉父亲的实例属性&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Super&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){};&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;Super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最常用的方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;26-promisegeneratorasyncawait&#34;&gt;26 promise、generator、async/await&lt;/h2&gt;
&lt;p&gt;promise：CommonJS工作组提出的一种规范，目的是为异步编程提供统一接口。每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。有三个状态：等待（pending）、已完成（resolved，又称fulfilled）、已拒绝（rejected）。promise必须实现then方法（可以说，then就是promise的核心），而且then必须返回一个promise，同一个promise的then可以调用多次，并且回调的执行顺序跟它们被定义时的顺序一致。then方法接受两个参数，第一个参数是成功时的回调，在promise由“等待”态转换到“完成”态时调用，另一个是失败时的回调，在promise由“等待”态转换到“拒绝”态时调用。同时，then可以接受另一个promise传入，也接受一个“类then”的对象或方法，即thenable对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用举例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)=&amp;gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;work&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&amp;gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&amp;gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;promise的用处&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解决了回调函数的回调地狱问题，有时候我们的请求需要上一个请求返回的结果，会造成相互间回调函数的嵌套，使得代码的可读性和维护性很低。&lt;/li&gt;
&lt;li&gt;让代码变得扁平，可读性更好，then返回一个promise，可以把then串起来，then返回的promise装载了由调用返回的值。&lt;/li&gt;
&lt;li&gt;在异步回调中，函数的执行栈与原函数分离开，导致外部无法抓住异常。在promise中我们可以使用reject捕获失败情况，和catch捕获执行异常。&lt;/li&gt;
&lt;li&gt;promise只不过是一种更良好的编程风格。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;promise的缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不设置回调函数，promise内部抛出的错误，无法返回到外部。&lt;/li&gt;
&lt;li&gt;处于pending状态时，无法得知进展到哪一个阶段。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;async和await：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;async函数返回一个promise对象，在没有await的情况下执行async函数，它会立即返回一个promise对象，并且，绝对不会注意后面语句的执行，await关键字只能用在aync定义的函数内； 
await 可以用于等待一个 async 函数的返回值，如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。async/await使得异步代码看起来像同步代码，使代码简洁，可读性更好，避免嵌套。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;27-事件流&#34;&gt;27 事件流&lt;/h2&gt;
&lt;p&gt;事件流：从页面接受事件的顺序，DOM2级事件流包括下面几个阶段&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;事件捕获阶段&lt;/li&gt;
&lt;li&gt;处于目标阶段&lt;/li&gt;
&lt;li&gt;事件冒泡阶段&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;addEventListener：DOM2级事件新增的指定事件处理程序的操作，这个方法接受三个参数，要处理的事件名，作为事件处理程序的函数和一个布尔值（true则在捕获阶段调用事件处理程序，否则在冒泡阶段调用）。IE只支持事件冒泡。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;addEventListener示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;op&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;//do something
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;28-事件委托代理&#34;&gt;28 事件委托（代理）&lt;/h2&gt;
&lt;p&gt;事件委托：事件委托指的是，不在事件的发生地（直接dom）上设置监听函数，而是在其父元素上设置监听函数，通过事件冒泡，父元素可以监听到子元素上事件的触发，通过判断事件发生元素DOM的类型，来做出不同的响应。&lt;/p&gt;
&lt;p&gt;举例：最经典的就是ul和li标签的事件监听，比如我们在添加事件时候，采用事件委托机制，不会在li标签上直接添加，而是在ul父元素上添加。&lt;/p&gt;
&lt;p&gt;优点：比较合适动态元素的绑定，新添加的子元素也会有监听函数，也可以有事件触发机制。&lt;/p&gt;
&lt;h2 id=&#34;29-事件循环&#34;&gt;29 事件循环&lt;/h2&gt;
&lt;p&gt;事务队列中，在每一次事件循环中，宏任务只会提取一个执行，而微任务会一直提取，直到微任务队列为空为止。&lt;/p&gt;
&lt;p&gt;也就是说如果某个微任务任务被推入到执行中，那么当主线程任务执行完成后，会循环调用该队列任务中的下一个任务来执行，直到该任务队列到最后一个任务为止。而事件循环每次只会入栈一个宏任务,主线程执行完成该任务后又会检查微任务队列并完成里面的所有任务后再执行宏任务队列的任务。&lt;/p&gt;
&lt;p&gt;宏任务：setTimeOut、setInterval、setImmediate、IO、UI渲染、主JS、requestAnimationFrame等。&lt;/p&gt;
&lt;p&gt;微任务：process.nextTick、promise.then()，Object.observe()等&lt;/p&gt;
&lt;h2 id=&#34;30-图片懒加载和预加载&#34;&gt;30 图片懒加载和预加载&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;懒加载：迟缓加载甚至不加载。（减少服务器的压力）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实现方法：图片地址不放在src，而是放在其它属性，页面加载后，根据scrollTop判断图片是否在用户视野内，如果在，则将data-original属性中的值放在src。在滚动事件中重复判断图片是否进入视野。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;预加载：提前加载图片，当用户需要查看时直接从本地缓存中渲染。（会增大服务器的压力）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;CSS实现：background：url()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JS实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;xxx&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;31-new操作符&#34;&gt;31 new操作符&lt;/h2&gt;
&lt;p&gt;new操作符新建了一个空对象，这个对象原型指向构造函数的prototype，执行构造函数后返回这个对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;实现一个new的方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){...}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//var a = new Animal();
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myNew&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Constructor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;shifit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//绑定原型
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;__&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;proto__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//调用构造函数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;object&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;32-bindapplycall的区别&#34;&gt;32 bind、apply、call的区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;apply和call用来改变函数的this指向，它们两个函数的第一个参数都是一样的，表示要改变指向的那个对象，第二个参数，apply中是数组，而call是arg1,arg2&amp;hellip;的形式。&lt;/li&gt;
&lt;li&gt;bind改变this作用域会返回一个新的函数，这个函数不会立即执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;33-节流和防抖&#34;&gt;33 节流和防抖&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;防抖：持续拖动滚动条，只要不停止触发，就永远不会有输出。短时间内触发的事件，在某个时间期限内，函数只执行一次。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;debounce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;clearTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;节流：持续拖动滚动条，每间隔一段时间，就会输出反馈。相当于&lt;strong&gt;技能冷却&lt;/strong&gt;，执行之后，函数会失效一段时间，冷却之后，又会恢复，设置一个状态位，判断是否处于工作状态。（在防抖基础上，到达指定事件必须输出）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;throttle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mustRun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;clearTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mustRun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;34-深拷贝&#34;&gt;34 深拷贝&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;简单深拷贝：JSON序列化和反序列化&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deepCopy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;__&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;递归方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deepCopy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Object&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)){&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
                &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deepCopy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;constructor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;RegExp&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
                &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deepCopy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;35-对象属性改变监听-proxy&#34;&gt;35 对象属性改变监听-Proxy&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;receiver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;

	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;36-变量提升和暂时性死区&#34;&gt;36 变量提升和暂时性死区&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;变量提升：var定义变量，变量可以在声明前使用，值为undefined；let不会出现这个情况。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;暂时性死区TDZ：只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等待变量声明的那一行代码出现，才可以获取和使用该变量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;只要块级作用域内存在let和const命令，它所声明的变量就会绑定这个区域，不再受外部影响。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;37-箭头函数&#34;&gt;37 箭头函数&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基本语法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//aka
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与普通函数的区别&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;箭头函数没有this，如果普通函数包含箭头函数，那么this访问的就是最近一层普通函数的this&lt;/li&gt;
&lt;li&gt;箭头函数是匿名函数，不能作为构造函数，不能使用new&lt;/li&gt;
&lt;li&gt;箭头函数没有自己的arguments参数，虽然有name属性但是是空字符串，用&amp;hellip;扩展运算符。&lt;/li&gt;
&lt;li&gt;箭头函数通过call()或apply()方法调用一个函数时，只传入了一个参数，对this并没有影响。&lt;/li&gt;
&lt;li&gt;箭头函数没有原型属性prototype&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;38-原型链&#34;&gt;38 原型链&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;原型：prototype，是一个对象，作用是共享属性和方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原型链：原型与原型层层连接的过程即为原型链&lt;/p&gt;
&lt;p&gt;假设B继承了A，b是B的实例，那么就有以下关系：&lt;/p&gt;
&lt;p&gt;（1）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;__&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;proto__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;（2）B.prototype.constructor = B，A.prototype.constructor = A&lt;/p&gt;
&lt;p&gt;（3）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;__&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;proto__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;A&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;（4）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;__&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;proto__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;39-es6新特性&#34;&gt;39 ES6新特性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;let（解决了变量提升）、 const常量，块级作用域（暂时性死区）。&lt;/li&gt;
&lt;li&gt;模板字符串：“xxx${}”&lt;/li&gt;
&lt;li&gt;箭头函数&lt;/li&gt;
&lt;li&gt;对象，数组解构赋值&lt;/li&gt;
&lt;li&gt;for in和for of&lt;/li&gt;
&lt;li&gt;class类&lt;/li&gt;
&lt;li&gt;extend类继承&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;40-垂直居中的方法&#34;&gt;40 垂直居中的方法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;margin：auto，left、right、top、bottom全设为0&lt;/li&gt;
&lt;li&gt;display：flex，align-items:center，justify-content:center;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;41-前端性能优化&#34;&gt;41 前端性能优化&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;降低请求量：合并资源、减少HTTP请求数、minify/gzip压缩，webP，懒加载&lt;/li&gt;
&lt;li&gt;加快请求速度：预解析DNS、减少域名数、并行加载、CDN分发&lt;/li&gt;
&lt;li&gt;缓存：HTTP协议缓存请求、离线缓存manifest、离线数据缓存localStorage&lt;/li&gt;
&lt;li&gt;渲染：JS/CSS优化，加载顺序，服务端渲染，pipeline&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;42-get和post的区别&#34;&gt;42 get和post的区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;get参数通过url传递，post放在request body中&lt;/li&gt;
&lt;li&gt;get请求在url中传递的参数有长度限制，post没有&lt;/li&gt;
&lt;li&gt;get参数暴露在url，不安全。&lt;/li&gt;
&lt;li&gt;get请求只能进行url编码，post支持多种编码方式&lt;/li&gt;
&lt;li&gt;get请求浏览器会主动缓存。&lt;/li&gt;
&lt;li&gt;get请求参数会被完整保留在浏览历史记录。&lt;/li&gt;
&lt;li&gt;get用来获取资源，post用来增加或更新资源。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;43-web-worker&#34;&gt;43 web worker&lt;/h2&gt;
&lt;p&gt;在HTML页面中，如果在执行脚本时，页面的状态是不可响应的，直到脚本执行完成后，页面才变成可响应。web worker是运行在后台的js，独立于其他脚本，不会影响页面你的性能。并且通过postMessage将结果回传到主线程。这样在进行复杂操作的时候，就不会阻塞主线程了。&lt;/p&gt;
&lt;p&gt;如何创建web worker：&lt;/p&gt;
&lt;p&gt;检测浏览器对于web worker的支持性&lt;/p&gt;
&lt;p&gt;创建web worker文件（js，回传函数等）&lt;/p&gt;
&lt;p&gt;创建web worker对象&lt;/p&gt;
&lt;h2 id=&#34;44-浮动清除&#34;&gt;44 浮动清除&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;overflow:hidden/auto&lt;/li&gt;
&lt;li&gt;给浮动的元素的容器添加浮动&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;45-css选择器&#34;&gt;45 CSS选择器&lt;/h2&gt;
&lt;p&gt;ID选择器、Class选择器、标签选择器、伪元素选择器、伪类选择器&lt;/p&gt;
&lt;p&gt;优先级：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;引入了同类的选择器：排在后面的样式属性优先&lt;/li&gt;
&lt;li&gt;引入了不同的选择器：id&amp;gt;class&amp;gt;标签&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>计算机基础知识点总结（操作系统&#43;计算机网络）</title>
        <link>https://cuterwrite.top/p/interview-help/</link>
        <pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/interview-help/</guid>
        <description>&lt;img src="https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/20210503/rocky-coast-5059912_1920.5upaeily96k0.jpg" alt="Featured image of post 计算机基础知识点总结（操作系统&#43;计算机网络）" /&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;  &lt;em&gt;generated with &lt;a class=&#34;link&#34; href=&#34;https://github.com/thlorenz/doctoc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DocToc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E4%B8%80%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F&#34; &gt;一、操作系统&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB&#34; &gt;1、进程与线程的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F&#34; &gt;2、进程间的通信的几种方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E7%9A%84%E6%96%B9%E5%BC%8F&#34; &gt;3、线程同步的方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E7%9A%84%E6%96%B9%E5%BC%8F&#34; &gt;4、进程同步的方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5%E6%AD%BB%E9%94%81&#34; &gt;5、死锁&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#51%E6%AD%BB%E9%94%81%E7%9A%84%E5%AE%9A%E4%B9%89&#34; &gt;5.1、死锁的定义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#52%E6%AD%BB%E9%94%81%E5%BF%85%E8%A6%81%E6%9D%A1%E4%BB%B6&#34; &gt;5.2、死锁必要条件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#53%E6%AD%BB%E9%94%81%E5%A4%84%E7%90%86&#34; &gt;5.3、死锁处理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81&#34; &gt;6、进程的状态&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#7%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95&#34; &gt;7、进程调度算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#8%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98&#34; &gt;8、虚拟内存&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#9%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95&#34; &gt;9、页面置换算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#10%E5%88%86%E9%A1%B5%E4%B8%8E%E5%88%86%E6%AE%B5%E7%9A%84%E5%8C%BA%E5%88%AB&#34; &gt;10、分页与分段的区别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E4%BA%8C%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C&#34; &gt;二、计算机网络&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84&#34; &gt;1、计算机网络体系结构&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#11%E4%BA%94%E5%B1%82%E5%8D%8F%E8%AE%AE&#34; &gt;1.1、五层协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#12osi%E4%B8%83%E5%B1%82%E5%8D%8F%E8%AE%AE&#34; &gt;1.2、OSI七层协议&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2udp%E5%92%8Ctcp%E7%9A%84%E7%89%B9%E7%82%B9&#34; &gt;2、UDP和TCP的特点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3udp%E9%A6%96%E9%83%A8%E6%A0%BC%E5%BC%8F&#34; &gt;3、UDP首部格式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4tcp%E9%A6%96%E9%83%A8%E6%A0%BC%E5%BC%8F&#34; &gt;4、TCP首部格式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B&#34; &gt;5、TCP三次握手&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6tcp%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B&#34; &gt;6、TCP四次挥手&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#7tcp%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93&#34; &gt;7、TCP可靠传输&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#8tcp%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3&#34; &gt;8、TCP滑动窗口&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#9tcp-%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6&#34; &gt;9、TCP 流量控制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#10tcp-%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6&#34; &gt;10、TCP 拥塞控制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#11%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F&#34; &gt;11、域名系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#12ftp%E5%8D%8F%E8%AE%AE&#34; &gt;12、FTP协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#13dhcp%E5%8D%8F%E8%AE%AE&#34; &gt;13、DHCP协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#14ssh%E5%8D%8F%E8%AE%AE&#34; &gt;14、SSH协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#15smtp%E5%8D%8F%E8%AE%AE&#34; &gt;15、SMTP协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#16web%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B&#34; &gt;16、Web页面请求过程&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#161-dhcp-%E9%85%8D%E7%BD%AE%E4%B8%BB%E6%9C%BA%E4%BF%A1%E6%81%AF&#34; &gt;16.1. DHCP 配置主机信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#162-arp-%E8%A7%A3%E6%9E%90-mac-%E5%9C%B0%E5%9D%80&#34; &gt;16.2. ARP 解析 MAC 地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#163-dns-%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D&#34; &gt;16.3. DNS 解析域名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#164-http-%E8%AF%B7%E6%B1%82%E9%A1%B5%E9%9D%A2&#34; &gt;16.4. HTTP 请求页面&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;一操作系统&#34;&gt;一、操作系统&lt;/h1&gt;
&lt;h2 id=&#34;1进程与线程的区别&#34;&gt;1、进程与线程的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;进程是对运行时程序的封装，是系统进行资源调度和分配的的基本单位，实现了操作系统的并发；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程是进程的子任务，是CPU调度和分派的基本单位，用于保证程序的 实时性，实现进程内部的并发；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个程序至少有一个进程，一个进程至少有一个线程，线程依赖于进程而存在；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程在执行过程中拥有独立的内存单元，而多个线程共享进程的内存。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2进程间的通信的几种方式&#34;&gt;2、进程间的通信的几种方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;管道（pipe）及命名管道（named pipe）：管道可用于具有亲缘关系的父子进程间的通信，有名管道除了具有管道所具有的功能外，它还允许无亲缘关系进程间的通信；&lt;/li&gt;
&lt;li&gt;信号（signal）：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；&lt;/li&gt;
&lt;li&gt;消息队列：消息队列是消息的链接表，它克服了上两种通信方式中信号量有限的缺点，具有写权限得进程可以按照一定得规则向消息队列中添加新信息；对消息队列有读权限得进程则可以从消息队列中读取信息；&lt;/li&gt;
&lt;li&gt;共享内存：可以说这是最有用的进程间通信方式。它使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据得更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等；&lt;/li&gt;
&lt;li&gt;信号量：主要作为进程之间及同一种进程的不同线程之间得同步和互斥手段；&lt;/li&gt;
&lt;li&gt;套接字：这是一种更为一般得进程间通信机制，它可用于网络中不同机器之间的进程间通信，应用非常广泛。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3线程同步的方式&#34;&gt;3、线程同步的方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;互斥量 Synchronized/Lock：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问&lt;/li&gt;
&lt;li&gt;信号量 Semphare：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量&lt;/li&gt;
&lt;li&gt;事件(信号)，Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4进程同步的方式&#34;&gt;4、进程同步的方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;临界区：对临界资源进行访问的那段代码称为临界区。为了互斥访问临界资源，每个进程在进入临界区之前，需要先进行检查。&lt;/li&gt;
&lt;li&gt;同步与互斥&lt;/li&gt;
&lt;li&gt;信号量&lt;/li&gt;
&lt;li&gt;管程：有一个重要特性：在一个时刻只能有一个进程使用管程。进程在无法继续执行的时候不能一直占用管程，否则其它进程永远不能使用管程。管程引入了   &lt;strong&gt;条件变量&lt;/strong&gt;   以及相关的操作：&lt;strong&gt;wait()&lt;/strong&gt; 和 &lt;strong&gt;signal()&lt;/strong&gt; 来实现同步操作。对条件变量执行 wait() 操作会导致调用进程阻塞，把管程让出来给另一个进程持有。signal() 操作用于唤醒被阻塞的进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5死锁&#34;&gt;5、死锁&lt;/h2&gt;
&lt;h3 id=&#34;51死锁的定义&#34;&gt;5.1、死锁的定义&lt;/h3&gt;
&lt;p&gt;在两个或者多个并发进程中，如果每个进程持有某种资源而又等待其它进程释放它或它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁。通俗的讲，就是两个或多个进程无限期的阻塞、相互等待的一种状态。&lt;/p&gt;
&lt;h3 id=&#34;52死锁必要条件&#34;&gt;5.2、死锁必要条件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;互斥：每个资源要么已经分配给了一个进程，要么就是可用的。&lt;/li&gt;
&lt;li&gt;占有和等待：已经得到了某个资源的进程可以再请求新的资源。&lt;/li&gt;
&lt;li&gt;不可抢占：已经分配给一个进程的资源不能强制性地被抢占，它只能被占有它的进程显式地释放。&lt;/li&gt;
&lt;li&gt;环路等待：有两个或者两个以上的进程组成一条环路，该环路中的每个进程都在等待下一个进程所占有的资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;53死锁处理&#34;&gt;5.3、死锁处理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;鸵鸟策略：把头埋在沙子里，假装根本没发生问题。因为解决死锁问题的代价很高，因此鸵鸟策略这种不采取任务措施的方案会获得更高的性能。当发生死锁时不会对用户造成多大影响，或发生死锁的概率很低，可以采用鸵鸟策略。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;死锁检测与死锁恢复：不试图阻止死锁，而是当检测到死锁发生时，采取措施进行恢复。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每种类型一个资源的死锁检测：通过检测有向图是否存在环来实现，从一个节点出发进行深度优先搜索，对访问过的节点进行标记，如果访问了已经标记的节点，就表示有向图存在环，也就是检测到死锁的发生。&lt;/li&gt;
&lt;li&gt;每种类型多个资源的死锁检测：每个进程最开始时都不被标记，执行过程有可能被标记。当算法结束时，任何没有被标记的进程都是死锁进程。
&lt;ol&gt;
&lt;li&gt;寻找一个没有标记的进程 P&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;，它所请求的资源小于等于 A。&lt;/li&gt;
&lt;li&gt;如果找到了这样一个进程，那么将 C 矩阵的第 i 行向量加到 A 中，标记该进程，并转回 1。&lt;/li&gt;
&lt;li&gt;如果没有这样一个进程，算法终止。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;死锁恢复：在&lt;strong&gt;程序运行&lt;/strong&gt;之前预防发生死锁。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;破坏互斥条件&lt;/li&gt;
&lt;li&gt;破坏占有和等待条件&lt;/li&gt;
&lt;li&gt;破坏不可抢占条件&lt;/li&gt;
&lt;li&gt;破坏环路等待条件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;死锁避免：在&lt;strong&gt;程序运行&lt;/strong&gt;时避免发生死锁。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安全状态：如果没有死锁发生，并且即使所有进程突然请求对资源的最大需求，也仍然存在某种调度次序能够使得每一个进程运行完毕，则称该状态是安全的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;银行家算法：检查一个状态是否安全的算法如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查找右边的矩阵是否存在一行小于等于向量 A。如果不存在这样的行，那么系统将会发生死锁，状态是不安全的。&lt;/li&gt;
&lt;li&gt;假若找到这样一行，将该进程标记为终止，并将其已分配资源加到 A 中。&lt;/li&gt;
&lt;li&gt;重复以上两步，直到所有进程都标记为终止，则状态是安全的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果一个状态不是安全的，需要拒绝进入这个状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6进程的状态&#34;&gt;6、进程的状态&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ready&lt;/li&gt;
&lt;li&gt;running&lt;/li&gt;
&lt;li&gt;waiting&lt;/li&gt;
&lt;li&gt;只有ready和running可以相互转换，其它都是单向转换。就绪状态的进程通过调度算法从而获得 CPU 时间，转为运行状态；而运行状态的进程，在分配给它的 CPU 时间片用完之后就会转为就绪状态，等待下一次调度。&lt;/li&gt;
&lt;li&gt;阻塞状态是缺少需要的资源从running状态转换而来，但是该资源不包括CPU时间，缺少CPU时间会从running变成ready。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7进程调度算法&#34;&gt;7、进程调度算法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;先来先服务 first-come first-serverd（FCFS）：非抢占式的调度算法，按照请求的顺序进行调度。有利于长作业，但不利于短作业，因为短作业必须一直等待前面的长作业执行完毕才能执行，而长作业又需要执行很长时间，造成了短作业等待时间过长。&lt;/li&gt;
&lt;li&gt;短作业优先 shortest job first（SJF）：非抢占式的调度算法，按估计运行时间最短的顺序进行调度。长作业有可能会饿死，处于一直等待短作业执行完毕的状态。因为如果一直有短作业到来，那么长作业永远得不到调度。&lt;/li&gt;
&lt;li&gt;最短剩余时间优先 shortest remaining time next（SRTN）：最短作业优先的抢占式版本，按剩余运行时间的顺序进行调度。 当一个新的作业到达时，其整个运行时间与当前进程的剩余时间作比较。如果新的进程需要的时间更少，则挂起当前进程，运行新的进程。否则新的进程等待。&lt;/li&gt;
&lt;li&gt;时间片轮转：将所有就绪进程按 FCFS 的原则排成一个队列，每次调度时，把 CPU 时间分配给队首进程，该进程可以执行一个时间片。当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把 CPU 时间分配给队首的进程。&lt;/li&gt;
&lt;li&gt;优先级调度：每个进程分配一个优先级，按优先级进行调度。为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。&lt;/li&gt;
&lt;li&gt;多级反馈队列：可以将这种调度算法看成是时间片轮转调度算法和优先级调度算法的结合。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8虚拟内存&#34;&gt;8、虚拟内存&lt;/h2&gt;
&lt;p&gt;虚拟内存的目的是为了让物理内存扩充成更大的逻辑内存，从而让程序获得更多的可用内存。&lt;/p&gt;
&lt;p&gt;为了更好的管理内存，操作系统将内存抽象成地址空间。每个程序拥有自己的地址空间，这个地址空间被分割成多个块，每一块称为一页。这些页被映射到物理内存，但不需要映射到连续的物理内存，也不需要所有页都必须在物理内存中。当程序引用到不在物理内存中的页时，由硬件执行必要的映射，将缺失的部分装入物理内存并重新执行失败的指令。&lt;/p&gt;
&lt;h2 id=&#34;9页面置换算法&#34;&gt;9、页面置换算法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OPT&lt;/li&gt;
&lt;li&gt;LRU&lt;/li&gt;
&lt;li&gt;LFU&lt;/li&gt;
&lt;li&gt;FIFO&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;10分页与分段的区别&#34;&gt;10、分页与分段的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对程序员的透明性：分页透明，但是分段需要程序员显式划分每个段。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;地址空间的维度：分页是一维地址空间，分段是二维的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大小是否可以改变：页的大小不可变，段的大小可以动态改变。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;出现的原因：分页主要用于实现虚拟内存，从而获得更大的地址空间；分段主要是为了使程序和数据可以被划分为逻辑上独立的地址空间并且有助于共享和保护。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;二计算机网络&#34;&gt;二、计算机网络&lt;/h1&gt;
&lt;h2 id=&#34;1计算机网络体系结构&#34;&gt;1、计算机网络体系结构&lt;/h2&gt;
&lt;h3 id=&#34;11五层协议&#34;&gt;1.1、五层协议&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;应用层&lt;/li&gt;
&lt;li&gt;运输层&lt;/li&gt;
&lt;li&gt;网络层&lt;/li&gt;
&lt;li&gt;数据链路层&lt;/li&gt;
&lt;li&gt;物理层&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12osi七层协议&#34;&gt;1.2、OSI七层协议&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;应用层：&lt;strong&gt;为特定应用程序提供数据传输服务&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;表示层：数据压缩、加密以及数据描述&lt;/li&gt;
&lt;li&gt;会话层：建立和管理回话&lt;/li&gt;
&lt;li&gt;运输层：提供的是&lt;strong&gt;进程间的通用数据传输服务&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;网络层：&lt;strong&gt;为主机间提供数据传输服务&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;数据链路层：主机之间可以有很多链路，链路层协议就是为同一链路的节点提供服务。数据链路层把网络层传来的&lt;strong&gt;分组封装成帧&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;物理层：&lt;strong&gt;尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2udp和tcp的特点&#34;&gt;2、UDP和TCP的特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。&lt;/li&gt;
&lt;li&gt;传输控制协议 TCP（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3udp首部格式&#34;&gt;3、UDP首部格式&lt;/h2&gt;
&lt;p&gt;首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。12 字节的伪首部是为了计算检验和临时添加的。&lt;/p&gt;
&lt;h2 id=&#34;4tcp首部格式&#34;&gt;4、TCP首部格式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;序号&lt;/strong&gt;   ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确认号&lt;/strong&gt;   ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据偏移&lt;/strong&gt;   ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确认 ACK&lt;/strong&gt;   ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;同步 SYN&lt;/strong&gt;   ：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;终止 FIN&lt;/strong&gt;   ：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;窗口&lt;/strong&gt;   ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5tcp三次握手&#34;&gt;5、TCP三次握手&lt;/h2&gt;
&lt;p&gt;假设 A 为客户端，B 为服务器端。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。&lt;/li&gt;
&lt;li&gt;A 向 B 发送连接请求报文，SYN=1，ACK=0，选择一个初始的序号 x。&lt;/li&gt;
&lt;li&gt;B 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 y。&lt;/li&gt;
&lt;li&gt;A 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。&lt;/li&gt;
&lt;li&gt;B 收到 A 的确认后，连接建立。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;三次握手的原因&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。&lt;/p&gt;
&lt;p&gt;客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务器端发回的连接确认。客户端等待一个超时重传时间之后，就会重新请求连接。但是这个滞留的连接请求最后还是会到达服务器，如果不进行三次握手，那么服务器就会打开两个连接。如果有第三次握手，客户端会忽略服务器之后发送的对滞留连接请求的连接确认，不进行第三次握手，因此就不会再次打开连接。&lt;/p&gt;
&lt;h2 id=&#34;6tcp四次挥手&#34;&gt;6、TCP四次挥手&lt;/h2&gt;
&lt;p&gt;以下描述不讨论序号和确认号，因为序号和确认号的规则比较简单。并且不讨论 ACK，因为 ACK 在连接建立之后都为 1。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A 发送连接释放报文，FIN=1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当 B 不再需要连接时，发送连接释放报文，FIN=1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B 收到 A 的确认后释放连接。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;四次挥手的原因&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TIME_WAIT&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;客户端接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间 2MSL。这么做有两个理由：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保最后一个确认报文能够到达。如果 B 没收到 A 发送来的确认报文，那么就会重新发送连接释放请求报文，A 等待一段时间就是为了处理这种情况的发生。&lt;/li&gt;
&lt;li&gt;等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7tcp可靠传输&#34;&gt;7、TCP可靠传输&lt;/h2&gt;
&lt;p&gt;TCP 使用超时重传来实现可靠传输：如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。&lt;/p&gt;
&lt;h2 id=&#34;8tcp滑动窗口&#34;&gt;8、TCP滑动窗口&lt;/h2&gt;
&lt;p&gt;窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。&lt;/p&gt;
&lt;p&gt;发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。&lt;/p&gt;
&lt;p&gt;接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {34, 35} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。&lt;/p&gt;
&lt;h2 id=&#34;9tcp-流量控制&#34;&gt;9、TCP 流量控制&lt;/h2&gt;
&lt;p&gt;流量控制是为了控制发送方发送速率，保证接收方来得及接收。&lt;/p&gt;
&lt;p&gt;接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。&lt;/p&gt;
&lt;h2 id=&#34;10tcp-拥塞控制&#34;&gt;10、TCP 拥塞控制&lt;/h2&gt;
&lt;p&gt;如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。&lt;/p&gt;
&lt;p&gt;TCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。&lt;/p&gt;
&lt;p&gt;发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。&lt;/p&gt;
&lt;p&gt;为了便于讨论，做如下假设：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收方有足够大的接收缓存，因此不会发生流量控制；&lt;/li&gt;
&lt;li&gt;虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;1、慢开始与拥塞避免&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;发送的最初执行慢开始，令 cwnd = 1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 &amp;hellip;&lt;/p&gt;
&lt;p&gt;注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。设置一个慢开始门限 ssthresh，当 cwnd &amp;gt;= ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。&lt;/p&gt;
&lt;p&gt;如果出现了超时，则令 ssthresh = cwnd / 2，然后重新执行慢开始。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、快重传与快恢复&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在接收方，要求每次接收到报文段都应该对最后一个已收到的有序报文段进行确认。例如已经接收到 M&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 和 M&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;，此时收到 M&lt;!-- raw HTML omitted --&gt;4&lt;!-- raw HTML omitted --&gt;，应当发送对 M&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; 的确认。&lt;/p&gt;
&lt;p&gt;在发送方，如果收到三个重复确认，那么可以知道下一个报文段丢失，此时执行快重传，立即重传下一个报文段。例如收到三个 M&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;，则 M&lt;!-- raw HTML omitted --&gt;3&lt;!-- raw HTML omitted --&gt; 丢失，立即重传 M&lt;!-- raw HTML omitted --&gt;3&lt;!-- raw HTML omitted --&gt;。&lt;/p&gt;
&lt;p&gt;在这种情况下，只是丢失个别报文段，而不是网络拥塞。因此执行快恢复，令 ssthresh = cwnd / 2 ，cwnd = ssthresh，注意到此时直接进入拥塞避免。&lt;/p&gt;
&lt;p&gt;慢开始和快恢复的快慢指的是 cwnd 的设定值，而不是 cwnd 的增长速率。慢开始 cwnd 设定为 1，而快恢复 cwnd 设定为 ssthresh。&lt;/p&gt;
&lt;h2 id=&#34;11域名系统&#34;&gt;11、域名系统&lt;/h2&gt;
&lt;p&gt;DNS 是一个分布式数据库，提供了主机名和 IP 地址之间相互转换的服务。这里的分布式数据库是指，每个站点只保留它自己的那部分数据。&lt;/p&gt;
&lt;p&gt;域名具有层次结构，从上到下依次为：根域名、顶级域名、二级域名。&lt;/p&gt;
&lt;p&gt;DNS 可以使用 UDP 或者 TCP 进行传输，使用的端口号都为 53。大多数情况下 DNS 使用 UDP 进行传输，这就要求域名解析器和域名服务器都必须自己处理超时和重传从而保证可靠性。在两种情况下会使用 TCP 进行传输：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果返回的响应超过的 512 字节（UDP 最大只支持 512 字节的数据）。&lt;/li&gt;
&lt;li&gt;区域传送（区域传送是主域名服务器向辅助域名服务器传送变化的那部分数据）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12ftp协议&#34;&gt;12、FTP协议&lt;/h2&gt;
&lt;p&gt;FTP 使用 TCP 进行连接，它需要两个连接来传送一个文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控制连接：服务器打开端口号 21 等待客户端的连接，客户端主动建立连接后，使用这个连接将客户端的命令传送给服务器，并传回服务器的应答。&lt;/li&gt;
&lt;li&gt;数据连接：用来传送一个文件数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据数据连接是否是服务器端主动建立，FTP 有主动和被动两种模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主动模式：服务器端主动建立数据连接，其中服务器端的端口号为 20，客户端的端口号随机，但是必须大于 1024，因为 0~1023 是熟知端口号。&lt;/li&gt;
&lt;li&gt;被动模式：客户端主动建立数据连接，其中客户端的端口号由客户端自己指定，服务器端的端口号随机。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主动模式要求客户端开放端口号给服务器端，需要去配置客户端的防火墙。被动模式只需要服务器端开放端口号即可，无需客户端配置防火墙。但是被动模式会导致服务器端的安全性减弱，因为开放了过多的端口号。&lt;/p&gt;
&lt;h2 id=&#34;13dhcp协议&#34;&gt;13、DHCP协议&lt;/h2&gt;
&lt;p&gt;DHCP (Dynamic Host Configuration Protocol) 提供了即插即用的连网方式，用户不再需要手动配置 IP 地址等信息。&lt;/p&gt;
&lt;p&gt;DHCP 配置的内容不仅是 IP 地址，还包括子网掩码、网关 IP 地址。&lt;/p&gt;
&lt;p&gt;DHCP 工作过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端发送 Discover 报文，该报文的目的地址为 255.255.255.255:67，源地址为 0.0.0.0:68，被放入 UDP 中，该报文被广播到同一个子网的所有主机上。如果客户端和 DHCP 服务器不在同一个子网，就需要使用中继代理。&lt;/li&gt;
&lt;li&gt;DHCP 服务器收到 Discover 报文之后，发送 Offer 报文给客户端，该报文包含了客户端所需要的信息。因为客户端可能收到多个 DHCP 服务器提供的信息，因此客户端需要进行选择。&lt;/li&gt;
&lt;li&gt;如果客户端选择了某个 DHCP 服务器提供的信息，那么就发送 Request 报文给该 DHCP 服务器。&lt;/li&gt;
&lt;li&gt;DHCP 服务器发送 Ack 报文，表示客户端此时可以使用提供给它的信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;14ssh协议&#34;&gt;14、SSH协议&lt;/h2&gt;
&lt;p&gt;TELNET 用于登录到远程主机上，并且远程主机上的输出也会返回。&lt;/p&gt;
&lt;p&gt;TELNET 可以适应许多计算机和操作系统的差异，例如不同操作系统系统的换行符定义。&lt;/p&gt;
&lt;h2 id=&#34;15smtp协议&#34;&gt;15、SMTP协议&lt;/h2&gt;
&lt;p&gt;一个电子邮件系统由三部分组成：用户代理、邮件服务器以及邮件协议。&lt;/p&gt;
&lt;p&gt;邮件协议包含发送协议和读取协议，发送协议常用 SMTP，读取协议常用 POP3 和 IMAP。&lt;/p&gt;
&lt;p&gt;SMTP 只能发送 ASCII 码，而互联网邮件扩充 MIME 可以发送二进制文件。MIME 并没有改动或者取代 SMTP，而是增加邮件主体的结构，定义了非 ASCII 码的编码规则。&lt;/p&gt;
&lt;p&gt;POP3 的特点是只要用户从服务器上读取了邮件，就把该邮件删除。但最新版本的 POP3 可以不删除邮件。&lt;/p&gt;
&lt;p&gt;IMAP 协议中客户端和服务器上的邮件保持同步，如果不手动删除邮件，那么服务器上的邮件也不会被删除。IMAP 这种做法可以让用户随时随地去访问服务器上的邮件。&lt;/p&gt;
&lt;h2 id=&#34;16web页面请求过程&#34;&gt;16、Web页面请求过程&lt;/h2&gt;
&lt;h3 id=&#34;161-dhcp-配置主机信息&#34;&gt;16.1. DHCP 配置主机信息&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;假设主机最开始没有 IP 地址以及其它信息，那么就需要先使用 DHCP 来获取。&lt;/li&gt;
&lt;li&gt;主机生成一个 DHCP 请求报文，并将这个报文放入具有目的端口 67 和源端口 68 的 UDP 报文段中。&lt;/li&gt;
&lt;li&gt;该报文段则被放入在一个具有广播 IP 目的地址(255.255.255.255) 和源 IP 地址（0.0.0.0）的 IP 数据报中。&lt;/li&gt;
&lt;li&gt;该数据报则被放置在 MAC 帧中，该帧具有目的地址 FF:&amp;lt;zero-width space&amp;gt;FF:&amp;lt;zero-width space&amp;gt;FF:&amp;lt;zero-width space&amp;gt;FF:&amp;lt;zero-width space&amp;gt;FF:FF，将广播到与交换机连接的所有设备。&lt;/li&gt;
&lt;li&gt;连接在交换机的 DHCP 服务器收到广播帧之后，不断地向上分解得到 IP 数据报、UDP 报文段、DHCP 请求报文，之后生成 DHCP ACK 报文，该报文包含以下信息：IP 地址、DNS 服务器的 IP 地址、默认网关路由器的 IP 地址和子网掩码。该报文被放入 UDP 报文段中，UDP 报文段有被放入 IP 数据报中，最后放入 MAC 帧中。&lt;/li&gt;
&lt;li&gt;该帧的目的地址是请求主机的 MAC 地址，因为交换机具有自学习能力，之前主机发送了广播帧之后就记录了 MAC 地址到其转发接口的交换表项，因此现在交换机就可以直接知道应该向哪个接口发送该帧。&lt;/li&gt;
&lt;li&gt;主机收到该帧后，不断分解得到 DHCP 报文。之后就配置它的 IP 地址、子网掩码和 DNS 服务器的 IP 地址，并在其 IP 转发表中安装默认网关。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;162-arp-解析-mac-地址&#34;&gt;16.2. ARP 解析 MAC 地址&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;主机通过浏览器生成一个 TCP 套接字，套接字向 HTTP 服务器发送 HTTP 请求。为了生成该套接字，主机需要知道网站的域名对应的 IP 地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主机生成一个 DNS 查询报文，该报文具有 53 号端口，因为 DNS 服务器的端口号是 53。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;该 DNS 查询报文被放入目的地址为 DNS 服务器 IP 地址的 IP 数据报中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;该 IP 数据报被放入一个以太网帧中，该帧将发送到网关路由器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DHCP 过程只知道网关路由器的 IP 地址，为了获取网关路由器的 MAC 地址，需要使用 ARP 协议。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主机生成一个包含目的地址为网关路由器 IP 地址的 ARP 查询报文，将该 ARP 查询报文放入一个具有广播目的地址（FF:&amp;lt;zero-width space&amp;gt;FF:&amp;lt;zero-width space&amp;gt;FF:&amp;lt;zero-width space&amp;gt;FF:&amp;lt;zero-width space&amp;gt;FF:FF）的以太网帧中，并向交换机发送该以太网帧，交换机将该帧转发给所有的连接设备，包括网关路由器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网关路由器接收到该帧后，不断向上分解得到 ARP 报文，发现其中的 IP 地址与其接口的 IP 地址匹配，因此就发送一个 ARP 回答报文，包含了它的 MAC 地址，发回给主机。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;163-dns-解析域名&#34;&gt;16.3. DNS 解析域名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;知道了网关路由器的 MAC 地址之后，就可以继续 DNS 的解析过程了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网关路由器接收到包含 DNS 查询报文的以太网帧后，抽取出 IP 数据报，并根据转发表决定该 IP 数据报应该转发的路由器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为路由器具有内部网关协议（RIP、OSPF）和外部网关协议（BGP）这两种路由选择协议，因此路由表中已经配置了网关路由器到达 DNS 服务器的路由表项。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;到达 DNS 服务器之后，DNS 服务器抽取出 DNS 查询报文，并在 DNS 数据库中查找待解析的域名。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找到 DNS 记录之后，发送 DNS 回答报文，将该回答报文放入 UDP 报文段中，然后放入 IP 数据报中，通过路由器反向转发回网关路由器，并经过以太网交换机到达主机。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;164-http-请求页面&#34;&gt;16.4. HTTP 请求页面&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;有了 HTTP 服务器的 IP 地址之后，主机就能够生成 TCP 套接字，该套接字将用于向 Web 服务器发送 HTTP GET 报文。&lt;/li&gt;
&lt;li&gt;在生成 TCP 套接字之前，必须先与 HTTP 服务器进行三次握手来建立连接。生成一个具有目的端口 80 的 TCP SYN 报文段，并向 HTTP 服务器发送该报文段。&lt;/li&gt;
&lt;li&gt;HTTP 服务器收到该报文段之后，生成 TCP SYN ACK 报文段，发回给主机。&lt;/li&gt;
&lt;li&gt;连接建立之后，浏览器生成 HTTP GET 报文，并交付给 HTTP 服务器。&lt;/li&gt;
&lt;li&gt;HTTP 服务器从 TCP 套接字读取 HTTP GET 报文，生成一个 HTTP 响应报文，将 Web 页面内容放入报文主体中，发回给主机。&lt;/li&gt;
&lt;li&gt;浏览器收到 HTTP 响应报文后，抽取出 Web 页面内容，之后进行渲染，显示 Web 页面。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;本文转载自：https://github.com/CyC2018/CS-Notes，用于个人复习。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Redis入门</title>
        <link>https://cuterwrite.top/p/redis-1/</link>
        <pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/redis-1/</guid>
        <description>&lt;img src="https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/20210503/groningen-5372387_1920.jhh1ofhqnjs.jpg" alt="Featured image of post Redis入门" /&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;  &lt;em&gt;generated with &lt;a class=&#34;link&#34; href=&#34;https://github.com/thlorenz/doctoc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DocToc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1%E5%91%BD%E4%BB%A4%E8%BF%94%E5%9B%9E%E5%80%BC&#34; &gt;1、命令返回值&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93&#34; &gt;2、多数据库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8&#34; &gt;3、命令大全&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1%E9%80%9A%E7%94%A8%E5%91%BD%E4%BB%A4&#34; &gt;1、通用命令&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#keys-pattern&#34; &gt;keys pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#exists-key&#34; &gt;exists key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#del-key&#34; &gt;del key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#type-key&#34; &gt;type key&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B&#34; &gt;2、字符串类型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E7%AE%80%E4%BB%8B&#34; &gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#set-key-value--get-key&#34; &gt;set key value / get key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#incr-key&#34; &gt;incr key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#incrby-key-increment&#34; &gt;incrby key increment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#decr-key&#34; &gt;decr key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#decrby-key-decrement&#34; &gt;decrby key decrement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#incrbyfloat-key-increment&#34; &gt;incrbyfloat key increment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#append-key-value&#34; &gt;append key value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#strlen-key&#34; &gt;strlen key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#mget-key--mset-key1-value1-&#34; &gt;mget key / mset key1 value1 &amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E4%BD%8D%E6%93%8D%E4%BD%9C&#34; &gt;位操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF&#34; &gt;使用场景&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3hash%E7%B1%BB%E5%9E%8B&#34; &gt;3、hash类型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E7%AE%80%E4%BB%8B-1&#34; &gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#hset-key-field-value&#34; &gt;hset key field value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#hget-key-field&#34; &gt;hget key field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#hmset-key-field-value&#34; &gt;hmset key field value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#hmget-key-field&#34; &gt;hmget key field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#hgetall-key&#34; &gt;hgetall key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#hexists-key-field&#34; &gt;hexists key field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#hsetnx-key-field-value&#34; &gt;hsetnx key field value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#hincrby-key-field-increment&#34; &gt;hincrby key field increment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#hdel-key-field&#34; &gt;hdel key field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4&#34; &gt;其他命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF-1&#34; &gt;使用场景&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4list%E7%B1%BB%E5%9E%8B&#34; &gt;4、list类型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E7%AE%80%E4%BB%8B-2&#34; &gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#lpush-key-value1&#34; &gt;lpush key value1&amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#rpush-key-value1&#34; &gt;rpush key value1&amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#lpop-key&#34; &gt;lpop key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#rpop-key&#34; &gt;rpop key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#llen-key&#34; &gt;llen key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#lrange-key-start-stop&#34; &gt;lrange key start stop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#lrem-key-count-value&#34; &gt;lrem key count value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#lindex-key-index&#34; &gt;lindex key index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#lset-key-index-value&#34; &gt;lset key index value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#ltrim-key-start-end&#34; &gt;ltrim key start end&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#linsert-key-beforeafter-pivot-value&#34; &gt;linsert key before|after pivot value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#rpoplpush-source-destination&#34; &gt;rpoplpush source destination&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF-2&#34; &gt;使用场景&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5set%E7%B1%BB%E5%9E%8B&#34; &gt;5、set类型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E7%AE%80%E4%BB%8B-3&#34; &gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sadd-key-member&#34; &gt;sadd key member&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#srem-key-member&#34; &gt;srem key member&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#smembers&#34; &gt;smembers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sismember-key-member&#34; &gt;sismember key member&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sdiff-key1-key2-&#34; &gt;sdiff key1 key2 &amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sinter-key1-key2&#34; &gt;sinter key1 key2&amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sunion-key1-key2&#34; &gt;sunion key1 key2&amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#scard-key&#34; &gt;scard key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sdiffstoresinterstoresunionstore-destination-key1-key2&#34; &gt;sdiffstore/sinterstore/sunionstore destination key1 key2&amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#srandmember-key-count&#34; &gt;srandmember key count&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#spop&#34; &gt;spop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF-3&#34; &gt;使用场景&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6zset%E7%B1%BB%E5%9E%8B&#34; &gt;6、zset类型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E7%AE%80%E4%BB%8B-4&#34; &gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zadd-key-score-member&#34; &gt;zadd key score member&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zscore-key-member&#34; &gt;zscore key member&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zrange-key-start-stop-withscores&#34; &gt;zrange key start stop [withscores]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zrangebyscore-key-min-max-withscores-limit-offset-count&#34; &gt;zrangebyscore key min max [withscores] limit offset count&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zrevrangebyscore-key-max-min-withscores-limit-offset-count&#34; &gt;zrevrangebyscore key max min [withscores] limit offset count&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zincrby-key-increment-member&#34; &gt;zincrby key increment member&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zcard-key&#34; &gt;zcard key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zcount-key-min-max&#34; &gt;zcount key min max&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zrem-key-member1-&#34; &gt;zrem key member1 &amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zremrangebyranke-key-start-stop&#34; &gt;zremrangebyranke key start stop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zremrangebyscore-key-min-max&#34; &gt;zremrangebyscore key min max&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zrank-key-member&#34; &gt;zrank key member&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zrevrank-key-member&#34; &gt;zrevrank key member&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;1命令返回值&#34;&gt;1、命令返回值&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;状态回复
&lt;ul&gt;
&lt;li&gt;OK：成功&lt;/li&gt;
&lt;li&gt;PONG：响应PING&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;错误回复：命令不存在或者命令格式有误
&lt;ul&gt;
&lt;li&gt;Error Unknown command&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;整数回复：
&lt;ul&gt;
&lt;li&gt;INCR命令：返回递增后的键值&lt;/li&gt;
&lt;li&gt;DBSIZE命令：返回键的数量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符串回复：
&lt;ul&gt;
&lt;li&gt;请求键的值或者请求一个其他类型键中的某个元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多行字符串回复：
&lt;ul&gt;
&lt;li&gt;请求非字符串类型键的元素列表&lt;/li&gt;
&lt;li&gt;Keys (Pattern)：返回数据库中符合指定规则的键名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2多数据库&#34;&gt;2、多数据库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一个Redis实例提供了多个用来存储数据的字典，客户端可以指定数据存储在哪个字典中。&lt;/li&gt;
&lt;li&gt;数据库默认从0开始递增命名，默认支持16个数据库（DB0，DB1，&amp;hellip;，DB15）&lt;/li&gt;
&lt;li&gt;不支持自定义数据库名字，也不支持单独设置访问密码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3命令大全&#34;&gt;3、命令大全&lt;/h2&gt;
&lt;h3 id=&#34;1通用命令&#34;&gt;1、通用命令&lt;/h3&gt;
&lt;h4 id=&#34;keys-pattern&#34;&gt;keys pattern&lt;/h4&gt;
&lt;p&gt;获得符合规则的键名列表，支持？、*、[]、\x四种通配符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;keys命令会遍历所有键，不建议在生产环境中使用&lt;/li&gt;
&lt;li&gt;命令不区分大小写&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;exists-key&#34;&gt;exists key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;如果键存在返回1，否则返回0&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;del-key&#34;&gt;del key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;删除一个或多个键，返回删除的键的个数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;type-key&#34;&gt;type key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;获得键值的数据类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2字符串类型&#34;&gt;2、字符串类型&lt;/h3&gt;
&lt;h4 id=&#34;简介&#34;&gt;简介&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;字符串类型是Redis中最基本的数据类型，它能存储任何形式的字符串，包括二进制数据，可以存储邮箱、JSON、或者一张图片，允许存储的最大容量是512MB&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;set-key-value--get-key&#34;&gt;set key value / get key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;赋值与取值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;incr-key&#34;&gt;incr key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;递增数字，让当前键值递增，并返回递增后的值&lt;/li&gt;
&lt;li&gt;如果key不存在时会默认键值为0&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;incrby-key-increment&#34;&gt;incrby key increment&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;增加指定的整数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;decr-key&#34;&gt;decr key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;同上&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;decrby-key-decrement&#34;&gt;decrby key decrement&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;同上&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;incrbyfloat-key-increment&#34;&gt;incrbyfloat key increment&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;增加指定浮点数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;append-key-value&#34;&gt;append key value&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;尾部追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;strlen-key&#34;&gt;strlen key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;字符串长度&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mget-key--mset-key1-value1-&#34;&gt;mget key / mset key1 value1 &amp;hellip;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;同时获取/设置多个键值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;位操作&#34;&gt;位操作&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;getbit key offset&lt;/li&gt;
&lt;li&gt;setbit key offset value&lt;/li&gt;
&lt;li&gt;bitcount key&lt;/li&gt;
&lt;li&gt;bittop&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;使用场景&#34;&gt;使用场景&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;文章访问量统计：为每篇文章使用一个名为post:文h章ID:page.view的键来记录文章的访问量，每次访问文章的时候使用incr命令。（键命名建议：“对象类型：对象ID：对象属性”）&lt;/li&gt;
&lt;li&gt;生成自增ID：对于每一类对象使用名为对象类型：count的键来存储当前类型对象的数量（如users:count），每次新增一个对象时都使用incr命令，返回值就是该新增对象的ID。&lt;/li&gt;
&lt;li&gt;存储文章数据：JSON存储&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3hash类型&#34;&gt;3、hash类型&lt;/h3&gt;
&lt;h4 id=&#34;简介-1&#34;&gt;简介&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;散列类型适合存储对象：使用对象类别和ID构成键名，使用字段表示属性，字段值则存储属性值。一个键最多存2^32 - 1个元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hset-key-field-value&#34;&gt;hset key field value&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;hset car price 500&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hget-key-field&#34;&gt;hget key field&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;hget car price&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hmset-key-field-value&#34;&gt;hmset key field value&lt;/h4&gt;
&lt;h4 id=&#34;hmget-key-field&#34;&gt;hmget key field&lt;/h4&gt;
&lt;h4 id=&#34;hgetall-key&#34;&gt;hgetall key&lt;/h4&gt;
&lt;h4 id=&#34;hexists-key-field&#34;&gt;hexists key field&lt;/h4&gt;
&lt;h4 id=&#34;hsetnx-key-field-value&#34;&gt;hsetnx key field value&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当字段不存在时赋值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原子操作，线程安全&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hincrby-key-field-increment&#34;&gt;hincrby key field increment&lt;/h4&gt;
&lt;h4 id=&#34;hdel-key-field&#34;&gt;hdel key field&lt;/h4&gt;
&lt;h4 id=&#34;其他命令&#34;&gt;其他命令&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;hkeys&lt;/li&gt;
&lt;li&gt;hvals&lt;/li&gt;
&lt;li&gt;hlen&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;使用场景-1&#34;&gt;使用场景&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;存储文章数据&lt;/li&gt;
&lt;li&gt;存储文章缩略名：使用slug.to.id的键来存储文章缩略名和ID之间的映射关系。这样就可以用hexists判断缩略名是否存在，使用hget命令来获取缩略名对应的文章ID&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;4list类型&#34;&gt;4、list类型&lt;/h3&gt;
&lt;h4 id=&#34;简介-2&#34;&gt;简介&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;可以存储一个有序的字符串列表，常用操作是向列表两端添加元素&lt;/li&gt;
&lt;li&gt;底层：双向链表，添加复杂度O（1）&lt;/li&gt;
&lt;li&gt;适用场景：只关心最新的内容&lt;/li&gt;
&lt;li&gt;一个键最多存2^32 - 1个元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;lpush-key-value1&#34;&gt;lpush key value1&amp;hellip;&lt;/h4&gt;
&lt;h4 id=&#34;rpush-key-value1&#34;&gt;rpush key value1&amp;hellip;&lt;/h4&gt;
&lt;h4 id=&#34;lpop-key&#34;&gt;lpop key&lt;/h4&gt;
&lt;h4 id=&#34;rpop-key&#34;&gt;rpop key&lt;/h4&gt;
&lt;h4 id=&#34;llen-key&#34;&gt;llen key&lt;/h4&gt;
&lt;h4 id=&#34;lrange-key-start-stop&#34;&gt;lrange key start stop&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;获取列表片段（两边都是闭区间）&lt;/li&gt;
&lt;li&gt;支持负索引（与python类似）&lt;/li&gt;
&lt;li&gt;0，-1会返回所有元素&lt;/li&gt;
&lt;li&gt;start &amp;gt; stop：返回空&lt;/li&gt;
&lt;li&gt;stop &amp;gt; len：返回start,start + len&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;lrem-key-count-value&#34;&gt;lrem key count value&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;删除列表中前count个值为value的元素，返回值是实际删除的元素个数&lt;/li&gt;
&lt;li&gt;count&amp;gt;0时，从列表左边开始删除&lt;/li&gt;
&lt;li&gt;count&amp;lt;0时，从列表右边开始删除&lt;/li&gt;
&lt;li&gt;count=0时，删除所有&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;lindex-key-index&#34;&gt;lindex key index&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;索引取值，支持负数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;lset-key-index-value&#34;&gt;lset key index value&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;索引赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ltrim-key-start-end&#34;&gt;ltrim key start end&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;删除指定索引外的全部值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;linsert-key-beforeafter-pivot-value&#34;&gt;linsert key before|after pivot value&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;首先查找pivot，然后插入其前面或后面&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;rpoplpush-source-destination&#34;&gt;rpoplpush source destination&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;将一个元素转到另一个列表&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;使用场景-2&#34;&gt;使用场景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;存储文章ID列表&lt;/li&gt;
&lt;li&gt;存储评论列表&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5set类型&#34;&gt;5、set类型&lt;/h3&gt;
&lt;h4 id=&#34;简介-3&#34;&gt;简介&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;无序、唯一&lt;/li&gt;
&lt;li&gt;最多2^32 - 1个元素&lt;/li&gt;
&lt;li&gt;常用操作：插入、删除、判断某个元素是否存在、交集、并集、差集&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sadd-key-member&#34;&gt;sadd key member&lt;/h4&gt;
&lt;h4 id=&#34;srem-key-member&#34;&gt;srem key member&lt;/h4&gt;
&lt;h4 id=&#34;smembers&#34;&gt;smembers&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;返回所有元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sismember-key-member&#34;&gt;sismember key member&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;判断元素是否在集合中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;O（1）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sdiff-key1-key2-&#34;&gt;sdiff key1 key2 &amp;hellip;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;求差集（ key1 - key2）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sinter-key1-key2&#34;&gt;sinter key1 key2&amp;hellip;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;求交集&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sunion-key1-key2&#34;&gt;sunion key1 key2&amp;hellip;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;求并集&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;scard-key&#34;&gt;scard key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;获取元素个数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sdiffstoresinterstoresunionstore-destination-key1-key2&#34;&gt;sdiffstore/sinterstore/sunionstore destination key1 key2&amp;hellip;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;存储集合操作的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;srandmember-key-count&#34;&gt;srandmember key count&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;count&amp;gt;0时，获取不重复的随机count个元素&lt;/li&gt;
&lt;li&gt;count&amp;lt;0时，获取可能重复的随机count个元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;spop&#34;&gt;spop&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;随机选择一个元素弹出&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;使用场景-3&#34;&gt;使用场景&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;存储文章标签&lt;/li&gt;
&lt;li&gt;通过标签搜索文章&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;6zset类型&#34;&gt;6、zset类型&lt;/h3&gt;
&lt;h4 id=&#34;简介-4&#34;&gt;简介&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;有序&lt;/li&gt;
&lt;li&gt;唯一&lt;/li&gt;
&lt;li&gt;可以获取某一范围的袁旭&lt;/li&gt;
&lt;li&gt;底层：散列表和跳表，读取速度为O(logn)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zadd-key-score-member&#34;&gt;zadd key score member&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;支持整数、双精度浮点数，甚至-inf和+inf&lt;/li&gt;
&lt;li&gt;可以修改score&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zscore-key-member&#34;&gt;zscore key member&lt;/h4&gt;
&lt;h4 id=&#34;zrange-key-start-stop-withscores&#34;&gt;zrange key start stop [withscores]&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;获得排名在某个范围的元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以添加分数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;复杂度为O(logn + m)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zrangebyscore-key-min-max-withscores-limit-offset-count&#34;&gt;zrangebyscore key min max [withscores] limit offset count&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;获得指定分数范围的元素，两边是闭区间&lt;/li&gt;
&lt;li&gt;支持inf&lt;/li&gt;
&lt;li&gt;数字前添加左圆括号表示开区间&lt;/li&gt;
&lt;li&gt;可以用limit限制返回的个数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zrevrangebyscore-key-max-min-withscores-limit-offset-count&#34;&gt;zrevrangebyscore key max min [withscores] limit offset count&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;同上，改成降序&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zincrby-key-increment-member&#34;&gt;zincrby key increment member&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;增加某个元素的分数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zcard-key&#34;&gt;zcard key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;元素数量&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zcount-key-min-max&#34;&gt;zcount key min max&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;分数范围内个数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zrem-key-member1-&#34;&gt;zrem key member1 &amp;hellip;&lt;/h4&gt;
&lt;h4 id=&#34;zremrangebyranke-key-start-stop&#34;&gt;zremrangebyranke key start stop&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;根据排名范围删除元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zremrangebyscore-key-min-max&#34;&gt;zremrangebyscore key min max&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;根据分数范围删除元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zrank-key-member&#34;&gt;zrank key member&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;获取元素排名&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zrevrank-key-member&#34;&gt;zrevrank key member&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;降序排名&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Spring Cloud Alibaba笔记</title>
        <link>https://cuterwrite.top/p/spring-cloud-alibaba-1/</link>
        <pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/spring-cloud-alibaba-1/</guid>
        <description>&lt;img src="https://cdn.jsdelivr.net/gh/PKUcoldkeyboard/image-hosting@master/20210503/dolomites-5076492_1920.5srkr3iefto0.jpg" alt="Featured image of post Spring Cloud Alibaba笔记" /&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;  &lt;em&gt;generated with &lt;a class=&#34;link&#34; href=&#34;https://github.com/thlorenz/doctoc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DocToc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#spring-cloud-alibaba%E7%AC%94%E8%AE%B0&#34; &gt;Spring Cloud alibaba笔记&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#soa%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%8C%BA%E5%88%AB&#34; &gt;SOA与微服务的区别：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#spring-cloud-alibaba%E4%B8%8Espring-cloud-netflix%E7%9A%84%E5%AF%B9%E6%AF%94&#34; &gt;Spring Cloud Alibaba与Spring Cloud Netflix的对比&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E4%BB%80%E4%B9%88%E6%98%AFspring-boot&#34; &gt;什么是Spring Boot？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#iocdi%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%E4%B8%8E%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5&#34; &gt;IOC/DI（控制反转与依赖注入）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#spring%E5%8F%91%E5%B1%95%E8%BF%87%E7%A8%8B&#34; &gt;Spring发展过程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E7%9A%84%E5%AE%9E%E7%8E%B0&#34; &gt;自动装配的实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAstarter&#34; &gt;手写实现一个Starter&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-starter%E7%9A%84%E5%8A%9F%E8%83%BD&#34; &gt;1 Starter的功能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-starter%E7%9A%84%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83&#34; &gt;2 Starter的命名规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8Eredis%E7%9A%84starter&#34; &gt;3 实现基于Redis的Starter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#apache-dubbo&#34; &gt;Apache Dubbo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zookeeper&#34; &gt;Zookeeper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#dubbo%E9%9B%86%E6%88%90zookeeper&#34; &gt;Dubbo集成Zookeeper&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-%E9%9C%80%E8%A6%81%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98&#34; &gt;1 需要解决的问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4&#34; &gt;2 实现步骤&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-%E5%8E%9F%E7%90%86&#34; &gt;3 原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-%E5%AE%9E%E6%88%98dubbo-spring-cloud&#34; &gt;4 实战Dubbo Spring Cloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#dubbo%E7%9A%84%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8&#34; &gt;Dubbo的高级应用&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-%E9%9B%86%E7%BE%A4%E5%AE%B9%E9%94%99&#34; &gt;1 集群容错&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1&#34; &gt;2 负载均衡&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7&#34; &gt;3 服务降级&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E4%B8%BB%E6%9C%BA%E7%BB%91%E5%AE%9A%E8%A7%84%E5%88%99&#34; &gt;主机绑定规则&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#dubbo%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90&#34; &gt;Dubbo源码分析&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-%E6%A0%B8%E5%BF%83%E7%82%B9&#34; &gt;1 核心点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%E7%94%9F%E6%88%90ide%E5%B7%A5%E7%A8%8B%E7%9A%84%E5%91%BD%E4%BB%A4&#34; &gt;2 生成IDE工程的命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-spiservice-provider-interface&#34; &gt;3 SPI(Service Provider Interface)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-dubbo%E4%B8%AD%E7%9A%84spi%E6%80%9D%E6%83%B3&#34; &gt;4 Dubbo中的SPI思想&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5-dubbo%E4%B8%AD%E7%9A%84spi%E5%8E%9F%E7%90%86&#34; &gt;5 Dubbo中的SPI原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6-%E8%87%AA%E9%80%82%E5%BA%94%E6%89%A9%E5%B1%95%E7%82%B9&#34; &gt;6 自适应扩展点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#7-protocol%E8%87%AA%E9%80%82%E5%BA%94%E6%89%A9%E5%B1%95%E7%82%B9%E6%BA%90%E7%A0%81&#34; &gt;7 Protocol自适应扩展点源码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#8-ioc&#34; &gt;8 IOC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#9-aop&#34; &gt;9 AOP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#10-dubbo%E9%9B%86%E6%88%90spring%E6%9C%BA%E5%88%B6%E7%95%A5&#34; &gt;10 Dubbo集成Spring机制（略）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E4%BB%80%E4%B9%88%E6%98%AFnacos&#34; &gt;什么是Nacos？&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-%E5%85%B3%E9%94%AE%E7%89%B9%E6%80%A7&#34; &gt;1 关键特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-nacos%E9%9B%86%E7%BE%A4&#34; &gt;2 Nacos集群&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E6%90%AD%E5%BB%BAnacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9&#34; &gt;搭建Nacos注册中心的注意点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#nacos%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86&#34; &gt;Nacos实现原理&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-%E6%A8%A1%E5%9D%97%E7%BB%84%E6%88%90&#34; &gt;1 模块组成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%9A%84%E5%8E%9F%E7%90%86&#34; &gt;2 注册中心的原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-nacos%E6%BA%90%E7%A0%81%E7%95%A5&#34; &gt;3 Nacos源码（略）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#nacos%E5%AE%9E%E7%8E%B0%E7%BB%9F%E4%B8%80%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86&#34; &gt;Nacos实现统一配置管理&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-nacos%E9%9B%86%E6%88%90spring-boot&#34; &gt;1 Nacos集成Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-nacos%E9%9B%86%E6%88%90spring-cloud&#34; &gt;2 Nacos集成Spring Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0%E9%85%8D%E7%BD%AE&#34; &gt;3 动态更新配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-%E5%9F%BA%E4%BA%8Edataid%E9%85%8D%E7%BD%AEyaml%E7%9A%84%E6%96%87%E4%BB%B6%E6%89%A9%E5%B1%95%E5%90%8D&#34; &gt;4 基于DataID配置yaml的文件扩展名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5-%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE%E5%88%87%E6%8D%A2&#34; &gt;5 不同环境的配置切换&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6-%E8%87%AA%E5%AE%9A%E4%B9%89namespace%E5%92%8Cgroup&#34; &gt;6 自定义Namespace和Group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#nacos-config%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E7%95%A5&#34; &gt;Nacos Config实现原理（略）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#spring-cloud%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E7%9A%84%E5%8E%9F%E7%90%86%E7%95%A5&#34; &gt;Spring Cloud加载配置的原理（略）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#nacos%E6%BA%90%E7%A0%81%E7%95%A5&#34; &gt;Nacos源码（略）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sentinel%E9%99%90%E6%B5%81%E5%8F%8A%E7%86%94%E6%96%AD&#34; &gt;Sentinel限流及熔断&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-%E6%9C%8D%E5%8A%A1%E9%99%90%E6%B5%81%E7%9A%84%E4%BD%9C%E7%94%A8%E5%8F%8A%E5%AE%9E%E7%8E%B0&#34; &gt;1 服务限流的作用及实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD%E5%92%8C%E9%99%8D%E7%BA%A7&#34; &gt;2 服务熔断和降级&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-sentinel%E7%9A%84%E7%89%B9%E6%80%A7&#34; &gt;3 Sentinel的特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-sentinel%E7%9A%84%E7%BB%84%E6%88%90&#34; &gt;4 Sentinel的组成：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5-sentinel%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8&#34; &gt;5 Sentinel基本应用：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6-sentinel%E8%B5%84%E6%BA%90%E4%BF%9D%E6%8A%A4%E8%A7%84%E5%88%99&#34; &gt;6 Sentinel资源保护规则&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-qps%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E8%A1%8C%E4%B8%BA&#34; &gt;1 QPS流量控制行为&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#7-sentinel%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD&#34; &gt;7 Sentinel实现服务熔断&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sentinel%E9%9B%86%E6%88%90spring-cloud&#34; &gt;Sentinel集成Spring Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E5%9F%BA%E4%BA%8Esentinel-dashboard%E6%9D%A5%E5%AE%9E%E7%8E%B0%E6%B5%81%E6%8E%A7%E9%85%8D%E7%BD%AE&#34; &gt;基于Sentinel Dashboard来实现流控配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sentinel%E8%87%AA%E5%AE%9A%E4%B9%89url%E9%99%90%E6%B5%81%E5%BC%82%E5%B8%B8&#34; &gt;Sentinel自定义URL限流异常&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sentinel%E5%AF%B9url%E8%B5%84%E6%BA%90%E6%B8%85%E6%B4%97&#34; &gt;Sentinel对URL资源清洗&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sentinel%E9%9B%86%E6%88%90nacos%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E6%B5%81%E6%8E%A7%E8%A7%84%E5%88%99&#34; &gt;Sentinel集成Nacos实现动态流控规则&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sentinel%E9%9B%86%E6%88%90nacos%E5%AE%9E%E7%8E%B0%E8%A7%84%E5%88%99%E5%90%8C%E6%AD%A5&#34; &gt;Sentinel集成Nacos实现规则同步&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-sentinel-dashboard%E6%BA%90%E7%A0%81%E4%BF%AE%E6%94%B9&#34; &gt;1 Sentinel Dashboard源码修改：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-sentinel-dashboard%E8%A7%84%E5%88%99%E5%90%8C%E6%AD%A5&#34; &gt;2 Sentinel Dashboard规则同步&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sentinel%E9%9B%86%E6%88%90dubbo%E5%AE%9E%E7%8E%B0%E9%99%90%E6%B5%81&#34; &gt;Sentinel集成Dubbo实现限流&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#&#34; &gt;*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-dubbo%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%85%A5sentinel-dashboard&#34; &gt;1 Dubbo服务接入Sentinel Dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-dubbo%E6%9C%8D%E5%8A%A1%E9%99%90%E6%B5%81%E8%A7%84%E5%88%99&#34; &gt;2 Dubbo服务限流规则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sentinel%E7%83%AD%E7%82%B9%E9%99%90%E6%B5%81&#34; &gt;Sentinel热点限流&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-%E7%83%AD%E7%82%B9%E5%8F%82%E6%95%B0%E9%99%90%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8&#34; &gt;1 热点参数限流的使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-sentinelresource&#34; &gt;2 @SentinelResource&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-%E7%83%AD%E7%82%B9%E5%8F%82%E6%95%B0%E8%A7%84%E5%88%99%E8%AF%B4%E6%98%8E&#34; &gt;3 热点参数规则说明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sentinel%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E7%95%A5&#34; &gt;Sentinel的工作原理（略）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#spring-cloud-sentinel%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E7%95%A5&#34; &gt;Spring Cloud Sentinel工作原理（略）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sentinel%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%95%A5&#34; &gt;Sentinel核心源码分析（略）&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-%E9%99%90%E6%B5%81%E7%9A%84%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0&#34; &gt;1 限流的源码实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%E5%AE%9E%E6%97%B6%E6%8C%87%E6%A0%87%E6%95%B0%E6%8D%AE%E7%BB%9F%E8%AE%A1&#34; &gt;2 实时指标数据统计&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86&#34; &gt;3 服务降级的实现原理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E4%BB%80%E4%B9%88%E6%98%AF%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1&#34; &gt;什么是分布式事务？&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E9%97%AE%E9%A2%98%E7%9A%84%E7%90%86%E8%AE%BA%E6%A8%A1%E5%9E%8B&#34; &gt;1 分布式事务问题的理论模型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-xopen%E5%88%86%E5%B8%83%E5%BC%8F%E6%A8%A1%E5%9E%8B&#34; &gt;1 X/Open分布式模型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4%E5%8D%8F%E8%AE%AE&#34; &gt;2 两阶段提交协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-%E4%B8%89%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4%E5%8D%8F%E8%AE%AE&#34; &gt;3 三阶段提交协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-cap%E5%AE%9A%E7%90%86%E5%92%8Cbase%E7%90%86%E8%AE%BA&#34; &gt;4 CAP定理和BASE理论&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E9%97%AE%E9%A2%98%E7%9A%84%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88&#34; &gt;2 分布式事务问题的常见解决方案&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-tcc%E8%A1%A5%E5%81%BF%E6%80%A7%E6%96%B9%E6%A1%88&#34; &gt;1 TCC补偿性方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%E5%9F%BA%E4%BA%8E%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%B6%88%E6%81%AF%E7%9A%84%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7%E6%96%B9%E6%A1%88&#34; &gt;2 &lt;strong&gt;基于可靠性消息的最终一致性方案&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-%E6%9C%80%E5%A4%A7%E5%8A%AA%E5%8A%9B%E9%80%9A%E7%9F%A5%E5%9E%8B&#34; &gt;3 最大努力通知型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%A1%86%E6%9E%B6seata&#34; &gt;3 分布式事务框架Seata&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-at%E6%A8%A1%E5%BC%8F&#34; &gt;1 AT模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-saga%E6%A8%A1%E5%BC%8F&#34; &gt;2 Saga模式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;spring-cloud-alibaba笔记&#34;&gt;Spring Cloud alibaba笔记&lt;/h1&gt;
&lt;h2 id=&#34;soa与微服务的区别&#34;&gt;SOA与微服务的区别：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;SOA关注的是服务的重用性及解决信息孤岛问题&lt;/li&gt;
&lt;li&gt;微服务关注的是解耦，虽然解耦和可重用性从特定的角度来看是一样的，但本质上是有区别的，解耦是降低业务之间的耦合度，而重用性关注的是服务的复用。&lt;/li&gt;
&lt;li&gt;微服务会更多地关注在DevOps的持续交付上，因为服务粒度细化之后使得开发运维变得更加重要，因此微服务与容器化技术的结合更加紧密。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;spring-cloud-alibaba与spring-cloud-netflix的对比&#34;&gt;Spring Cloud Alibaba与Spring Cloud Netflix的对比&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Alibaba开源组件在没有织入Spring Cloud生态之前，已经在各大公司广泛应用，所以容易实现技术整合及迁移。&lt;/li&gt;
&lt;li&gt;Alibaba开源组件在服务治理上和处理高并发的能力上有天然的优势。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;什么是spring-boot&#34;&gt;什么是Spring Boot？&lt;/h2&gt;
&lt;p&gt;帮助开发者快速构建一个基于Spring Framework及Spring生态体系的应用解决方案，也是对于“约定优于配置”理念的最佳实践。&lt;/p&gt;
&lt;h2 id=&#34;iocdi控制反转与依赖注入&#34;&gt;IOC/DI（控制反转与依赖注入）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;IOC：把对象的生命周期托管到Spring容器中，而反转是指对象的获取方式被反转了。&lt;/li&gt;
&lt;li&gt;当使用IOC容器之后，客户端类不需要通过new来创建这些对象，而是直接从IOC容器中获得。早期的Spring中，主要通过XML的方式来定义Bean，Spring会解析XML文件，把定义的Bean转载到IOC容器中。&lt;/li&gt;
&lt;li&gt;DI：IOC容器在运行期间，动态地把某种依赖关系注入组件中。&lt;/li&gt;
&lt;li&gt;DI的三种方法：接口注入、构造方法注入、setter方法注入；目前是基于注解的形式：有@Autowired、@Inject和@Resource&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;spring发展过程&#34;&gt;Spring发展过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;J2EE的EJB时代&lt;/li&gt;
&lt;li&gt;Spring XML配置文件时代&lt;/li&gt;
&lt;li&gt;JavaConfig的无配置化注入时代&lt;/li&gt;
&lt;li&gt;Spring Boot时代：约定优于配置，核心为：
&lt;ol&gt;
&lt;li&gt;Starter组件：开箱即用&lt;/li&gt;
&lt;li&gt;自动装配：自动根据上下文完成Bean的装配&lt;/li&gt;
&lt;li&gt;Actuator：应用监控&lt;/li&gt;
&lt;li&gt;Spring Boot CLI：脚手架&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;自动装配的实现&#34;&gt;自动装配的实现&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;实现原理：@EnableAutoConfiguration，这个注解的声明在启动类注解@SpringBootApplication内。进一步又涉及到@Enable注解（本质上是对@Configuration和@Bean的封装）；使用Enable注解后，Spring会解析到@Import导入的配置类，从而根据这个配置类中的描述来实现Bean的装配。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子：可以直接使用@Autowired来注入redisTemplate实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EnableAutoConfiguration的原理&lt;/p&gt;
&lt;p&gt;@Import：导入一个AutoConfigurationImportSelector类。&lt;/p&gt;
&lt;p&gt;@AutoConfigurationPackage：把使用了该注解的类所在的类所在的包及子包下所有组件扫描到Spring IoC容器中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AutoConfigurationImportSelector：是ImportSelector的实现类，只有一个selectImports抽象方法，并且返回一个String数组，在这个数组中可以指定需要装配到IOC容器的类，当@Import中导入一个ImportSelectord的实现类后，会把该实现类中返回的Class名称都装载到IOC容器中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ImportSelector与@Configuration的区别：前者可以实现批量装配，并且还可以通过逻辑处理来实现Bean的选择性装配，也就是根据上下文来决定哪些类能够被IOC容器初始化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动装配原理总结：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过@Import(AutoConfigurationImportSelector)实现配置类的导入&lt;/li&gt;
&lt;li&gt;AutoConfigurationImportSelector类实现了ImportSelector接口，重写了方法selectImports，用于实现选择性批量配置类的装配。&lt;/li&gt;
&lt;li&gt;通过Spring提供的SpringFactoriesLoader机制，扫描classpath路径下的META-INF/spring.factories，读取需要实现自动装配的配置类。&lt;/li&gt;
&lt;li&gt;通过条件筛选的方式，把不符合条件的配置类移除，最终完成自动装配。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@Conditional条件装配&lt;/p&gt;
&lt;p&gt;是Spring Framework提供的一个核心注解，这个注解的作用是提供自动装配的条件约束，一般与@Configuration和**@Bean**配合使用。&lt;/p&gt;
&lt;p&gt;简单来说，Spring在解析@Configuration配置类时，如果该配置类增加了@Conditional注解，那么就会根据该注解配置的条件来决定是否要实现Bean的装配。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Configuration&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ConditionConfig&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;
	&lt;span class=&#34;nd&#34;&gt;@Conditional&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GpCondition&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ThirdClass&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;thirdClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ThirdClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;表示：如果GpCondition类中的matches返回true，则装载ThirdClass这个类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@Conditional在Spring Boot中的扩展&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210224200015800.png&#34; alt=&#34;image-20210224200015800&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;常用装配注解：&lt;/p&gt;
&lt;p&gt;@ConditionalOnBean&lt;/p&gt;
&lt;p&gt;@ConditionalOnMissingBean&lt;/p&gt;
&lt;p&gt;@ConditionalOnResource&lt;/p&gt;
&lt;p&gt;@ConditionalOnProperties&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;spring-autoconfigure-metadata&lt;/p&gt;
&lt;p&gt;用于实现批量自动装配条件配置，作用和@Conditional一致，只是把这些条件配置放在了配置文件中。&lt;/p&gt;
&lt;p&gt;两个条件：&lt;/p&gt;
&lt;p&gt;（1）配置文件的路径和名称必须是/META-INF/spring-autoconfigure-metadata.properties&lt;/p&gt;
&lt;p&gt;（2）配置文件中key的配置格式：自动配置类的类全路径名.条件=值&lt;/p&gt;
&lt;p&gt;好处：有效降低Spring Boot的启动时间，通过这种过滤方式可以减少配置类的加载数量，因为这个过滤发生在配置类的装载之前，所以它可以降低Spring Boot启动时装载Bean的耗时。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;手写实现一个starter&#34;&gt;手写实现一个Starter&lt;/h2&gt;
&lt;h3 id=&#34;1-starter的功能&#34;&gt;1 Starter的功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;涉及相关组件的Jar包依赖&lt;/li&gt;
&lt;li&gt;自动实现Bean的装配&lt;/li&gt;
&lt;li&gt;自动声明并且加载application.properties文件中的属性配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-starter的命名规范&#34;&gt;2 Starter的命名规范&lt;/h3&gt;
&lt;p&gt;Starter的命名主要分为官方命名和自定义组件命名两类，这种命名格式不是强制性的，也是一种约定俗成的方式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官方命名格式：spring-boot-starter-模块名称&lt;/li&gt;
&lt;li&gt;自定义命名格式：模块名称-spring-boot-starter&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-实现基于redis的starter&#34;&gt;3 实现基于Redis的Starter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;创建一个工程，命名为redis-spring-boot-starter&lt;/li&gt;
&lt;li&gt;添加Jar包依赖&lt;/li&gt;
&lt;li&gt;定义属性类，实现在application.properties中配置Redis的连接参数，使用@ConfigurationProperties，把当前类中的属性和配置文件中的配置进行绑定，并且规定前缀。&lt;/li&gt;
&lt;li&gt;定义需要自动装配的配置类，主要就是把RedissonClient装配到IOC容器中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;apache-dubbo&#34;&gt;Apache Dubbo&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;什么是Dubbo：一个分布式服务框架，主要实现多个系统之间的高性能、透明化调用，简单来说就是一个RPC框架，但是和普通的RPC框架不同，它提供了服务治理功能，比如服务注册、监控、路由、容错等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务提供者开发流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个普通的Maven工程provider，并创建两个模块：api和provider，其中provider是一个Spring Boot工程&lt;/li&gt;
&lt;li&gt;在api模块中定义接口，并且通过mvn install安装到本地仓库&lt;/li&gt;
&lt;li&gt;在provider模块的pom文件中引入api和dubbo组件。&lt;/li&gt;
&lt;li&gt;在provider中实现接口，并且使用@DubboService注解发布服务&lt;/li&gt;
&lt;li&gt;在application.properties文件（或yml）中添加Dubbo服务的配置信息，包括application.name、protocal.name、protocol.port和registry.address&lt;/li&gt;
&lt;li&gt;启动Spring Boot&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务调用者的开发流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个Spring Boot项目consumer，添加Jar包依赖（Dubbo和api）&lt;/li&gt;
&lt;li&gt;在application.properties中配置dubbo.application.name&lt;/li&gt;
&lt;li&gt;使用@DubboReference注解获取一个远程代理对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;zookeeper&#34;&gt;Zookeeper&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Zookeeper是一个高性能的分布式协调中间件，基于Java编写。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zookeeper的数据结构：数据模型和分布式文件系统类似，是一种层次化的属性结构，区别是：Zookeeper的数据是结构化存储的，并没有在物理上体现出文件和目录。Zookeeper树中的每个节点被称为Znode，Znode维护了一个stat状态信息，其中包含数据变化的时间和版本等。并且每个Znode可以设置一个value值，Zookeeper并不用于通用的数据库或者大容量的对象存储，它只是管理和协调有关的数据，所以value的数据大小不建议设置得非常大，否则会带来更大的网络开销。Zookeeper上的每一个节点的数据都是允许读和写的，读表示指定获得Znode上的value数据，写表示修改Znode上的value数据。另外，节点的创建规则和文件系统中文件的创建规则类似，必须按照层次创建。例如：创建/node/node1/node1-1，先要创建/node/node1这两个层次节点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zookeeper的特性：Znode在被创建后，需要指定节点的类型，节点类型分为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225003640228.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Watcher机制：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Znode的订阅/通知机制：当Znode节点状态发生变化时或者Zookeeper客户端连接状态发生变化时，会触发事件通知。这个机制在服务注册与发现中，针对服务调用者及时感知到服务提供者的变化提供了非常好的解决方案。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zookeeper提供的Java API中，提供了三种机制来针对Znode进行注册监听，分别是：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225003945831.png&#34; alt=&#34;image-20210225003945831&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常用应用场景分析&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;分布式锁：（1）多线程中Synchronized和Lock用于解决共享资源访问的数据安全性问题，但范围是线程级别的。（2）在分布式架构中，多个进程对同一个共享资源的访问，也存在数据安全性问题，因此也需要使用锁的形式来解决这类问题，而解决分布式环境下多进程对于共享资源访问带来的安全性问题的方案就是使用分布式锁。锁的本质是排他性，也就是避免同一时刻多个进程同时访问某一个共享资源。（3）如果使用Zookeeper实现分布式锁来达到排他性的目的，只需要用到节点的特性：临时节点，以及同级节点的唯一性。（4）具体实现：a.获得锁的过程：所有客户端可以去Zookeeper服务器上/Exclusive_Locks节点下创建一个临时节点/lock。Zookeeper基于同级节点的唯一性，会保证所有客户端中只有一个客户端能创建成功，创建成功的客户端获得了排它锁，没有获得锁的客户端就需要通过Watcher机制监听/Exclusive_Locks节点下子节点的变更事件，用于实时监听/lock节点的变化情况以作出反应。 b.释放锁的过程：①获得锁的客户端因为异常断开了和服务端的连接，临时节点会自动删除。②获得锁的客户端执行完业务逻辑后，主动删除创建的lock节点。&lt;/li&gt;
&lt;li&gt;Master选举：分布式系统中的集群模式，某一机器宕机后，其他节点会接替故障节点继续工作。（1）Zookeeper有两种方式来实现Master选举的场景。假设集群中有3个节点，需要选举出Master，那么三个节点同时去Zookeeper服务器上创建一个临时节点/master-election，由于节点的唯一性，只会有一个客户端创建成功，创建成功就称为Master。同时，其他没有创建成功的客户端，针对该节点注册Watcher事件，监控master，一旦/master-election节点被删除，其他客户端重新发起master选举。（2）方法二：利用临时有序节点的特性来实现。所有参与选举的节点在/master节点下创建一个临时有序节点，编号最小的节点表示master，后续的节点监听上一个节点的删除事件，用于触发重新选举。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;dubbo集成zookeeper&#34;&gt;Dubbo集成Zookeeper&lt;/h2&gt;
&lt;h3 id=&#34;1-需要解决的问题&#34;&gt;1 需要解决的问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;服务动态上下线感知：服务调用者要感知到服务提供者上下线的变化。&lt;/li&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-实现步骤&#34;&gt;2 实现步骤&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在provider模块中添加Zookeeper相关依赖&lt;/li&gt;
&lt;li&gt;修改application.properties配置文件，修改dubbo的registry-addr为zookeeper服务器的地址，表示当前Dubbo服务需要注册到Zookeeper上。&lt;/li&gt;
&lt;li&gt;consumer只需要修改application.properties，设置dubbo的registry-addr即可&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3-原理&#34;&gt;3 原理&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Dubbo服务注册到Zookeeper上之后，可以在Zookeeper服务器上看到图下所示的树形结构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225005911001.png&#34; alt=&#34;image-20210225005911001&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其中URL是临时节点，其他皆为持久化节点，如果注册该节点的服务器下线了，那么这个服务器的URL地址就会被移除。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当Dubbo服务消费者启动时，会对/providers下的子节点注册Watcher监听，这样就可以感知到服务提供方的上下线变化，从而防止请求发送到已经下线的服务器造成访问失败。同时，服务消费者会在/consumers下写入自己的URL，这样可以在监控平台上看到某个Dubbo服务正在被哪些服务调用。最重要的是，如果服务消费者需要调用一个服务，那么它会先去/providers路径下获得所有该服务的提供方URL列表，然后通过负载均衡算法计算出一个地址进行远程访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此外，Dubbo还可以针对不同的情况实现以下功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于临时节点的特性，当服务器宕机或者下线时，注册中心会自动删除该服务提供者的信息。&lt;/li&gt;
&lt;li&gt;注册中心重启时，Dubbo能自动恢复注册数据及订阅请求。&lt;/li&gt;
&lt;li&gt;为了保证节点操作的安全性，Zookeeper提供了ACL权限控制，在Dubbo中可以通过register.username和password来设置节点的验证信息。&lt;/li&gt;
&lt;li&gt;注册中心默认的根节点为/dubbo，如果需要针对不同环境设置不同的根节点，可以使用registry.group修改根节点名称。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;4-实战dubbo-spring-cloud&#34;&gt;4 实战Dubbo Spring Cloud&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;创建service-provider工程，创建两个子模块api和provider，前者为maven工程，后者为Spring Boot工程&lt;/li&gt;
&lt;li&gt;在api中声明接口，并执行mvn install&lt;/li&gt;
&lt;li&gt;在provider中添加api、Spring Boot、Spring Cloud和Spring Cloud Alibaba相关组件的依赖。（包括spring-cloud-starter、spring-cloud-starter-dubbo、api、discovery）&lt;/li&gt;
&lt;li&gt;在父pom中显示声明dependencyManagement配置版本。&lt;/li&gt;
&lt;li&gt;在provider中创建接口的实现类，并且声明@DubboService&lt;/li&gt;
&lt;li&gt;在application.properties中配置Dubbo相关信息。&lt;/li&gt;
&lt;li&gt;启动provider服务。&lt;/li&gt;
&lt;li&gt;创建consumer，依赖与provider类似，同样在application.properties中配置Dubbo相关信息。注意：dubbo-cloud-subscribed-services表示服务调用者订阅的服务提供方的应用名称列表，如果有多个应用名称，可以通过&amp;quot;,&amp;ldquo;分开，默认值为“*”&lt;/li&gt;
&lt;li&gt;使用@DubboReference消费服务，启动即可。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;dubbo的高级应用&#34;&gt;Dubbo的高级应用&lt;/h2&gt;
&lt;h3 id=&#34;1-集群容错&#34;&gt;1 集群容错&lt;/h3&gt;
&lt;p&gt;Dubbo默认提供6种容错模式，默认为Failover Cluster，此外可以根据实际需求自行扩展。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225012015079.png&#34; alt=&#34;image-20210225012015079&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225012046078.png&#34; alt=&#34;image-20210225012046078&#34;  /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置方式：在@DubboService中增加参数cluster=&amp;ldquo;failfast&amp;quot;即可。&lt;/li&gt;
&lt;li&gt;推荐：查询语句容错策略建议使用默认的Failover Cluster，而增删改操作建议使用Failfast Cluster或者使用Failover Cluster(retries=0)，防止出现数据重复添加等其他问题！建议在设计接口的时候把查询接口方法单独做成一个接口提供查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-负载均衡&#34;&gt;2 负载均衡&lt;/h3&gt;
&lt;p&gt;Dubbo提供了4种负载均衡策略，默认为random，也可以自行扩展（基于SPI机制）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225012419926.png&#34; alt=&#34;image-20210225012419926&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-服务降级&#34;&gt;3 服务降级&lt;/h3&gt;
&lt;p&gt;服务降级是一种系统保护策略，当服务器访问压力较大时，可以根据当前业务情况对不重要的服务进行降级，以保证核心业务的正常运行。所谓的降级，就是把一些非必要的功能在流量较大的时间段暂时关闭，比如在双十一大促时，淘宝会把查看历史订单、商品评论等功能关闭。&lt;/p&gt;
&lt;p&gt;降级的分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是否自动化：人工降级、自动降级&lt;/li&gt;
&lt;li&gt;功能划分：读服务降级和写服务降级&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自动降级更多来自于系统出现某些异常时自动触发“兜底的流畅”，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;故障降级：调用的远程服务挂了，网络故障或者RPC服务返回异常。这类情况在业务情况下可以通过设置兜底数据响应给客户端。&lt;/li&gt;
&lt;li&gt;限流降级：为了保护系统不被压垮，在系统中会针对核心业务进行限流，当请求流量达到阈值时，后续的请求会被拦截。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dubbo提供了一种Mock配置来实现服务降级，也就是当服务提供方出现网络异常无法访问时，客户端不抛出异常，步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在consumer中创建MockService，这个类只需要实现降级的接口即可，重写接口中的抽象方法实现本地数据的返回。&lt;/li&gt;
&lt;li&gt;在@DubboReference中增加mock参数，制定MockService的位置。&lt;/li&gt;
&lt;li&gt;在不启动Dubbo服务或者服务端的返回值超过默认的超时时间时，得到的数据就是MockService中的数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;主机绑定规则&#34;&gt;主机绑定规则&lt;/h2&gt;
&lt;p&gt;主机绑定表示的是Dubbo服务对外发布的IP地址，默认情况下Dubbo会按照以下顺序来查找并绑定主机IP地址。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查找环境变量DUBBO_IP_TO_BIND属性配置的IP地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查找dubbo.protocol.host属性的IP地址，默认是空，如果没有配置或者IP地址不合法则继续查找。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过LocalHost.getHostAddress获取本机IP地址，获取失败则继续。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果配置了注册中心的地址，则使用Socket通信连接到注册中心的地址后，使用for循环通过socket.getLocalAddress().getHostAddress()扫描各个网卡来获取网卡IP的地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建议：通过dubbo.protocal.host设置主机地址，防止注册错误的IP地址，使服务消费者无法调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker部署解决方案：使用&amp;ndash;net=host绑定网络，然后配置application.yml&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210301020007424.png&#34; alt=&#34;image-20210301020007424&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;配置inetutils下的两个参数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dubbo源码分析&#34;&gt;Dubbo源码分析&lt;/h2&gt;
&lt;h3 id=&#34;1-核心点&#34;&gt;1 核心点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SPI机制&lt;/li&gt;
&lt;li&gt;自适应扩展点&lt;/li&gt;
&lt;li&gt;IOC和AOP&lt;/li&gt;
&lt;li&gt;Dubbo如何与Spring集成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-生成ide工程的命令&#34;&gt;2 生成IDE工程的命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;mvn idea:idea&lt;/li&gt;
&lt;li&gt;mvn eclipse:eclipse&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-spiservice-provider-interface&#34;&gt;3 SPI(Service Provider Interface)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;自适应扩展点：AdaptiveExtension&lt;/li&gt;
&lt;li&gt;指定名称扩展点：Extension(name)&lt;/li&gt;
&lt;li&gt;激活扩展点：ActivateExtension(url,key)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SPI是JDK内置的一种服务提供发现机制，主要用于服务的扩展实现。SPI机制在很多场景中都有运用，比如数据库连接，JDK提供了Driver接口，这个驱动类由不同的数据库厂商来实现，然后JDK利用SPI机制从classpath下找到相应的驱动来获得指定数据库的连接。这种插拔式的扩展加载方式，也同样遵循一定的协议约定，比如所有的扩展点必须要放在resources/META-INF/services目录下，SPI机制会默认扫描这个路径下的属性文件以完成加载。&lt;/p&gt;
&lt;h3 id=&#34;4-dubbo中的spi思想&#34;&gt;4 Dubbo中的SPI思想&lt;/h3&gt;
&lt;p&gt;Dubbo或者SpringFactoriesLoader并没有使用JDK内置的SPI机制，只是利用了SPI的思想。Dubbo SPI的相关逻辑被封装在了ExtensionLoader类中，通过ExtensionLoader我们可以加载指定的实现类。&lt;/p&gt;
&lt;p&gt;Dubbo的SPI扩展有两个规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;和JDK内置的SPI一样，需要在resources目录下创建任一目录结构：META-INF/dubbo、META-INF/dubbp/internal、META-INF/services，在对应的目录下创建以接口全路径名命名的文件，Dubbo会去三个目录下加载相应扩展点。&lt;/li&gt;
&lt;li&gt;文件内容和JDK内置的SPI不一样，内容是key-value形式的数据，key是一个字符串，value是一个对应扩展点的实现，这样的方式可以按照需要加载指定的实现类。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在一个依赖了Dubbo框架的工程中，创建一个扩展点及一个实现。其中，扩展点需要声明@SPI注解。&lt;/li&gt;
&lt;li&gt;在resources/META-INF/dubbo目录下创建以SPI接口命名的文件&lt;/li&gt;
&lt;li&gt;使用ExtensionLoader.getExtensionLoader.getExtension(key)获得指定名称的扩展点实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-dubbo中的spi原理&#34;&gt;5 Dubbo中的SPI原理&lt;/h3&gt;
&lt;p&gt;（1）ExtensionLoader.getExtensionLoader：这个方法用于返回一个ExtensionLoader实例，逻辑如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先从缓存中获取与扩展类对应的ExtensionLoader&lt;/li&gt;
&lt;li&gt;缓存未命中，则创建一个新的实例，保存到eEXTENXION_LOADERS集合中缓存起来。&lt;/li&gt;
&lt;li&gt;在ExtensionLoader构造方法中，初始化一个objectFactory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225020109248.png&#34; alt=&#34;image-20210225020109248&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225020130724.png&#34; alt=&#34;image-20210225020130724&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;（2）getExtension：这个方法用于根据指定名称获取对应的扩展点并返回。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name用于参数的判断，如果name=&amp;ldquo;true&amp;rdquo;，则返回一个默认的扩展实现。&lt;/li&gt;
&lt;li&gt;创建一个Holder对象，用户缓存该扩展点的实例。&lt;/li&gt;
&lt;li&gt;如果缓存中不存在，则通过createExtension(name)创建一个扩展点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225020354825.png&#34; alt=&#34;image-20210225020354825&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;（3）createExtension()：去指定的路径下查找name对应的扩展点的实现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过getExtensionClasses().get(name)获取一个扩展类&lt;/li&gt;
&lt;li&gt;通过反射实例化之后缓存到EXTENSION_INSTANCES集合中。&lt;/li&gt;
&lt;li&gt;injectExtension实例依赖注入&lt;/li&gt;
&lt;li&gt;把扩展类对象通过Wrapper进行包装。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225020624033.png&#34; alt=&#34;image-20210225020624033&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;（4）getExtensionClasses()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从缓存中换取已经被加载的扩展类&lt;/li&gt;
&lt;li&gt;如果缓存未命中，则调用loadExtensionClasses加载扩展类。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225020823393.png&#34; alt=&#34;image-20210225020823393&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;（5）loadExtensionClasses()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过cacheDefaultExtensionName方法获取当且扩展接口的默认扩展对象，并且缓存。&lt;/li&gt;
&lt;li&gt;调用loadDirectory方法加载指定文件目录下的配置文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（6）cacheDefaultExtensionName()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获得指定扩展接口的@SPI注解&lt;/li&gt;
&lt;li&gt;得到@SPI注解中的名字，保存到cacheDefaultName属性中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-自适应扩展点&#34;&gt;6 自适应扩展点&lt;/h3&gt;
&lt;p&gt;Adaptive Extension：能够根据上下文动态匹配一个扩展类，使用方式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;ExtensionLoader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getExtensionLoader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAdaptiveExtension&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;自适应扩展点通过@Adaptive注解声明，有两种使用方式&lt;/p&gt;
&lt;p&gt;（1）@Adaptive注解定义在类上面，表示当前类为自适应扩展点。&lt;/p&gt;
&lt;p&gt;（2）@Adaptive注解定义上方法层面，会通过动态代理的方式生成一个动态字节码，进行自适应匹配。&lt;/p&gt;
&lt;h3 id=&#34;7-protocol自适应扩展点源码&#34;&gt;7 Protocol自适应扩展点源码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;ExtensionLoader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getExtensionLoader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Protocol&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAdaptiveExtension&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先是getExtensionLoader：&lt;/p&gt;
&lt;p&gt;（1）从缓存中获取自适应扩展点实例。&lt;/p&gt;
&lt;p&gt;（2）如果缓存未命中，则通过createAdaptiveExtension创建自适应扩展点。&lt;/p&gt;
&lt;p&gt;然后是createAdaptiveExtension：&lt;/p&gt;
&lt;p&gt;（1）getAdaptiveExtensionClass：获取一个自适应扩展类的实例。&lt;/p&gt;
&lt;p&gt;（2）injectExtension完成依赖注入。&lt;/p&gt;
&lt;p&gt;接着是getAdaptiveExtensionClass：&lt;/p&gt;
&lt;p&gt;（1）通过&lt;strong&gt;getExtensionClasses&lt;/strong&gt;方法加载当前传入类型的所有扩展点，缓存在一个集合中。&lt;/p&gt;
&lt;p&gt;（2）如果cachedAdaptiveClass为空，则调用createAdaptiveExtensionClass进行创建。&lt;/p&gt;
&lt;h3 id=&#34;8-ioc&#34;&gt;8 IOC&lt;/h3&gt;
&lt;p&gt;上文中的injectExtension就是依赖注入的实现，整体逻辑为：&lt;/p&gt;
&lt;p&gt;（1）遍历被加载的扩展类中的所有set方法。&lt;/p&gt;
&lt;p&gt;（2）得到set方法中的参数类型，如果参数类型是对象类型，则获得这个set方法中的属性名称。&lt;/p&gt;
&lt;p&gt;（3）使用自适应扩展点加载该属性名称对应的扩展类。&lt;/p&gt;
&lt;p&gt;（4）调用set完成赋值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225192001158.png&#34; alt=&#34;image-20210225192001158&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225192017631.png&#34; alt=&#34;image-20210225192017631&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;简单来说，injectExtension方法的主要功能是，如果当前加载的扩展类中存在一个成员对象，并且为它提供了set方法，那么就会通过自适应扩展点进行加载并赋值。&lt;/p&gt;
&lt;h3 id=&#34;9-aop&#34;&gt;9 AOP&lt;/h3&gt;
&lt;p&gt;面向切面编程，意图是把业务逻辑和功能逻辑分离，然后在运行期间或者类加载期间进行织入，可以降低代码的复杂性，以及提高重用性。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;injectExtension&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WrapperClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getConstructor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;newInstance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段代码分别用到了依赖注入和AOP，AOP体现在基于Wrapper装饰器类实现对原有的扩展类instance进行包装。&lt;/p&gt;
&lt;h3 id=&#34;10-dubbo集成spring机制略&#34;&gt;10 Dubbo集成Spring机制（略）&lt;/h3&gt;
&lt;p&gt;p89&lt;/p&gt;
&lt;h2 id=&#34;什么是nacos&#34;&gt;什么是Nacos？&lt;/h2&gt;
&lt;p&gt;Nacos致力于解决微服务中的统一配置、服务注册与发现等问题。它提供了一组简单易用的特性集，帮助开发者快速实现动态服务发现、服务配置、服务元数据以及流量管理。&lt;/p&gt;
&lt;h3 id=&#34;1-关键特性&#34;&gt;1 关键特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;服务发现和服务健康监测&lt;/p&gt;
&lt;p&gt;Nacos基于DNS和基于RPC的服务发现。服务提供者通过原生SDK、OpenAPI或一个独立的Agent TODO注册Service后，服务消费者可以使用DNS或HTTP&amp;amp;API查找和发现服务。&lt;/p&gt;
&lt;p&gt;Nacos提供对服务的实时的健康检查，阻止向不健康的主机或服务实例发送请求。Nacos支持传输层（PING或TCP）和应用层（如HTTP、MYSQL、用户自定义）的健康检查。对于复杂的云环境和网络拓扑环境（如VPC、边缘网络等）服务的健康检查，Nacos提供了&lt;strong&gt;agent上报&lt;/strong&gt;和&lt;strong&gt;服务端主动监测&lt;/strong&gt;两种健康检查模式。Nacos还提供了统一的健康检查仪表盘。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态配置服务&lt;/p&gt;
&lt;p&gt;业务服务一般都会维护一个本地配置文件，然后把一些常量配置到这个文件中。这种方式在某些场景会存在某些问题，比如配置变更时需要重新部署应用。而动态配置服务可以以中心化、外部化和动态化的方式管理所有环境的应用配置和服务配置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态DNS服务&lt;/p&gt;
&lt;p&gt;支持权重路由，让开发者更容易实现中间层负载均衡、更灵活的路由策略、流量控制，以及数据中心内网的简单DNS服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务及其元数据管理&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-nacos集群&#34;&gt;2 Nacos集群&lt;/h3&gt;
&lt;p&gt;包含一个Leader节点和多个Follower节点。&lt;/p&gt;
&lt;p&gt;数据一致性算法采用的Raft（Etcd、Redis哨兵选举也是这个算法）&lt;/p&gt;
&lt;p&gt;3个或3个以上Nacos节点才能构成集群。&lt;/p&gt;
&lt;h2 id=&#34;搭建nacos注册中心的注意点&#34;&gt;搭建Nacos注册中心的注意点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;dubbo.scan.base-packages功能等同于@DubboComponentScan&lt;/li&gt;
&lt;li&gt;dubbo.registry.address：Dubbo服务注册中心的配置地址，它的值spring-cloud://url表示挂载到Spring Cloud注册中心，不配置的话会提示没有配置注册中心的错误。&lt;/li&gt;
&lt;li&gt;spring.cloud.nacos.discovery.server-addr：Nacos服务注册中心的地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nacos实现原理&#34;&gt;Nacos实现原理&lt;/h2&gt;
&lt;h3 id=&#34;1-模块组成&#34;&gt;1 模块组成&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Provider App&lt;/li&gt;
&lt;li&gt;Consumer App&lt;/li&gt;
&lt;li&gt;Name Server&lt;/li&gt;
&lt;li&gt;Nacos Server&lt;/li&gt;
&lt;li&gt;Nacos Console&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整体来说，服务提供者通过Virtual IP访问Nacos Server高可用集群，基于Open API完成服务的注册和服务的查询。Nacos Server本身可以支持主备模式，所以底层会采用数据一致性算法来完成主从节点的整体同步。服务消费者也是如此。&lt;/p&gt;
&lt;h3 id=&#34;2-注册中心的原理&#34;&gt;2 注册中心的原理&lt;/h3&gt;
&lt;p&gt;服务注册的功能主要体现在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务实例在启动时注册到服务注册表，并在关闭时注销。（Open API）&lt;/li&gt;
&lt;li&gt;服务消费者查询服务注册表，获得可用实例。&lt;/li&gt;
&lt;li&gt;服务注册中心需要调用服务实例的健康检查API来验证它是否能够处理请求。（心跳机制）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-nacos源码略&#34;&gt;3 Nacos源码（略）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;服务注册&lt;/li&gt;
&lt;li&gt;服务地址的获取&lt;/li&gt;
&lt;li&gt;服务地址变化的感知&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nacos实现统一配置管理&#34;&gt;Nacos实现统一配置管理&lt;/h2&gt;
&lt;p&gt;各个应用自己独立维护本地配置方式的不足：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225222922897.png&#34; alt=&#34;image-20210225222922897&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-nacos集成spring-boot&#34;&gt;1 Nacos集成Spring Boot&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在application.properties中配置nacos.config.server-addr&lt;/li&gt;
&lt;li&gt;创建NacosConfigController，用于从Nacos Server动态读取配置。&lt;/li&gt;
&lt;li&gt;@NacosPropertiesSource：用于加载dataId为example的配置源，autoRefreshed表示开启自动更新。&lt;/li&gt;
&lt;li&gt;@NacosValue：设置属性的值，其中info表示key，而Local Hello World表示默认值。也就是说如果key不存在，则使用默认值。这是一种高可用的策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225223903497.png&#34; alt=&#34;image-20210225223903497&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-nacos集成spring-cloud&#34;&gt;2 Nacos集成Spring Cloud&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;spring.cloud.nacos.config.prefix表示Nacos配置中心上的DataID的前缀。&lt;/li&gt;
&lt;li&gt;spring.cloud.nacos.config.server-addr表示Nacos配置中心的地址。&lt;/li&gt;
&lt;li&gt;在Nacos Console创建配置&lt;/li&gt;
&lt;li&gt;在启动类中，读取配置中心的数据。&lt;/li&gt;
&lt;li&gt;注意坑：配置文件必须用bootstrap.yml这个名称，因为bootstrap加载顺序优于application，因为需要在bootstrap配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-动态更新配置&#34;&gt;3 动态更新配置&lt;/h3&gt;
&lt;p&gt;通过一个while循环不断读取info属性，当info属性发生变化时，控制台可以监听到。&lt;/p&gt;
&lt;h3 id=&#34;4-基于dataid配置yaml的文件扩展名&#34;&gt;4 基于DataID配置yaml的文件扩展名&lt;/h3&gt;
&lt;p&gt;DataID默认规则是${prefix}-${spring.profile.active}.${file-extension}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在默认情况下，会去Nacos服务器上加载DataID以${spring.application.name}.${file-extension:properties}为前缀的基础配置。例如：在不通过spring.cloud.nacos.config.prefix指定DataID时，会默认读取DataID为nacos-config-demo.properties的配置信息。&lt;/li&gt;
&lt;li&gt;如果明确指定了spring.cloud.nacos.config.prefix，则会加载DataID为指定值的配置。&lt;/li&gt;
&lt;li&gt;spring.profile.active表示多环境支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在实际应用中，&lt;strong&gt;如果使用YAML格式配置&lt;/strong&gt;，则需要声明spring.cloud.nacos.config.file-extension=yaml&lt;/p&gt;
&lt;h3 id=&#34;5-不同环境的配置切换&#34;&gt;5 不同环境的配置切换&lt;/h3&gt;
&lt;p&gt;Spring Boot多环境支持配置步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在resource目录下根据不同环境创建不同的配置：
&lt;ul&gt;
&lt;li&gt;application-dev.properties&lt;/li&gt;
&lt;li&gt;application-test.properties&lt;/li&gt;
&lt;li&gt;application-prod.properties&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;定义一个application.properties默认配置，在该配置中通过spring.profile.active=${env}来指定使用哪个环境的配置，如果${env}的值为prod，表示使用prod环境。&lt;/li&gt;
&lt;li&gt;也可以通过设置 VM Options=-Dspring.profiles.active=prod来指定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nacos Config配置步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在bootstrap.properties中声明spring.profiles.active=prod&lt;/li&gt;
&lt;li&gt;在Nacos控制台新增DataID为nacos-config-demo-prod.properties的配置项。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-自定义namespace和group&#34;&gt;6 自定义Namespace和Group&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Namespace：解决多环境及多租户数据的隔离问题。
&lt;ul&gt;
&lt;li&gt;使用：在bootstrap.properties里指定spring.cloud.nacos.config.namespace&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Group：用于分组管理Data ID
&lt;ul&gt;
&lt;li&gt;使用：在bootstrap.properties里指定spring.cloud.nacos.config.group&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nacos-config实现原理略&#34;&gt;Nacos Config实现原理（略）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;获取配置&lt;/li&gt;
&lt;li&gt;监听配置&lt;/li&gt;
&lt;li&gt;发布配置&lt;/li&gt;
&lt;li&gt;删除配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分为两类：配置的CRUD和配置的动态监听&lt;/p&gt;
&lt;h2 id=&#34;spring-cloud加载配置的原理略&#34;&gt;Spring Cloud加载配置的原理（略）&lt;/h2&gt;
&lt;h2 id=&#34;nacos源码略&#34;&gt;Nacos源码（略）&lt;/h2&gt;
&lt;h2 id=&#34;sentinel限流及熔断&#34;&gt;Sentinel限流及熔断&lt;/h2&gt;
&lt;h3 id=&#34;1-服务限流的作用及实现&#34;&gt;1 服务限流的作用及实现&lt;/h3&gt;
&lt;p&gt;主要作用：损失一部分用户的可用性，为大部分用户提供稳定可靠的服务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;计算器算法：在制定周期内累加访问次数，当访问次数达到阈值时，触发限流策略。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225232943900.png&#34; alt=&#34;image-20210225232943900&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;滑动窗口算法：源于TCP拥塞控制，原理是在固定窗口中分割出&lt;strong&gt;多个小时间窗口&lt;/strong&gt;，分别在每个小时间窗口中记录访问次数，然后根据时间将窗口往前滑动并删除过期的小时间窗口。最终只需要统计滑动窗口范围内所有小时间窗口总的计数即可。（Sentinel的原理）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;令牌桶算法：每一个请求，都需要从令牌桶中获取一个令牌，如果没有获得令牌，则触发限流策略。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225233303914.png&#34; alt=&#34;image-20210225233303914&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;特性：短时间内新增的流量系统能够正常处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;漏桶限流算法：用于控制数据注入网络的速度，平滑网络上的突发流量。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225233550970.png&#34; alt=&#34;image-20210225233550970&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-服务熔断和降级&#34;&gt;2 服务熔断和降级&lt;/h3&gt;
&lt;p&gt;在微服务架构中，由于服务拆分粒度较细，会出现请求链路较长的情况，用户发起一个请求操作，需要调用多个微服务才能完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;雪崩效应&lt;/strong&gt;：某个服务因为网络延迟或者请求超时等原因不可用时，就会导致当前请求阻塞，一旦某个链路上被依赖的服务不可用，很可能出现请求堆积而产生雪崩。&lt;/p&gt;
&lt;p&gt;所以，服务熔断就是用来解决这个问题的方案，它指的是当某个服务提供者无法正常为服务调用者提供服务时，为了防止整个系统出现雪崩效应，暂时将出现故障的接口隔离出来，断绝与外部接口的联系，当触发熔断后，后续一段时间内该服务调用者的请求都会&lt;strong&gt;直接失败&lt;/strong&gt;，直至目标服务恢复正常。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225234104602.png&#34; alt=&#34;image-20210225234104602&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-sentinel的特性&#34;&gt;3 Sentinel的特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;丰富的应用场景：秒杀、消息削峰填谷、集群流量控制等。&lt;/li&gt;
&lt;li&gt;实时监控&lt;/li&gt;
&lt;li&gt;开源生态支持&lt;/li&gt;
&lt;li&gt;SPI扩展点支持&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-sentinel的组成&#34;&gt;4 Sentinel的组成：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;核心库（Java客户端）：不依赖任何框架与库，能够运行于所有Java运行时环境。&lt;/li&gt;
&lt;li&gt;控制台（Dashboard）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-sentinel基本应用&#34;&gt;5 Sentinel基本应用：&lt;/h3&gt;
&lt;p&gt;步骤如下：&lt;/p&gt;
&lt;p&gt;（1）定义资源：限流保护的最基本元素，比如一个方法。&lt;/p&gt;
&lt;p&gt;（2）定义限流规则&lt;/p&gt;
&lt;p&gt;（3）检验规则是否生效&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;限流规则&lt;/strong&gt;：通过initFlowRules方法设置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grade：限流阈值类型，有QPS模式和并发线程数模式。&lt;/li&gt;
&lt;li&gt;count：限流阈值&lt;/li&gt;
&lt;li&gt;resource：设置需要保护的资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-sentinel资源保护规则&#34;&gt;6 Sentinel资源保护规则&lt;/h3&gt;
&lt;p&gt;Sentinel支持多种保护规则：流量控制规则、熔断降级规则、系统保护规则、来源访问控制规则、热点参数规则。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;限流规则：先通过FlowRules来定义限流规则，然后通过FlowRuleManager.loadRules来加载规则列表。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1-qps流量控制行为&#34;&gt;1 QPS流量控制行为&lt;/h4&gt;
&lt;p&gt;通过controlBehavior设置，包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接拒接&lt;/li&gt;
&lt;li&gt;Warm UP，冷启动&lt;/li&gt;
&lt;li&gt;匀速排队&lt;/li&gt;
&lt;li&gt;冷启动 + 匀速排队&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7-sentinel实现服务熔断&#34;&gt;7 Sentinel实现服务熔断&lt;/h3&gt;
&lt;p&gt;通过DegradeRule实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grade：熔断策略，支持秒级RT、秒级异常比例、分钟异常数。默认是秒级RT。&lt;/li&gt;
&lt;li&gt;timeWindow：熔断降级的时间窗口，单位为s。也就是出发熔断降级之后多长时间内自动熔断。&lt;/li&gt;
&lt;li&gt;rtSlowRequestAmount：在RT模式下，1s内持续多少个请求的平均RT超出阈值后出发熔断，默认值是5&lt;/li&gt;
&lt;li&gt;minRequestAmout：触发的异常熔断最小请求数，请求数小于该值时即使异常比例超出阈值也不会触发熔断，默认值是5.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三种熔断策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平均响应时间RT：如果1s内持续进来5个请求，对应的平均响应时间都超过了阈值(count，单位为ms)，那么在接下来的时间窗口内，对这个方法的调用都会自动熔断，抛出DegradeException&lt;/li&gt;
&lt;li&gt;异常比例&lt;/li&gt;
&lt;li&gt;最近一分钟异常数：如果timeWindow小于60s，则结束熔断状态后仍然可能再进入熔断状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sentinel集成spring-cloud&#34;&gt;Sentinel集成Spring Cloud&lt;/h2&gt;
&lt;p&gt;步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建项目，集成Spring Cloud依赖。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加Sentinel依赖。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建一个REST接口，并且通过@SentinelResource配置限流保护资源。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210226000233876.png&#34; alt=&#34;image-20210226000233876&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在上述代码中，配置限流资源有几种情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sentinel starter在默认情况下会为所有的HTTP服务提供限流埋点，所以如果只想对HTTP服务进行限流，只需添加依赖即可。&lt;/li&gt;
&lt;li&gt;如果想要对特定的方法进行限流或降级，则需要通过@SentinelResource注解来定义资源。&lt;/li&gt;
&lt;li&gt;可以通过SphU.entry()方法来配置资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;手动配置流控规则，可以借助Sentinel的InitFunc SPI扩展接口来实现，只需要实现自己的InitFunc接口，并在init方法中编写规则加载的逻辑即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基于sentinel-dashboard来实现流控配置&#34;&gt;基于Sentinel Dashboard来实现流控配置&lt;/h2&gt;
&lt;p&gt;步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;启动Sentinel Dashboard&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在application.yml中增加以下配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210226000900895.png&#34; alt=&#34;image-20210226000900895&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供一个REST接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进入Sentinel Dashboard中配置流控规则。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问簇点链路，找到资源名称。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单机流控按钮设置流控规则&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意sentinel的坑：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210226015008780.png&#34; alt=&#34;image-20210226015008780&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;sentinel自定义url限流异常&#34;&gt;Sentinel自定义URL限流异常&lt;/h2&gt;
&lt;p&gt;默认情况下，URL触发限流后会返回Blocked by Sentinel字符串&lt;/p&gt;
&lt;p&gt;在实际应用中，大都采用JSON格式，所以如果希望修改触发限流之后的返回结果形式，则可以通过自定义限流异常来处理，实现&lt;strong&gt;UrlBlockHandler&lt;/strong&gt;并且重写blocked方法。&lt;/p&gt;
&lt;p&gt;还有一种场景，当触发限流后，希望跳转到一个降级页面，可以通过下面这个配置来实现。&lt;/p&gt;
&lt;p&gt;spring.cloud.sentinel.servlet.block-page={url}&lt;/p&gt;
&lt;h2 id=&#34;sentinel对url资源清洗&#34;&gt;Sentinel对URL资源清洗&lt;/h2&gt;
&lt;p&gt;Sentinel中HTTP服务的限流默认由Sentinel-Web-Servlet包中的CommonFilter来实现，这个Filter会把每个不同的URL都作为不同的资源来处理。&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210226194317550.png&#34; alt=&#34;image-20210226194317550&#34;  /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;限流统计不准确，实际需求是控制clean方法总的QPS，结果统计的是每个URL的QPS&lt;/li&gt;
&lt;li&gt;导致Sentinel中资源数量过多，默认资源数量阈值为6000，对于多出的资源规则将不会生效。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;针对这个问题可以通过&lt;strong&gt;URLCleaner&lt;/strong&gt;接口来实现资源清洗，也就是对于/clean/{id}这个URL，我们可以统一归集到/clean/*资源下，具体代码如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210226194545852.png&#34; alt=&#34;image-20210226194545852&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;sentinel集成nacos实现动态流控规则&#34;&gt;Sentinel集成Nacos实现动态流控规则&lt;/h2&gt;
&lt;p&gt;Sentinel的理念是只需要开发者关注资源的定义，默认会对资源进行流控。当然我们还需要自定义流控规则，前面有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过FlowRuleManager.loadRules(List rules)手动加载流控规则&lt;/li&gt;
&lt;li&gt;在Sentinel Dashboard上针对资源动态创建流控规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;针对第一种方式，如果接入Sentinel Dashboard，那么同样支持动态修改流控规则。但是，这里会存在一个问题，基于Sentinel Dashboard所配置的流控规则，都是保存在&lt;strong&gt;内存&lt;/strong&gt;中的，一旦应用重启，这些规则都会被清除。为了解决这个问题，Sentinel提供了动态数据源支持。&lt;/p&gt;
&lt;p&gt;目前，Sentinel支持Consul、Zookeeper、Redis、Nacos、Apollo、etcd等数据源的扩展，我们使用Nacos的方式来扩展。&lt;/p&gt;
&lt;p&gt;步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;添加Nacos数据源依赖包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建一个REST接口用于测试。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在application.yml中添加数据源配置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210226195049493.png&#34; alt=&#34;image-20210226195049493&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;配置说明：&lt;/p&gt;
&lt;p&gt;rule-type：flow、degrade、param-flow、gw-flow等&lt;/p&gt;
&lt;p&gt;data-type：Spring Cloud Alibaba提供了JSON和XML两种格式。如果需要自定义，则可以将值配置为custom，并配置converter-class指向converter类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登录Nacos控制台，创建流控配置规则，配置信息如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210226195526683.png&#34; alt=&#34;image-20210226195526683&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后，登录Sentinel Dashboard，找到执行项目名称菜单下的“流控规则”，就可以看到在Nacos上所配置的流控规则已经被加载了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当在Nacos控制台修改流控规则后，可以同步在Sentinel Dashboard上看到流控规则的变化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意：在Sentinel Dashboard上修改无法同步到Nacos上。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;强烈建议&lt;/strong&gt;：不要在Nacos上修改流控规则，因为这种修改的危险系数很高。这就意味着流控规则的管理应该集中在Sentinel Dashboard上，所以我们需要实现Sentinel Dashboard来动态维护规则并同步到Nacos上，目前官方还没有提供支持，但可以自己实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这里有一个坑：出现了&lt;strong&gt;空指针异常&lt;/strong&gt;org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;lsquo;ds1-sentinel-nacos-datasource&amp;rsquo;: FactoryBean threw exception on object creation; nested exception is java.lang.NullPointerException，出现原因是Spring-Cloud-Alibaba与Sentinel的&lt;strong&gt;版本对应不上&lt;/strong&gt;，解决办法是把Spring Cloud Alibaba的版本升到2.2.5.RELEASE即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sentinel集成nacos实现规则同步&#34;&gt;Sentinel集成Nacos实现规则同步&lt;/h2&gt;
&lt;p&gt;Sentinel Dashboard的“流控规则”下的所有操作，都会调用Sentinel源码中的FlowControllerV1类，这个类包含流控规则本地化的CRUD&lt;/p&gt;
&lt;p&gt;另外，在com.alibaba.csp.sentinel.dashboard.controller.v2包下存在一个FlowControllerV2类，这个类同样提供流控规则的CRUD，和V1版本不同的是，它可以实现指定数据源的规则拉取和同步。&lt;/p&gt;
&lt;p&gt;FlowControllerV2依赖以下两个非常重要的类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DynamicRuleProvider：动态规则的拉取，从指定数据源中获取流控规则后在Sentinel Dashboard中展示。&lt;/li&gt;
&lt;li&gt;DynamicRulePublisher：动态规则的发布，将在Sentinel Dashboard中修改的规则同步到指定数据源中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里我们扩展这两个类，然后集成Nacos来实现Sentinel Dashboard规则的同步。&lt;/p&gt;
&lt;h3 id=&#34;1-sentinel-dashboard源码修改&#34;&gt;1 Sentinel Dashboard源码修改：&lt;/h3&gt;
&lt;p&gt;具体步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;打开sentinel-dashboard工程，在pom.xml中把sentinel-datasource-nacos依赖的scope注释掉。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210226220250575.png&#34; alt=&#34;image-20210226220250575&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改resouces/app/scripts/directives/sidebar/sidebar.html文件下的代码，将dashboard.flowV1改成dashboard.flow&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210226220240096.png&#34; alt=&#34;image-20210226220240096&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;修改之后，会调用FlowControllerV2中的接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在com.alibaba.csp.sentinel.dashboard.rule包中创建一个nacos包，并创建一个类用来加载外部化配置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210226220601939.png&#34; alt=&#34;image-20210226220601939&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建一个Nacos配置类NacosConfiguration&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注入Converter转换器，将FlowRuleEntity转化为FlowRule，以及反向转化。&lt;/li&gt;
&lt;li&gt;注入Nacos配置服务ConfigService&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建一个常量类NacosConstants，分别表示默认的GROUP_ID和DATA_ID的后缀。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现动态从Nacos配置中心获取流控规则。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建一个流控规则发布类，在Sentinel Dashboard上修改完配置后，需要调用该发布方法将数据持久化到Nacos中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改FlowControllerV2类，将上面配置的两个类注入进来，表示规则的拉取和规则的发布统一用我们前面自定义的两个实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在application.properties文件中添加nacos服务端的配置信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将代码打包成一个fat jar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;详见https://blog.csdn.net/weixin_42073629/article/details/107117433 或者test包中的nacos代码&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-sentinel-dashboard规则同步&#34;&gt;2 Sentinel Dashboard规则同步&lt;/h3&gt;
&lt;p&gt;应用程序需要修改的地方比较少，只需注意配置文件中data-id的命名要以-sentinel-flow结尾即可。&lt;/p&gt;
&lt;h2 id=&#34;sentinel集成dubbo实现限流&#34;&gt;Sentinel集成Dubbo实现限流&lt;/h2&gt;
&lt;p&gt;Sentinel提供了与Dubbo整合的模块Sentinel Apache Dubbo Adapter，可以针对服务提供者和服务消费者进行流控，在使用的时候，只需要添加以下依赖。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210227193606798.png&#34; alt=&#34;image-20210227193606798&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;添加后该依赖后，Dubbo服务中的接口和方法（包括服务端和消费端）就会成为Sentinel中的资源，只需针对指定资源配置流控规则就可以实现Sentinel流控功能。&lt;/p&gt;
&lt;p&gt;Sentinel Apache Dubbo Adapter实现限流的核心原理是基于Dubbo的SPI机制实现Filter扩展，Dubbo的Filter机制是专门为服务提供者和服务消费者调用过程进行拦截设计的，每次执行远程方法，该拦截都会被执行。&lt;/p&gt;
&lt;p&gt;同时，Sentinel Apache Dubbo Adapter还可以自定义开启或者关闭某个Filter的功能，下面表示关闭消费端的过滤器。&lt;/p&gt;
&lt;h3 id=&#34;image-20210227193903284httpscuterwriteoss-cn-beijingaliyuncscomimgimage-20210227193903284png&#34;&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210227193903284.png&#34; alt=&#34;image-20210227193903284&#34;  /&gt;&lt;/h3&gt;
&lt;h3 id=&#34;1-dubbo服务接入sentinel-dashboard&#34;&gt;1 Dubbo服务接入Sentinel Dashboard&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;引入sentinel-transport-simple-http依赖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加启动参数&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210227194238456.png&#34; alt=&#34;image-20210227194238456&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登录Sentinel Dashboard之后，进入“簇点链路”，就可以看到资源信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要注意的是，限流可以通过服务接口或服务方法设置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务接口：resourceName为接口的全限定名（包+接口名）&lt;/li&gt;
&lt;li&gt;服务方法：resourceName为接口全限定名：方法名（包+接口名:方法名）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-dubbo服务限流规则&#34;&gt;2 Dubbo服务限流规则&lt;/h3&gt;
&lt;p&gt;两种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sentinel Dashboard&lt;/li&gt;
&lt;li&gt;FlowRuleManager.loadRules(List rules)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sentinel Apache Dubbo Adapter组件中没有实现规则持久化，因此有以下步骤来支持：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在dubbo服务中添加sentinel-datasource-nacos依赖&lt;/li&gt;
&lt;li&gt;通过Sentinel提供的InitFunc扩展点，实现Nacos数据源的配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210227204336472.png&#34; alt=&#34;image-20210227204336472&#34;  /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问Sentinel Dashboard，在针对某个资源创建流控规则时，这个规则会同步保存到Nacos的配置中心，而当Nacos配置中心发生变化时，会触发事件机制通知Dubbo应用重新加载流控规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sentinel热点限流&#34;&gt;Sentinel热点限流&lt;/h2&gt;
&lt;p&gt;热点数据表示经常访问的数据，在有限场景中我们希望针对这些访问频次非常高的数据进行限流，比如针对一段时间内频繁访问的用户ID地址进行限流，或者针对频繁访问的某个用户ID进行限流。&lt;/p&gt;
&lt;p&gt;Sentinel提供了热点参数限流的规则，它是一种特殊的限流，在普通限流的基础上对同一个受保护的资源区根据请求中的参数分别处理，该策略只对包含热点参数的资源调用生效。热点限流在&lt;strong&gt;以下场景&lt;/strong&gt;使用较多：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务网关层：例如防止网络爬虫和恶意攻击，一种常用方法就是限制爬虫的IP地址。&lt;/li&gt;
&lt;li&gt;写数据的服务：例如业务系统提供写数据的服务，数据会写入数据库之类的存储系统。存储系统的底层会加锁写磁盘上的文件，部分存储系统会将某一类数据写入同一个文件中。如果底层写同一文件，会出现抢占锁的情况，导致出现大量超时和失败。出现这种情况时一般有两种解决方法：修改存储设计、对热点参数限流。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sentinel通过&lt;strong&gt;LRU策略结合滑动窗口机制&lt;/strong&gt;来实现热点参数的统计，其中LRU策略可以统计单位时间内最常访问的热点数据，滑动窗口机制可以协助统计每个参数的QPS。&lt;/p&gt;
&lt;h3 id=&#34;1-热点参数限流的使用&#34;&gt;1 热点参数限流的使用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;引用热点参数限流依赖包sentinel-parameter-flow-control&lt;/li&gt;
&lt;li&gt;接下来创建一个REST接口，并定义限流埋点，此处针对参数ID配置热点限流规则。&lt;/li&gt;
&lt;li&gt;针对不同的热点参数，需要通过SphU.entry(resourceName,EntryType.IN,1,id)方法设置，其最后一个参数是一个数组，有多个热点参数就按照次序依次传入，该配置表示后续会针对该参数进行热点限流。&lt;/li&gt;
&lt;li&gt;通过ParamFlowRuleManager.loadRules加载热点参数规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-sentinelresource&#34;&gt;2 @SentinelResource&lt;/h3&gt;
&lt;p&gt;如果是通过@SentinelResource注解来定义资源，当注解所配置得方法上有参数时，Sentinel会把这些参数传入SphU.entry中&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210227231844217.png&#34; alt=&#34;image-20210227231844217&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-热点参数规则说明&#34;&gt;3 热点参数规则说明&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;durationInSec：统计窗口时间长度，单位为s&lt;/li&gt;
&lt;li&gt;maxQueueingTimeMS：最长排队等待时长，只有当流控为controlBehavior设置为匀速排队模式时生效。&lt;/li&gt;
&lt;li&gt;paramIdx：热点参数的索引，属于必填项，对应的是SphU.entry中的参数索引位置。&lt;/li&gt;
&lt;li&gt;paramFlowItemList：针对指定参数值单独设置限流阈值，不受count阈值的限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sentinel的工作原理略&#34;&gt;Sentinel的工作原理（略）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;工作流程：由各个Slot插槽组成（责任链模式）&lt;/li&gt;
&lt;li&gt;p229&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring-cloud-sentinel工作原理略&#34;&gt;Spring Cloud Sentinel工作原理（略）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;starter自动装配&lt;/li&gt;
&lt;li&gt;p232&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sentinel核心源码分析略&#34;&gt;Sentinel核心源码分析（略）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sentinel-adapter&lt;/li&gt;
&lt;li&gt;sentinel-core&lt;/li&gt;
&lt;li&gt;sentinel-dashboard&lt;/li&gt;
&lt;li&gt;sentinel-demo&lt;/li&gt;
&lt;li&gt;sentinel-extension&lt;/li&gt;
&lt;li&gt;sentinel-transport&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-限流的源码实现&#34;&gt;1 限流的源码实现&lt;/h3&gt;
&lt;h3 id=&#34;2-实时指标数据统计&#34;&gt;2 实时指标数据统计&lt;/h3&gt;
&lt;h3 id=&#34;3-服务降级的实现原理&#34;&gt;3 服务降级的实现原理&lt;/h3&gt;
&lt;h2 id=&#34;什么是分布式事务&#34;&gt;什么是分布式事务？&lt;/h2&gt;
&lt;p&gt;事务：作为单个逻辑工作单元执行的多个数据库操作，要么同时成功，要么同时失败，必须满足ACID特性。（单库多表）&lt;/p&gt;
&lt;p&gt;在微服务架构下，随着业务服务的拆分及数据库的拆分，举例说，订单和库存分别拆分成两个独立的数据库，当客户端发起一个下单操作，需要在订单服务对应的数据库创建订单，同时基于RPC通信调用库存服务完成商品库存的扣减。&lt;/p&gt;
&lt;p&gt;这样，原来的单库事务操作就变成了多个数据库的事务操作 =&amp;gt; 数据不一致问题。&lt;/p&gt;
&lt;h3 id=&#34;1-分布式事务问题的理论模型&#34;&gt;1 分布式事务问题的理论模型&lt;/h3&gt;
&lt;p&gt;核心原因：存储资源的分布性&lt;/p&gt;
&lt;p&gt;在实际应用中，应该尽可能从设计层面去避免分布式事务的问题。&lt;/p&gt;
&lt;h4 id=&#34;1-xopen分布式模型&#34;&gt;1 X/Open分布式模型&lt;/h4&gt;
&lt;p&gt;X/Open DTP是X/Open这个组织定义的一套分布式事务的标准。这个标准提出了&lt;strong&gt;两阶段提交&lt;/strong&gt;（2PC，2-phase-commit）来保证分布式事务的完整性。X/Open DTP包含以下三种角色。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AP：Application&lt;/li&gt;
&lt;li&gt;RM：Resource Manager&lt;/li&gt;
&lt;li&gt;TM：Transaction Manager&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果TM需要能够管理多个数据库的事务，则实现步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置TM，把多个RM注册到TM，相当于TM注册RM作为数据源。&lt;/li&gt;
&lt;li&gt;AP从TM管理的RM中获取连接，如果RM是数据库则获取JDBC连接。&lt;/li&gt;
&lt;li&gt;AP向TM发起一个全局事务，生成全局事务ID（XID），XID会通知各个RM。&lt;/li&gt;
&lt;li&gt;AP通过第二步获得的连接直接操作RM完成数据库操作。这时，AP在每次操作会把XID传递给RM。&lt;/li&gt;
&lt;li&gt;AP结束全局事务，TM会通知各个RM全局事务结束。&lt;/li&gt;
&lt;li&gt;根据各个RM的事务执行结果，执行提交或者回滚操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，TM和多个RM之间的事务控制，是基于XA协议来完成的。目前Oracle、MySQL、DB2都实现了XA接口，因此都能作为RM。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210227233821400.png&#34; alt=&#34;image-20210227233821400&#34;  /&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-两阶段提交协议&#34;&gt;2 两阶段提交协议&lt;/h4&gt;
&lt;p&gt;第一阶段：事务的准备阶段&lt;/p&gt;
&lt;p&gt;第二阶段：事务的提交或回滚阶段&lt;/p&gt;
&lt;p&gt;这两个阶段都是由事务管理器发起的，流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;准备阶段：TM通知RM准备分支事务，记录事务日志，并告知TM的准备结果。&lt;/li&gt;
&lt;li&gt;提交/回滚阶段：如果所有的RM在准备阶段都明确返回成功，TM向所有RM发起提交指令完成数据的变更；反之，则TM向所有RM发送回滚指令。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而，它并不是完美的，也有缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步阻塞：所有RM都是事务阻塞型的，对于任何一次指令都必须要有明确的响应才能进行下一步，否则会处于阻塞状态。&lt;/li&gt;
&lt;li&gt;过于保守：任何一个节点失败都会导致数据回滚。&lt;/li&gt;
&lt;li&gt;TM的单点故障：如果TM在第二阶段故障，则所有RM会一直处于锁定状态。&lt;/li&gt;
&lt;li&gt;“脑裂”导致数据不一致问题：在第二阶段中，TM向所有RM发送commit请求后，发生局部网络异常导致只有一部分RM接受到commit，剩余未收到请求的则没提交，导致数据出现不一致问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-三阶段提交协议&#34;&gt;3 三阶段提交协议&lt;/h4&gt;
&lt;p&gt;利用超时机制解决了同步阻塞的问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CanCommit（询问阶段）：TM向RM发送事务执行请求，询问是否可以完成指令，参与者只需回答是或者不是即可，不需要做真正的事务操作，这个阶段会有超时中止机制。&lt;/li&gt;
&lt;li&gt;PreCommit（准备阶段）：TM根据RM的反馈结果决定是否继续，如果在询问阶段所有RM都能执行操作，则TM向所有RM发送PreCommit请求，RM收到请求后写redo和undo日志，执行事务操作但是不提交事务，然后返回ACK响应等待TM的下一步通知。如果询问阶段任意参与者返回不能执行操作的结果，则TM发送事务中断请求。&lt;/li&gt;
&lt;li&gt;DoCommit（提交或回滚阶段）：根据上一步骤的执行结果，如果每个RM都返回成功，则TM发送事务提交指令，反之则中止。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三阶段提交协议与二阶段提交协议的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加了一个CanCommit阶段，可以尽早发现无法执行操作而中止后续的行为。&lt;/li&gt;
&lt;li&gt;在准备阶段之后，TM和RM都引入超时机制，一旦超时，TM和RM会继续提交事务，并且认为处于成功状态，因为这种情况下事务默认为成功的可能性比较大。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实际上，一旦超时，在三阶段提交协议下仍然可能出现数据不一致的问题，当然概率是比较小的。另外，最大的好处是基于超时机制来避免资源的永久锁定。&lt;/p&gt;
&lt;h4 id=&#34;4-cap定理和base理论&#34;&gt;4 CAP定理和BASE理论&lt;/h4&gt;
&lt;p&gt;XA协议：二阶段提交和三阶段提交，数据一致性强，但可用性低。&lt;/p&gt;
&lt;p&gt;CAP定理：布鲁尔定理，指在分布式系统中不可能同时满足一致性C、可用性A、分区容错性P，最多同时满足两个。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C：数据在多个副本中要保持强一致&lt;/li&gt;
&lt;li&gt;A：系统对外提供的服务必须一直处于可用状态。&lt;/li&gt;
&lt;li&gt;P：在分布式系统中遇到任何网络分区故障，系统仍然能够正常对外提供服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;在分布式系统中，要么满足CP，要么满足AP，不可能实现CAP或者CA，因为网络通信不是绝对可靠的。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AP：放弃强一致性，实现最终的一致。（很多互联网公司的主要选择）&lt;/li&gt;
&lt;li&gt;CP：放弃高可用性，实现强一致性。（2PC和3PC，存在问题：用户完成一个操作可能会等待较长的时间，用户体验差）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BASE理论：由于CAP中CA不可兼得衍生出来的一种新的思想。核心思想是：牺牲数据的强一致性来获得高可用性，有三个特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Basically Avaliable（基本可用）：分布式系统出现故障时，允许损失一部分功能的可用性，保证核心功能的可用。&lt;/li&gt;
&lt;li&gt;Soft State（软状态）：允许系统中的数据存在中间状态，这个状态不影响系统的可用性，也就是允许系统中不同节点的数据副本之间的同步存在延时。&lt;/li&gt;
&lt;li&gt;Eventually Consistent（最终一致性）：中间状态的数据在经过一段时间之后，会达到一个最终的数据一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-分布式事务问题的常见解决方案&#34;&gt;2 分布式事务问题的常见解决方案&lt;/h3&gt;
&lt;h4 id=&#34;1-tcc补偿性方案&#34;&gt;1 TCC补偿性方案&lt;/h4&gt;
&lt;p&gt;TCC（Try-Confirm-Cancel）是一种比较成熟的分布式数据一致性解决方案，它实际上是把一个完整的业务拆分为如下三个步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Try：这个阶段主要是对数据的校验或者资源的预留。&lt;/li&gt;
&lt;li&gt;Confirm：确定真正执行的任务，只操作Try阶段预留的资源。&lt;/li&gt;
&lt;li&gt;Cancel：取消执行，释放Try阶段预留的资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本质：二阶段提交的思想，第一阶段通过Try准备，第二阶段通过Confirm/Cancel&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210228000708843.png&#34; alt=&#34;image-20210228000708843&#34;  /&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-基于可靠性消息的最终一致性方案&#34;&gt;2 &lt;strong&gt;基于可靠性消息的最终一致性方案&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;基于可靠性消息的最终一致性方案是互联网公司比较常用的分布式数据一致性解决方案，它主要利用消息中间件（Kafka、RocketMQ或RabbitMQ）的可靠性机制来实现数据一致性的投递。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210228001428049.png&#34; alt=&#34;image-20210228001428049&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;总结：消费者没有向消息中间件服务器发送确认之前，这个消息会被重复投递，确保消息的可靠性消费。&lt;/p&gt;
&lt;h4 id=&#34;3-最大努力通知型&#34;&gt;3 最大努力通知型&lt;/h4&gt;
&lt;p&gt;与基于可靠性消息的最终一致性方案实现类似，是一种比较简单的柔性事务解决方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果没有返回一个消息确认时，则不断进行重试，直到收到一个消息确认或者达到最大重试次数。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-分布式事务框架seata&#34;&gt;3 分布式事务框架Seata&lt;/h3&gt;
&lt;p&gt;提供了AT、TCC、Saga和XA四种事务模式。&lt;/p&gt;
&lt;h4 id=&#34;1-at模式&#34;&gt;1 AT模式&lt;/h4&gt;
&lt;p&gt;Seata最主推的分布式事务解决方案，基于XA演进而来，分为TM、RM和TC，TC作为Seata的服务器独立部署。&lt;/p&gt;
&lt;h4 id=&#34;2-saga模式&#34;&gt;2 Saga模式&lt;/h4&gt;
&lt;p&gt;又称长事务解决方案，主要描述的是在没有2PC的情况下如何解决分布式事务问题。其核心思想是：把一个业务流程中的长事务拆分为多个本地短事务，业务流程中的每个参与者都提交真实提交给本地段事务，当其中一个参与者失败，则通过补偿机制补偿前面已经成功的参与者。&lt;/p&gt;
&lt;p&gt;两种补偿恢复方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;向后恢复：如果任一子事务失败，则撤销执行结果。&lt;/li&gt;
&lt;li&gt;向前恢复：不进行补偿，而是对失败的事务进行redo，这种方式比较适合于事务必须要执行成功的场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一阶段直接提交本地事务&lt;/li&gt;
&lt;li&gt;没有锁等待，性能较高&lt;/li&gt;
&lt;li&gt;在事件驱动的模式下，短事务可以异步执行。&lt;/li&gt;
&lt;li&gt;补偿机制的实现比较简单。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：不提供原子性和隔离性支持&lt;/p&gt;
&lt;p&gt;协调模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事件/编排式&lt;/li&gt;
&lt;li&gt;命令/协同式&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
