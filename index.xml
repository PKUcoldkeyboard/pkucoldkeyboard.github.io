<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>cuterwrite</title>
        <link>https://cuterwrite.top/</link>
        <description>Recent content on cuterwrite</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Wed, 07 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://cuterwrite.top/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Redis入门</title>
        <link>https://cuterwrite.top/p/redis-1/</link>
        <pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/redis-1/</guid>
        <description>&lt;h2 id=&#34;1命令返回值&#34;&gt;1、命令返回值&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;状态回复
&lt;ul&gt;
&lt;li&gt;OK：成功&lt;/li&gt;
&lt;li&gt;PONG：响应PING&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;错误回复：命令不存在或者命令格式有误
&lt;ul&gt;
&lt;li&gt;Error Unknown command&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;整数回复：
&lt;ul&gt;
&lt;li&gt;INCR命令：返回递增后的键值&lt;/li&gt;
&lt;li&gt;DBSIZE命令：返回键的数量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符串回复：
&lt;ul&gt;
&lt;li&gt;请求键的值或者请求一个其他类型键中的某个元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多行字符串回复：
&lt;ul&gt;
&lt;li&gt;请求非字符串类型键的元素列表&lt;/li&gt;
&lt;li&gt;Keys (Pattern)：返回数据库中符合指定规则的键名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2多数据库&#34;&gt;2、多数据库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一个Redis实例提供了多个用来存储数据的字典，客户端可以指定数据存储在哪个字典中。&lt;/li&gt;
&lt;li&gt;数据库默认从0开始递增命名，默认支持16个数据库（DB0，DB1，&amp;hellip;，DB15）&lt;/li&gt;
&lt;li&gt;不支持自定义数据库名字，也不支持单独设置访问密码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3命令大全&#34;&gt;3、命令大全&lt;/h2&gt;
&lt;h3 id=&#34;1通用命令&#34;&gt;1、通用命令&lt;/h3&gt;
&lt;h4 id=&#34;keys-pattern&#34;&gt;keys pattern&lt;/h4&gt;
&lt;p&gt;获得符合规则的键名列表，支持？、*、[]、\x四种通配符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;keys命令会遍历所有键，不建议在生产环境中使用&lt;/li&gt;
&lt;li&gt;命令不区分大小写&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;exists-key&#34;&gt;exists key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;如果键存在返回1，否则返回0&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;del-key&#34;&gt;del key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;删除一个或多个键，返回删除的键的个数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;type-key&#34;&gt;type key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;获得键值的数据类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2字符串类型&#34;&gt;2、字符串类型&lt;/h3&gt;
&lt;h4 id=&#34;简介&#34;&gt;简介&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;字符串类型是Redis中最基本的数据类型，它能存储任何形式的字符串，包括二进制数据，可以存储邮箱、JSON、或者一张图片，允许存储的最大容量是512MB&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;set-key-value--get-key&#34;&gt;set key value / get key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;赋值与取值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;incr-key&#34;&gt;incr key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;递增数字，让当前键值递增，并返回递增后的值&lt;/li&gt;
&lt;li&gt;如果key不存在时会默认键值为0&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;incrby-key-increment&#34;&gt;incrby key increment&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;增加指定的整数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;decr-key&#34;&gt;decr key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;同上&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;decrby-key-decrement&#34;&gt;decrby key decrement&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;同上&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;incrbyfloat-key-increment&#34;&gt;incrbyfloat key increment&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;增加指定浮点数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;append-key-value&#34;&gt;append key value&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;尾部追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;strlen-key&#34;&gt;strlen key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;字符串长度&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mget-key--mset-key1-value1-&#34;&gt;mget key / mset key1 value1 &amp;hellip;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;同时获取/设置多个键值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;位操作&#34;&gt;位操作&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;getbit key offset&lt;/li&gt;
&lt;li&gt;setbit key offset value&lt;/li&gt;
&lt;li&gt;bitcount key&lt;/li&gt;
&lt;li&gt;bittop&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;使用场景&#34;&gt;使用场景&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;文章访问量统计：为每篇文章使用一个名为post:文h章ID:page.view的键来记录文章的访问量，每次访问文章的时候使用incr命令。（键命名建议：“对象类型：对象ID：对象属性”）&lt;/li&gt;
&lt;li&gt;生成自增ID：对于每一类对象使用名为对象类型：count的键来存储当前类型对象的数量（如users:count），每次新增一个对象时都使用incr命令，返回值就是该新增对象的ID。&lt;/li&gt;
&lt;li&gt;存储文章数据：JSON存储&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3hash类型&#34;&gt;3、hash类型&lt;/h3&gt;
&lt;h4 id=&#34;简介-1&#34;&gt;简介&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;散列类型适合存储对象：使用对象类别和ID构成键名，使用字段表示属性，字段值则存储属性值。一个键最多存2^32 - 1个元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hset-key-field-value&#34;&gt;hset key field value&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;hset car price 500&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hget-key-field&#34;&gt;hget key field&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;hget car price&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hmset-key-field-value&#34;&gt;hmset key field value&lt;/h4&gt;
&lt;h4 id=&#34;hmget-key-field&#34;&gt;hmget key field&lt;/h4&gt;
&lt;h4 id=&#34;hgetall-key&#34;&gt;hgetall key&lt;/h4&gt;
&lt;h4 id=&#34;hexists-key-field&#34;&gt;hexists key field&lt;/h4&gt;
&lt;h4 id=&#34;hsetnx-key-field-value&#34;&gt;hsetnx key field value&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当字段不存在时赋值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原子操作，线程安全&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hincrby-key-field-increment&#34;&gt;hincrby key field increment&lt;/h4&gt;
&lt;h4 id=&#34;hdel-key-field&#34;&gt;hdel key field&lt;/h4&gt;
&lt;h4 id=&#34;其他命令&#34;&gt;其他命令&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;hkeys&lt;/li&gt;
&lt;li&gt;hvals&lt;/li&gt;
&lt;li&gt;hlen&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;使用场景-1&#34;&gt;使用场景&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;存储文章数据&lt;/li&gt;
&lt;li&gt;存储文章缩略名：使用slug.to.id的键来存储文章缩略名和ID之间的映射关系。这样就可以用hexists判断缩略名是否存在，使用hget命令来获取缩略名对应的文章ID&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;4list类型&#34;&gt;4、list类型&lt;/h3&gt;
&lt;h4 id=&#34;简介-2&#34;&gt;简介&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;可以存储一个有序的字符串列表，常用操作是向列表两端添加元素&lt;/li&gt;
&lt;li&gt;底层：双向链表，添加复杂度O（1）&lt;/li&gt;
&lt;li&gt;适用场景：只关心最新的内容&lt;/li&gt;
&lt;li&gt;一个键最多存2^32 - 1个元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;lpush-key-value1&#34;&gt;lpush key value1&amp;hellip;&lt;/h4&gt;
&lt;h4 id=&#34;rpush-key-value1&#34;&gt;rpush key value1&amp;hellip;&lt;/h4&gt;
&lt;h4 id=&#34;lpop-key&#34;&gt;lpop key&lt;/h4&gt;
&lt;h4 id=&#34;rpop-key&#34;&gt;rpop key&lt;/h4&gt;
&lt;h4 id=&#34;llen-key&#34;&gt;llen key&lt;/h4&gt;
&lt;h4 id=&#34;lrange-key-start-stop&#34;&gt;lrange key start stop&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;获取列表片段（两边都是闭区间）&lt;/li&gt;
&lt;li&gt;支持负索引（与python类似）&lt;/li&gt;
&lt;li&gt;0，-1会返回所有元素&lt;/li&gt;
&lt;li&gt;start &amp;gt; stop：返回空&lt;/li&gt;
&lt;li&gt;stop &amp;gt; len：返回start,start + len&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;lrem-key-count-value&#34;&gt;lrem key count value&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;删除列表中前count个值为value的元素，返回值是实际删除的元素个数&lt;/li&gt;
&lt;li&gt;count&amp;gt;0时，从列表左边开始删除&lt;/li&gt;
&lt;li&gt;count&amp;lt;0时，从列表右边开始删除&lt;/li&gt;
&lt;li&gt;count=0时，删除所有&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;lindex-key-index&#34;&gt;lindex key index&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;索引取值，支持负数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;lset-key-index-value&#34;&gt;lset key index value&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;索引赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ltrim-key-start-end&#34;&gt;ltrim key start end&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;删除指定索引外的全部值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;linsert-key-beforeafter-pivot-value&#34;&gt;linsert key before|after pivot value&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;首先查找pivot，然后插入其前面或后面&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;rpoplpush-source-destination&#34;&gt;rpoplpush source destination&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;将一个元素转到另一个列表&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;使用场景-2&#34;&gt;使用场景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;存储文章ID列表&lt;/li&gt;
&lt;li&gt;存储评论列表&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5set类型&#34;&gt;5、set类型&lt;/h3&gt;
&lt;h4 id=&#34;简介-3&#34;&gt;简介&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;无序、唯一&lt;/li&gt;
&lt;li&gt;最多2^32 - 1个元素&lt;/li&gt;
&lt;li&gt;常用操作：插入、删除、判断某个元素是否存在、交集、并集、差集&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sadd-key-member&#34;&gt;sadd key member&lt;/h4&gt;
&lt;h4 id=&#34;srem-key-member&#34;&gt;srem key member&lt;/h4&gt;
&lt;h4 id=&#34;smembers&#34;&gt;smembers&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;返回所有元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sismember-key-member&#34;&gt;sismember key member&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;判断元素是否在集合中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;O（1）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sdiff-key1-key2-&#34;&gt;sdiff key1 key2 &amp;hellip;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;求差集（ key1 - key2）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sinter-key1-key2&#34;&gt;sinter key1 key2&amp;hellip;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;求交集&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sunion-key1-key2&#34;&gt;sunion key1 key2&amp;hellip;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;求并集&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;scard-key&#34;&gt;scard key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;获取元素个数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sdiffstoresinterstoresunionstore-destination-key1-key2&#34;&gt;sdiffstore/sinterstore/sunionstore destination key1 key2&amp;hellip;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;存储集合操作的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;srandmember-key-count&#34;&gt;srandmember key count&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;count&amp;gt;0时，获取不重复的随机count个元素&lt;/li&gt;
&lt;li&gt;count&amp;lt;0时，获取可能重复的随机count个元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;spop&#34;&gt;spop&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;随机选择一个元素弹出&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;使用场景-3&#34;&gt;使用场景&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;存储文章标签&lt;/li&gt;
&lt;li&gt;通过标签搜索文章&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;6zset类型&#34;&gt;6、zset类型&lt;/h3&gt;
&lt;h4 id=&#34;简介-4&#34;&gt;简介&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;有序&lt;/li&gt;
&lt;li&gt;唯一&lt;/li&gt;
&lt;li&gt;可以获取某一范围的袁旭&lt;/li&gt;
&lt;li&gt;底层：散列表和跳表，读取速度为O(logn)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zadd-key-score-member&#34;&gt;zadd key score member&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;支持整数、双精度浮点数，甚至-inf和+inf&lt;/li&gt;
&lt;li&gt;可以修改score&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zscore-key-member&#34;&gt;zscore key member&lt;/h4&gt;
&lt;h4 id=&#34;zrange-key-start-stop-withscores&#34;&gt;zrange key start stop [withscores]&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;获得排名在某个范围的元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以添加分数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;复杂度为O(logn + m)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zrangebyscore-key-min-max-withscores-limit-offset-count&#34;&gt;zrangebyscore key min max [withscores] limit offset count&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;获得指定分数范围的元素，两边是闭区间&lt;/li&gt;
&lt;li&gt;支持inf&lt;/li&gt;
&lt;li&gt;数字前添加左圆括号表示开区间&lt;/li&gt;
&lt;li&gt;可以用limit限制返回的个数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zrevrangebyscore-key-max-min-withscores-limit-offset-count&#34;&gt;zrevrangebyscore key max min [withscores] limit offset count&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;同上，改成降序&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zincrby-key-increment-member&#34;&gt;zincrby key increment member&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;增加某个元素的分数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zcard-key&#34;&gt;zcard key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;元素数量&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zcount-key-min-max&#34;&gt;zcount key min max&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;分数范围内个数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zrem-key-member1-&#34;&gt;zrem key member1 &amp;hellip;&lt;/h4&gt;
&lt;h4 id=&#34;zremrangebyranke-key-start-stop&#34;&gt;zremrangebyranke key start stop&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;根据排名范围删除元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zremrangebyscore-key-min-max&#34;&gt;zremrangebyscore key min max&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;根据分数范围删除元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zrank-key-member&#34;&gt;zrank key member&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;获取元素排名&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zrevrank-key-member&#34;&gt;zrevrank key member&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;降序排名&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
