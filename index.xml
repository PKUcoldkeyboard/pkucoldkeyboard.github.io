<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>cuterwrite (Pang S.Z)</title>
        <link>https://cuterwrite.top/</link>
        <description>Recent content on cuterwrite (Pang S.Z)</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 29 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://cuterwrite.top/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>ArrayList源码分析</title>
        <link>https://cuterwrite.top/p/arraylist-source-code/</link>
        <pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/arraylist-source-code/</guid>
        <description>&lt;h1 id=&#34;arraylist源码分析&#34;&gt;ArrayList源码分析&lt;/h1&gt;
&lt;h2 id=&#34;1-简介&#34;&gt;1 简介&lt;/h2&gt;
&lt;p&gt;底层：Object[]，容量能动态增长。在添加大量元素前，会先调用ensureCapacity来增加ArrayList的容量，可以减少递增再分配的次数。&lt;/p&gt;
&lt;p&gt;ArrayList继承了AbstractList，实现了List，RandomAccess，Cloneable，Serializable等接口。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RandomAccess：标志接口，接口体是空的，只是用来表明ArrayList是支持快速随机访问的。&lt;/li&gt;
&lt;li&gt;Cloneable：能被克隆&lt;/li&gt;
&lt;li&gt;Serializable：可序列化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;11-arraylist和vector的区别&#34;&gt;1.1 ArrayList和Vector的区别&lt;/h3&gt;
&lt;p&gt;底层都是Object[]，但是ArrayList线程不安全，Vector线程安全。&lt;/p&gt;
&lt;h3 id=&#34;12-arraylist和linkedlist的区别&#34;&gt;1.2 ArrayList和LinkedList的区别&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;线程安全：ArrayList和LinkedList都是线程不安全的。&lt;/li&gt;
&lt;li&gt;底层数据结构：ArrayList是Object[]，LinkedList底层是双向链表。&lt;/li&gt;
&lt;li&gt;插入和删除：ArrayList插入和删除元素的时间复杂度受元素位置的影响，为O(n - i)；LinkedList的插入和删除元素的时间复杂度不受插入元素位置的影响，都近似于O(1)，但如果在指定位置插入和删除，需要先移动到指定位置再执行操作，时间复杂度近似于O(n)。&lt;/li&gt;
&lt;li&gt;是否支持快速随机访问：ArrayList支持，LinkedList不支持。&lt;/li&gt;
&lt;li&gt;内存空间占用：ArrayList需要在列表末尾预留一定的容量空间，LinkedList的每一个元素都需要多消耗pre和next指针的空间。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-核心源码分析&#34;&gt;2 核心源码分析&lt;/h2&gt;
&lt;h3 id=&#34;21-属性&#34;&gt;2.1 属性&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;默认初始容量大小&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEFAULT_CAPACITY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;元素个数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存放数据的数组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;transient&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elementData&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;空数组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EMPTY_ELEMENTDATA&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用于默认大小实例的共享空数组实例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEFAULTCAPACITY_EMPTY_ELEMENTDATA&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;22-构造函数&#34;&gt;2.2 构造函数&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;无参&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;elementData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEFAULTCAPACITY_EMPTY_ELEMENTDATA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：以无参数构造方法创建 ArrayList 时，实际上初始化赋值的是一个空数组。当真正对数组进行添加元素操作时，才真正分配容量。即向数组中添加第一个元素时，数组容量扩为 10。（用了懒汉式的单例设计模式）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定容量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;initialCapacity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initialCapacity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;elementData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initialCapacity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initialCapacity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;elementData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EMPTY_ELEMENTDATA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;c1&#34;&gt;//抛出异常
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定collection&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Collection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
 &lt;span class=&#34;n&#34;&gt;elementData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toArray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elementData&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elementData&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[].&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;elementData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;copyOf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elementData&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[].&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
     &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;elementData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EMPTY_ELEMENTDATA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;23-扩容机制&#34;&gt;2.3 扩容机制&lt;/h3&gt;
&lt;h4 id=&#34;231-add方法&#34;&gt;2.3.1 add方法&lt;/h4&gt;
&lt;h4 id=&#34;232-ensurecapacityinternal方法&#34;&gt;2.3.2 ensureCapacityInternal方法&lt;/h4&gt;
&lt;h4 id=&#34;233-ensureexplicitcapacity&#34;&gt;2.3.3 ensureExplicitCapacity&lt;/h4&gt;
&lt;h4 id=&#34;234-grow方法&#34;&gt;2.3.4 grow方法&lt;/h4&gt;
&lt;h4 id=&#34;235-hugecapacity方法&#34;&gt;2.3.5 hugeCapacity方法&lt;/h4&gt;
&lt;h3 id=&#34;24-拷贝机制&#34;&gt;2.4 拷贝机制&lt;/h3&gt;
&lt;h3 id=&#34;25-ensurecapacity方法&#34;&gt;2.5 ensureCapacity方法&lt;/h3&gt;
</description>
        </item>
        <item>
        <title>实用工具和网址</title>
        <link>https://cuterwrite.top/p/useful-tool/</link>
        <pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/useful-tool/</guid>
        <description>&lt;h1 id=&#34;实用工具和网址&#34;&gt;实用工具和网址&lt;/h1&gt;
&lt;h2 id=&#34;在线画图工具&#34;&gt;在线画图工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ProcessOn：&lt;a class=&#34;link&#34; href=&#34;https://www.processon.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.processon.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;在线解编码工具&#34;&gt;在线解编码工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;BASE64：&lt;a class=&#34;link&#34; href=&#34;https://base64.supfree.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://base64.supfree.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MD5：&lt;a class=&#34;link&#34; href=&#34;https://www.zxgj.cn/g/md5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zxgj.cn/g/md5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;AES/DES：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/tool/cipher/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/tool/cipher/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JWT：&lt;a class=&#34;link&#34; href=&#34;http://jwt.calebb.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://jwt.calebb.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ASCII：&lt;a class=&#34;link&#34; href=&#34;https://www.matools.com/code-convert-ascii&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.matools.com/code-convert-ascii&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Unicode：&lt;a class=&#34;link&#34; href=&#34;https://www.zxgj.cn/g/unicode&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zxgj.cn/g/unicode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;UTF8：&lt;a class=&#34;link&#34; href=&#34;https://www.zxgj.cn/g/utf8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zxgj.cn/g/utf8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;字符串：&lt;a class=&#34;link&#34; href=&#34;https://www.zxgj.cn/g/enstring&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zxgj.cn/g/enstring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;URL：&lt;a class=&#34;link&#34; href=&#34;http://tool.chinaz.com/tools/urlencode.aspx?jdfwkey=lbixzl&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://tool.chinaz.com/tools/urlencode.aspx?jdfwkey=lbixzl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;在线转换工具&#34;&gt;在线转换工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在线ACSII对照表：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/tool/ascii/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/tool/ascii/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;通用进制转换工具：&lt;a class=&#34;link&#34; href=&#34;https://www.zxgj.cn/g/jinzhi&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zxgj.cn/g/jinzhi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线浮点数十进制转换：&lt;a class=&#34;link&#34; href=&#34;http://www.binaryconvert.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.binaryconvert.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;RGB：&lt;a class=&#34;link&#34; href=&#34;https://www.zxgj.cn/g/yansezhi&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zxgj.cn/g/yansezhi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;时间戳：&lt;a class=&#34;link&#34; href=&#34;https://www.zxgj.cn/g/unix&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zxgj.cn/g/unix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;计量单位换算：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/tool/unitable/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/tool/unitable/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线JSON解析：&lt;a class=&#34;link&#34; href=&#34;http://www.json.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.json.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线JS代码格式化工具：&lt;a class=&#34;link&#34; href=&#34;https://prettier.io/playground/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://prettier.io/playground/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SQL压缩/格式化工具：&lt;a class=&#34;link&#34; href=&#34;https://www.zxgj.cn/g/sqlformat&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zxgj.cn/g/sqlformat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JSON和YAML在线转换：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/tool/jsonyaml/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/tool/jsonyaml/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JSON和XML在线转换:&lt;a class=&#34;link&#34; href=&#34;https://www.zxgj.cn/g/jsonxml&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zxgj.cn/g/jsonxml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;人民币大小写转换：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/tool/renmingbi/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/tool/renmingbi/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;正则表达式工具&#34;&gt;正则表达式工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;正则表达式调试工具：&lt;a class=&#34;link&#34; href=&#34;https://regexr.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://regexr.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;正则表达式可视化工具：&lt;a class=&#34;link&#34; href=&#34;https://jex.im/regulex/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://jex.im/regulex/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络工具&#34;&gt;网络工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IP地址归属地查询：&lt;a class=&#34;link&#34; href=&#34;https://www.ip138.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.ip138.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IP地址查询：&lt;a class=&#34;link&#34; href=&#34;https://www.ipip.net/ip.html/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.ipip.net/ip.html/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HTTP在线接口测试工具：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/php/http/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/php/http/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;在线编译运行工具&#34;&gt;在线编译运行工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C#在线编译运行（不支持input）：&lt;a class=&#34;link&#34; href=&#34;https://rextester.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://rextester.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C/C++在线编译：&lt;a class=&#34;link&#34; href=&#34;https://www.onlinegdb.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.onlinegdb.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线编译工具套装：&lt;a class=&#34;link&#34; href=&#34;https://c.runoob.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://c.runoob.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;在线生成器&#34;&gt;在线生成器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;UUID：&lt;a class=&#34;link&#34; href=&#34;https://www.zxgj.cn/g/uuid&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zxgj.cn/g/uuid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;随机数：&lt;a class=&#34;link&#34; href=&#34;https://www.zxgj.cn/g/suijishu&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zxgj.cn/g/suijishu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其它常用开发工具&#34;&gt;其它常用开发工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在线Nginx配置工具：&lt;a class=&#34;link&#34; href=&#34;https://nginxconfig.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://nginxconfig.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线对比工具：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/tool/textdiff/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/tool/textdiff/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线Chrome浏览器插件：&lt;a class=&#34;link&#34; href=&#34;https://www.crx4chrome.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.crx4chrome.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;在线素材网站&#34;&gt;在线素材网站&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;阿里巴巴矢量图标库：&lt;a class=&#34;link&#34; href=&#34;https://www.iconfont.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.iconfont.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;表情包在线网站：&lt;a class=&#34;link&#34; href=&#34;https://fabiaoqing.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://fabiaoqing.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;极简壁纸：&lt;a class=&#34;link&#34; href=&#34;https://bz.zzzmh.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bz.zzzmh.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wallpaper Abyss壁纸：&lt;a class=&#34;link&#34; href=&#34;https://wall.alphacoders.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wall.alphacoders.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pixabay图片素材库：&lt;a class=&#34;link&#34; href=&#34;https://pixabay.com/zh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pixabay.com/zh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Unsplash图片素材库：&lt;a class=&#34;link&#34; href=&#34;https://unsplash.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://unsplash.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pexels图片素材库：&lt;a class=&#34;link&#34; href=&#34;http://www.pexels.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.pexels.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NASA图片素材库：&lt;a class=&#34;link&#34; href=&#34;https://images.nasa.gov&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://images.nasa.gov&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;设计制作类工具&#34;&gt;设计制作类工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在线PS：&lt;a class=&#34;link&#34; href=&#34;https://www.uupoop.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.uupoop.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线音频剪辑：&lt;a class=&#34;link&#34; href=&#34;https://www.weixinsyt.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.weixinsyt.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线视频剪辑：&lt;a class=&#34;link&#34; href=&#34;https://www.kapwing.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.kapwing.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;LOGO在线制作：&lt;a class=&#34;link&#34; href=&#34;https://www.uugai.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.uugai.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;艺术字体在线生成：&lt;a class=&#34;link&#34; href=&#34;https://www.qt86.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.qt86.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线表格转换工具：&lt;a class=&#34;link&#34; href=&#34;https://tableconvert.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://tableconvert.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线海报设计工具：&lt;a class=&#34;link&#34; href=&#34;https://www.designcap.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.designcap.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;图片智能放大工具：&lt;a class=&#34;link&#34; href=&#34;https://bigjpg.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bigjpg.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;二维码美化器：&lt;a class=&#34;link&#34; href=&#34;https://mh.cli.im/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mh.cli.im/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线代码截图工具：&lt;a class=&#34;link&#34; href=&#34;https://carbon.now.sh/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://carbon.now.sh/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线抠图工具：&lt;a class=&#34;link&#34; href=&#34;https://www.remove.bg/zh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.remove.bg/zh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ICO图标在线生成：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/php/ico/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/php/ico/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SVG转PNG：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/tool/svg2img/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/tool/svg2img/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;视频转GIF：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/tool/giftxt/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/tool/giftxt/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;二维码在线生成：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/tool/ewm/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/tool/ewm/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;二维码在线解码：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/php/decoder/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/php/decoder/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;写作辅助工具&#34;&gt;写作辅助工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在线字数统计：&lt;a class=&#34;link&#34; href=&#34;https://www.eteste.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.eteste.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;mdnice markdown排版工具：&lt;a class=&#34;link&#34; href=&#34;https://mdnice.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mdnice.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;mdmall markdown排版工具：&lt;a class=&#34;link&#34; href=&#34;https://md.aclickall.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://md.aclickall.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;markdown目录生成器：&lt;a class=&#34;link&#34; href=&#34;https://ecotrust-canada.github.io/markdown-toc/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ecotrust-canada.github.io/markdown-toc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线图床（基于github）：&lt;a class=&#34;link&#34; href=&#34;https://picx.xpoet.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://picx.xpoet.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;图壳图床：&lt;a class=&#34;link&#34; href=&#34;https://imgkr.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://imgkr.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;免费图床：&lt;a class=&#34;link&#34; href=&#34;https://sm.ms/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://sm.ms/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线短链接工具：&lt;a class=&#34;link&#34; href=&#34;https://urlify.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://urlify.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线文本替换：&lt;a class=&#34;link&#34; href=&#34;http://www.fly63.com/tool/textreplace/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.fly63.com/tool/textreplace/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;在线办公工具&#34;&gt;在线办公工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;pdf在线处理工具1：&lt;a class=&#34;link&#34; href=&#34;https://smallpdf.com/cn/pdf-tools&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://smallpdf.com/cn/pdf-tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pdf在线处理工具2：&lt;a class=&#34;link&#34; href=&#34;https://tools.pdf24.org/zh/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://tools.pdf24.org/zh/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线多媒体转换：&lt;a class=&#34;link&#34; href=&#34;https://cn.office-converter.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cn.office-converter.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线文字识别工具：&lt;a class=&#34;link&#34; href=&#34;https://ocr.wdku.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ocr.wdku.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线文件压缩工具：&lt;a class=&#34;link&#34; href=&#34;https://docsmall.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docsmall.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;官方文档&#34;&gt;官方文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Git：&lt;a class=&#34;link&#34; href=&#34;https://www.liaoxuefeng.com/wiki/896043488029600/900375748016320&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.liaoxuefeng.com/wiki/896043488029600/900375748016320&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SVM：&lt;a class=&#34;link&#34; href=&#34;http://svnbook.red-bean.com/nightly/zh/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://svnbook.red-bean.com/nightly/zh/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nginx中文文档：&lt;a class=&#34;link&#34; href=&#34;https://www.nginx.cn/doc/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.nginx.cn/doc/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mybatis中文文档：&lt;a class=&#34;link&#34; href=&#34;https://mybatis.org/mybatis-3/zh/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mybatis.org/mybatis-3/zh/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;微信小程序官方文档：&lt;a class=&#34;link&#34; href=&#34;https://developers.weixin.qq.com/miniprogram/dev/framework/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://developers.weixin.qq.com/miniprogram/dev/framework/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NodeJs中文文档：&lt;a class=&#34;link&#34; href=&#34;http://nodejs.cn/learn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://nodejs.cn/learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Golang标准库：&lt;a class=&#34;link&#34; href=&#34;https://studygolang.com/pkgdoc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://studygolang.com/pkgdoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java 8官方文档：&lt;a class=&#34;link&#34; href=&#34;https://docs.oracle.com/javase/8/docs.api/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.oracle.com/javase/8/docs.api/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Maven官方文档：&lt;a class=&#34;link&#34; href=&#34;http://maven.apache.org/guides/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://maven.apache.org/guides/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Spring Boot官方文档：&lt;a class=&#34;link&#34; href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;RabbitMq官方文档：&lt;a class=&#34;link&#34; href=&#34;https://www.rabbitmq.com/documentation.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.rabbitmq.com/documentation.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dubbo中文文档：&lt;a class=&#34;link&#34; href=&#34;https://dubbo.apache.org/zh/docs/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://dubbo.apache.org/zh/docs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Netty官方文档：&lt;a class=&#34;link&#34; href=&#34;https://netty.io/wiki/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://netty.io/wiki/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ElasticSearch官方文档：&lt;a class=&#34;link&#34; href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Spring Cloud官方文档：&lt;a class=&#34;link&#34; href=&#34;https://spring.io/projects/spring-cloud&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://spring.io/projects/spring-cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker官方文档：&lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/get-started/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.docker.com/get-started/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;K8S中文文档：&lt;a class=&#34;link&#34; href=&#34;https://kubernetes.io/zh/docs/home/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://kubernetes.io/zh/docs/home/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vue.js中文文档：&lt;a class=&#34;link&#34; href=&#34;https://cn.vuejs.org/v2/guide/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cn.vuejs.org/v2/guide/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;React.js官方文档：&lt;a class=&#34;link&#34; href=&#34;https://reactjs.org/docs/getting-started.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://reactjs.org/docs/getting-started.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jenkins中文文档：&lt;a class=&#34;link&#34; href=&#34;https://www.jenkins.io/zh/doc/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.jenkins.io/zh/doc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ant design官方文档：&lt;a class=&#34;link&#34; href=&#34;https://www.antdv.com/docs/vue/introduce-cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.antdv.com/docs/vue/introduce-cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hutool：&lt;a class=&#34;link&#34; href=&#34;https://www.hutool.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.hutool.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;厦门大学大数据实验室：&lt;a class=&#34;link&#34; href=&#34;http://dblab.xmu.edu.cn/blog/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://dblab.xmu.edu.cn/blog/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Flutter中文文档：&lt;a class=&#34;link&#34; href=&#34;https://flutter.cn/docs/development/tools/sdk/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://flutter.cn/docs/development/tools/sdk/releases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;算法学习&#34;&gt;算法学习&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;leetcode：&lt;a class=&#34;link&#34; href=&#34;https://leetcode-cn.com/problemset/all/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://leetcode-cn.com/problemset/all/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;nowcoder：&lt;a class=&#34;link&#34; href=&#34;https://www.nowcoder.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.nowcoder.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;labuladong的算法小抄：&lt;a class=&#34;link&#34; href=&#34;https://labuladong.gitbook.io/algo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://labuladong.gitbook.io/algo/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;转载自：https://www.jianshu.com/p/467b7e01fb69&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>HashMap源码分析</title>
        <link>https://cuterwrite.top/p/hashmap/</link>
        <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/hashmap/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#hashmap----&#34; &gt;HashMap源码分析&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1---&#34; &gt;1 属性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-----&#34; &gt;2 构造方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-----&#34; &gt;3 增加元素&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-----&#34; &gt;4 读取元素&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5-----&#34; &gt;5 删除元素&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6---------&#34; &gt;6 底层数据结构分析&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#61-jdk18--&#34; &gt;6.1 JDK1.8之前&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#62-jdk18--&#34; &gt;6.2 JDK1.8之后&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;hashmap源码分析&#34;&gt;HashMap源码分析&lt;/h1&gt;
&lt;h2 id=&#34;1-属性&#34;&gt;1 属性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;初始化容量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEFAULT_INITIAL_CAPACITY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最大容量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAXIMUM_CAPACITY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;负载因子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEFAULT_LOAD_FACTOR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;75f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;红黑树阈值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TREEIFY_THRESHOLD&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;链表阈值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UNTREEIFY_THRESHOLD&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;红黑树桶阈值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MIN_TREEIFY_CAPACITY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;table数组，用来初始化&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;transient&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;entrySet存放缓存&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;transient&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Entry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;entrySet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;桶的数量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;transient&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改次数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;transient&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;modCount&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阈值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;threshold&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;负载因子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loadFactor&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-构造方法&#34;&gt;2 构造方法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;HashMap()&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;HashMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;loadFactor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEFAULT_LOAD_FACTOR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HashMap(int initialCapacity)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;HashMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;initialCapacity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;initialCapacity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEFAULT_LOAD_FACTOR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HashMap(int initialCapacity, float loadFactor )&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;HashMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;initialCapacity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loadFactor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initialCapacity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//抛出数值异常
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initialCapacity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAXIMUM_CAPACITY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;initialCapacity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAXIMUM_CAPACITY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loadFactor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isNaN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loadFactor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)){&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//抛出数值异常
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;loadFactor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loadFactor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//tableSizeFor，大于等于当前值的下一个2的幂，比如输入17，返回32
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;threshold&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tableSizeFor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initialCapacity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-增加元素&#34;&gt;3 增加元素&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;put方法分析&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;V&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;V&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;putVal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hash方法分析&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
 &lt;span class=&#34;c1&#34;&gt;//key为空返回0，先计算key的hashcode，然后与h无符号右移16位后的二进制进行异或
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hashCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;putVal方法分析&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;V&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;putVal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;V&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;onlyIfAbsent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;evict&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    * 如果table是否等于空或者等于0，如果是则进行初始化
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    * 哈希取模，i = (n - 1) &amp;amp; hash，对值的位置进行确定
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    * 也是capacity为2的幂的原因，与运算效率高于%
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    * capacity为2的幂次时，(n - 1) &amp;amp; hash = hash % n
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    * 如果tab[i] = null，新增一个元素
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//说明该位置有值了
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; 
                               &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;eqauls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)))){&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//key值存在，无论链表还是红黑树都需要替换
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//如果是红黑树
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;putTreeVal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;            * 链表，遍历到最后节点然后插入；
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;            */&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binCount&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;binCount&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++){&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
                    &lt;span class=&#34;c1&#34;&gt;//大于红黑树阈值，转换红黑树
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;binCount&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TREEIFY_THRESHOLD&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;treeifyBin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
                    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hahs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; 
                                       &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)))){&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;        * 如果链表中重复就直接替换
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;        */&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;V&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldValue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;onlyIfAbsent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldValue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;afterNodeAccess&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldValue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//记录修改次数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;modCount&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//如果超过threshold，调用resize
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;threshold&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;resize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;afterNodeInsertion&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;evict&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;如果定位到的数组位置没有元素，直接插入。&lt;/li&gt;
&lt;li&gt;如果定位到的数组位置有元素，就要和插入的key比较，key相同则直接覆盖，如果不相同，则判断p是否是TreeNode，如果是则调用e=((TreeNode&amp;lt;K,V)p).putTreeVal(this, tab, hash, key, value)将元素添加进入。如果不是则遍历链表插入到链表尾部。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;resize方法分析&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;resize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldTab&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldCap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oldTab&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldTab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldThr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;threshold&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newCap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newThr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oldCap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oldCap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAXIMUM_CAPACITY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;threshold&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldTab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newCap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldCap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAXIMUM_CAPACITY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                  &lt;span class=&#34;n&#34;&gt;oldCap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEFAULT_INITIAL_CAPACITY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//threshold加倍
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;newThr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldThr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oldThr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;newCap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldThr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//默认Capacity和threshold，分别为16和12
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;newCap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEFAULT_INITIAL_CAPACITY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;newThr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DEFAULT_LOAD_FACTOR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEFAULT_INITIAL_CAPACITY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newThr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ft&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newCap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loadFactor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;newThr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newCap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAXIMUN_CAPACITY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ft&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAXIMUM_CAPACITY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;
                 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ft&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;threshold&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newThr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newTab&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;[])&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newCap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newTab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oldTab&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;        * 省略，拷贝旧的hash桶到newTab
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;        */&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-读取元素&#34;&gt;4 读取元素&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;get方法分析&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;V&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;getNode方法分析&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//table有元素
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
       &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//从第一个node开始
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; 
                                 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)))){&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//first的下一个node
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//若是红黑树，调用红黑树查找方法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getTreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//否则遍历链表查找
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;
                                      &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)))){&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//table没元素了，直接返回null
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5-删除元素&#34;&gt;5 删除元素&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;remove方法分析&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;V&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;removeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;
      &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;removeNode方法分析&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;removeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
                           &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;matchValue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;movable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
       &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;V&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; 
                               &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)))){&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//如果是红黑树，调用红黑树查找方法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getTreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;//否则，迭代链表
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;
                                          &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)))){&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
                        &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
                    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//找到节点了
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;matchValue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;
                            &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)))){&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//调用红黑树删除节点的方法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;removeTreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;movable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;//是链表头部
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;n&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//修改次数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;modCount&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;afterNodeRemoval&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;6-底层数据结构分析&#34;&gt;6 底层数据结构分析&lt;/h2&gt;
&lt;h3 id=&#34;61-jdk18之前&#34;&gt;6.1 JDK1.8之前&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;底层：数组加链表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基本原理：通过key的hashcode经过扰动处理得到hash值，然后通过(n - 1) &amp;amp; hash判断当前元素存放的位置，如果当前位置存在元素的话，就判断该元素与要存放的元素的hash值以及key是否相同，如果相同则直接覆盖，不相同就用拉链法解决冲突。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扰动函数：hash方法，目的是防止一些实现比较差的hashcode方法，减少碰撞。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hash方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;性能较于1.8差，扰动次数为4&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拉链法：将链表和数组结合，也就是创建一个链表数组Node&amp;lt;K,V&amp;gt;[]，如果遇到哈希冲突，则将冲突的值加到链表中即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;62-jdk18之后&#34;&gt;6.2 JDK1.8之后&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;底层：数组加链表加红黑树&lt;/li&gt;
&lt;li&gt;基本原理：当链表长度大于阈值8时，会调用treeifyBin方法，根据HashMap数组决定是否转化成红黑树，只有当&lt;strong&gt;数组长度大于或者等于64&lt;/strong&gt;时，才会执行转换红黑树的操作，减减少搜索时间。否则只会进行resize()方法对数组进行扩容。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>前端开发知识点复习-基础篇</title>
        <link>https://cuterwrite.top/p/web-development-1/</link>
        <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/web-development-1/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#-------&#34; &gt;前端开发知识点-基础篇&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-cookie-session-sessionstorage-localstorage&#34; &gt;1 Cookie、Session、SessionStorage和LocalStorage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-http-https---&#34; &gt;2 Http和Https的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-http20---&#34; &gt;3 Http2.0的特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-osi----&#34; &gt;4 OSI七层模型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5-tcp-udp---&#34; &gt;5 TCP和UDP的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6-tcp---------&#34; &gt;6 TCP三次握手和四次挥手&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#7-http---&#34; &gt;7 HTTP状态码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#8-http----&#34; &gt;8 HTTP缓存机制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#9-xss---csrf--&#34; &gt;9 XSS攻击和CSRF攻击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#10-http-----&#34; &gt;10 HTTP常见请求头&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#11-http------&#34; &gt;11 HTTP常见请求方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#12---url--------&#34; &gt;12 输入URL到显示页面的过程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#13-websocket&#34; &gt;13 Websocket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#14-bom--&#34; &gt;14 BOM对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#15-cors-------&#34; &gt;15 CORS跨域请求的方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#16-css---&#34; &gt;16 CSS盒模型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#17-link---import-----&#34; &gt;17 link标签和import标签的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#18-transition-animation---&#34; &gt;18 transition和animation的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#19-flex--&#34; &gt;19 Flex布局&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#20-bfc&#34; &gt;20 BFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#21--------&#34; &gt;21 块元素和行元素&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#22-html5-css3----&#34; &gt;22 HTML5和CSS3的新元素&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#23------&#34; &gt;23 重绘和重排&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#24---&#34; &gt;24 闭包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#25--------&#34; &gt;25 类的创建和继承&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#26-promise-generator-async-await&#34; &gt;26 promise、generator、async/await&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#27----&#34; &gt;27 事件流&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#28---------&#34; &gt;28 事件委托（代理）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#29-----&#34; &gt;29 事件循环&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#30----------&#34; &gt;30 图片懒加载和预加载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#31-new---&#34; &gt;31 new操作符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#32-bind-apply-call---&#34; &gt;32 bind、apply、call的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#33------&#34; &gt;33 节流和防抖&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#34----&#34; &gt;34 深拷贝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#35----------proxy&#34; &gt;35 对象属性改变监听-Proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#36-----------&#34; &gt;36 变量提升和暂时性死区&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#37-----&#34; &gt;37 箭头函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#38----&#34; &gt;38 原型链&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#39-es6---&#34; &gt;39 ES6新特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#40--------&#34; &gt;40 垂直居中的方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#41-------&#34; &gt;41 前端性能优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#42-get-post---&#34; &gt;42 get和post的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#43-web-worker&#34; &gt;43 web worker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#47-----&#34; &gt;44 浮动清除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#48-css---&#34; &gt;45 CSS选择器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;前端开发知识点-基础篇&#34;&gt;前端开发知识点-基础篇&lt;/h1&gt;
&lt;h2 id=&#34;1-cookiesessionsessionstorage和localstorage&#34;&gt;1 Cookie、Session、SessionStorage和LocalStorage&lt;/h2&gt;
&lt;p&gt;Cookie：服务器提供的一种用于维护会话状态信息的数据，通过服务器发送到浏览器，浏览器保存在本地的一种纯文本文件，当下一次有同源的请求时，将保存的Cookie数据添加到请求头部，发送给服务端。可以用来实现记录用户登录状态等功能。&lt;/p&gt;
&lt;p&gt;Session：服务器为了保存用户状态而创建的一个特殊的对象。在浏览器第一次访问服务器时，服务器会创建一个session对象,该对象有一个唯一的id,即sessionid，服务器会把sessionid以cookie的形式发送给浏览器,当浏览器再次访问服务器时,会携带cookie在请求头,可以通过cookie中的sessionid来访问session对象，可以实现在http无状态基础上实现用户状态管理。&lt;/p&gt;
&lt;p&gt;Cookie的特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cookie数据存放在客户端上。&lt;/li&gt;
&lt;li&gt;Cookie是非安全的，由于存在本地，有被盗取的可能。&lt;/li&gt;
&lt;li&gt;Cookie保存的数据不能超过4K。&lt;/li&gt;
&lt;li&gt;Cookie始终在同源的HTTP请求中携带。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如何设置Cookie：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务端：使用Set-Cookie的响应头部，包含5个属性值expires、 domain、path、secure和httponly，分别代表过期时间、域名、路径、安全传输、是否禁用客户端js脚本访问。&lt;/li&gt;
&lt;li&gt;客户端：通过JS脚本，例如document.cookie&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Cookie和Session和区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cookie存放在客户端，Session存放在服务端。&lt;/li&gt;
&lt;li&gt;Cookie是非安全的，考虑安全应该使用Session&lt;/li&gt;
&lt;li&gt;访问增多时，服务器压力比较大，考虑使用Cookie&lt;/li&gt;
&lt;li&gt;单个Cookie保存的数据不能超过4K&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Cookie、SessionStorage和LocalStorage的区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cookie始终在同源的HTTP请求中携带。（即使不需要）&lt;/li&gt;
&lt;li&gt;Cookie可以限制可访问的path&lt;/li&gt;
&lt;li&gt;存储大小：Cookie存放数据不能超过4k，WebStorage可以达到5M或更大。&lt;/li&gt;
&lt;li&gt;有效期不同：SessionStorage只在当前浏览器窗口关闭前有效，LocalStorage始终有效，用作持久化，Cookie在设置的过期时间之前一直有效。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Cookie常用场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;保持用户登录状态&lt;/li&gt;
&lt;li&gt;跟踪用户行为，记录用户选项&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-http和https的区别&#34;&gt;2 Http和Https的区别&lt;/h2&gt;
&lt;p&gt;HTTPS基本原理：客户端使用HTTPS URL访问服务端，要去服务端建立SSL连接，服务端接收到客户端请求后，会将网站的证书（携带公钥）返回给客户端，客户端和服务端开始协商SSL连接的安全等级，也就是&lt;strong&gt;加密等级&lt;/strong&gt;，然后两者通过协商一致的安全等级，建立&lt;strong&gt;会话密钥&lt;/strong&gt;，然后客户端通过网站的公钥来加密会话密钥，传给网站，服务端通过自己的&lt;strong&gt;私钥&lt;/strong&gt;解密出会话密钥，通过会话密钥加密与客户端的通信。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安全性：HTTPS是安全超文本协议，在HTTP基础上有更强的安全性，简单来说，HTTPS是使用了TLS/SSL加密的HTTP协议。&lt;/li&gt;
&lt;li&gt;申请证书：HTTPS需要使用CA证书。&lt;/li&gt;
&lt;li&gt;传输协议：HTTP以明文形式传输数据，HTTPS以加密形式传输数据。&lt;/li&gt;
&lt;li&gt;端口号不同：一般来说，HTTP协议的端口为80，HTTPS的端口为443&lt;/li&gt;
&lt;li&gt;连接方式：HTTP的连接简单，是无状态的，HTTPS在HTTP的基础上使用了SSL协议进行加密传输。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-http20的特性&#34;&gt;3 Http2.0的特性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;提升了访问速度&lt;/li&gt;
&lt;li&gt;允许多路复用：允许同时通过单一的HTTP/2连接发送多重请求-响应信息。&lt;/li&gt;
&lt;li&gt;二进制分帧：将所有的传输数据分割为更小的数据帧，并对它们进行二进制编码。&lt;/li&gt;
&lt;li&gt;首部压缩&lt;/li&gt;
&lt;li&gt;服务器端推送&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-osi七层模型&#34;&gt;4 OSI七层模型&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;应用层：文件传输，常用协议HTTP、STMP、FTP&lt;/li&gt;
&lt;li&gt;表示层：数据格式化、代码转换、数据加密&lt;/li&gt;
&lt;li&gt;会话层：建立和解除会话&lt;/li&gt;
&lt;li&gt;传输层：提供端对端的接口，TCP/UDP&lt;/li&gt;
&lt;li&gt;网络层：为数据包选择路由，IP/ICMP&lt;/li&gt;
&lt;li&gt;数据链路层：传输带有地址的帧。&lt;/li&gt;
&lt;li&gt;物理层：二进制的数据形式在物理媒体上传输数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5-tcp和udp的区别&#34;&gt;5 TCP和UDP的区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;TCP是面向连接的，UDP是无连接的，即发送数据前不需要先建立连接。&lt;/li&gt;
&lt;li&gt;TCP提供可靠的服务，无差错、不丢失、不重复、按序到达，UDP尽最大努力交付。（大数据量使用TCP）&lt;/li&gt;
&lt;li&gt;TCP面向字节流，UDP面向报文。（UDP无拥塞控制，可能出现丢包）&lt;/li&gt;
&lt;li&gt;TCP只能1对1，UDP支持1对1和1对多。&lt;/li&gt;
&lt;li&gt;TCP首部较大为20字节，UDP只有8字节。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;6-tcp三次握手和四次挥手&#34;&gt;6 TCP三次握手和四次挥手&lt;/h2&gt;
&lt;p&gt;TCP三次握手：（A为客户端，B为服务端）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;B处于监听，A向B发送连接请求报文SYN=1，ACK=0，选择一个初始的序号x&lt;/li&gt;
&lt;li&gt;B收到连接请求报文，如果同意连接，则向A发送连接确认报文SYN=1，ACK=1，确认号ack=x+1，选择初始序号y&lt;/li&gt;
&lt;li&gt;A收到B的连接确认报文，向B发送确认报文ACK=1，确认号ack=y+1，序号为x+1&lt;/li&gt;
&lt;li&gt;B收到A的确认，连接建立。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;三次握手的原因&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第三次握手防止失效的连接请求到达服务器，让服务器错误打开连接。客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务端返回的确认，导致：客户端超时重传重新建立连接，这时就会出现2个SYN连接。如果有第三次握手，客户端会忽略服务端之后发送的对滞留连接请求的确认，不进行第三次握手，因此就不会打开连接。&lt;/p&gt;
&lt;p&gt;TCP四次挥手：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A发送连接释放报文FIN=1，序号为u&lt;/li&gt;
&lt;li&gt;B收到后发出确认ACK=1, ack=x+1, 序号为v，此时TCP属于半关闭状态，A不能发数据，B能发数据。&lt;/li&gt;
&lt;li&gt;B不需要连接时，发送连接释放报文FIN=1，ACK=1，ack=u+1，序号为w&lt;/li&gt;
&lt;li&gt;A收到后发出确认ACK=1，ack=w+1，序号为u+1，进入TIME-WAIT状态，等待2MSL（最大报文存存活时间）后释放连接。&lt;/li&gt;
&lt;li&gt;B收到A的确认后释放连接。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;7-http状态码&#34;&gt;7 HTTP状态码&lt;/h2&gt;
&lt;p&gt;状态码按第一个数字分类，1表示信息，2表示成功，3表示重定向，4表示客户端错误，5表示服务端错误。&lt;/p&gt;
&lt;p&gt;常见状态码：101切换协议、200成功、301永久重定向、302临时重定向、304未修改、400请求无效、401未认证、403拒绝执行、404未找到资源&lt;/p&gt;
&lt;p&gt;200和304的区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;200是请求成功，一般用于GET和POST&lt;/li&gt;
&lt;li&gt;304是未修改，所请求的资源未修改，服务器返回此状态码时，不会返回任何资源，客户端通过缓存访问资源（协商缓存）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;8-http缓存机制&#34;&gt;8 HTTP缓存机制&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;强缓存：返回状态码为200，不会向服务端发送请求，直接从缓存取资源。相关字段有pragma、expires、cache-control（cache-control优先级更高，pragma优先级最高）。&lt;/li&gt;
&lt;li&gt;协商缓存：返回状态码为304，会向服务端发送请求，通过服务器告知缓存是否可用。相关字段有Last-Modified/If-Modified-Since，Etag/If-None-Match&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;缓存流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;缓存是否过期：未过期，则从缓存读取（强缓存），否则下一步。&lt;/li&gt;
&lt;li&gt;Etag值：True，向服务端发送带If-None-Match的请求，否则继续判断Last-Modified&lt;/li&gt;
&lt;li&gt;Last-Modified为True，向服务端发送带If-Modified-Since的请求，否则正式发送请求，相应后缓存协商。。（无缓存）&lt;/li&gt;
&lt;li&gt;服务器根据If-None-Match和If-Modified-Since决策返回200还是304，304则从缓存读取（协商缓存），200则走正常请求。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;9-xss攻击和csrf攻击&#34;&gt;9 XSS攻击和CSRF攻击&lt;/h2&gt;
&lt;p&gt;XSS攻击：跨站脚本攻击，盗取Cookie，在返回的HTML中嵌入js脚本，防范方法：用户输入检查（过滤特殊字符等）、设置set-cookie的httponly属性。&lt;/p&gt;
&lt;p&gt;CSRF攻击：跨站请求伪造，利用Cookie，以用户的名义发送恶意请求。防范方法：验证码、检查HTTPS头部的referer、使用token。&lt;/p&gt;
&lt;h2 id=&#34;10-http常见请求头&#34;&gt;10 HTTP常见请求头&lt;/h2&gt;
&lt;p&gt;可以划分为：通用首部、请求首部、相应首部和实体首部&lt;/p&gt;
&lt;p&gt;通用首部：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Accept：可接受的响应内容类型&lt;/li&gt;
&lt;li&gt;Accept-Encoding：可接受的响应内容编码形式&lt;/li&gt;
&lt;li&gt;Accept-Language：可接受的响应语言列表&lt;/li&gt;
&lt;li&gt;Cache-Control：是否使用强缓存&lt;/li&gt;
&lt;li&gt;Pragma：一般来说指，是否使用强缓存&lt;/li&gt;
&lt;li&gt;Connection：连接类型（keep-alive）&lt;/li&gt;
&lt;li&gt;User-Agent：浏览器的身份标识字符串&lt;/li&gt;
&lt;li&gt;Content-Length：8进制标识的请求体的长度。&lt;/li&gt;
&lt;li&gt;Content-Type：请求体的MIME类型，用于POST和GET&lt;/li&gt;
&lt;li&gt;Host：服务器的域名及监听端口号，80则可以省略&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;请求首部：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;cookie&lt;/li&gt;
&lt;li&gt;Etag/If-None-Match&lt;/li&gt;
&lt;li&gt;Last-Modified/if-Modified-Since等&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;响应首部：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;set-cookie等&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;11-http常见请求方法&#34;&gt;11 HTTP常见请求方法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;get：请求资源&lt;/li&gt;
&lt;li&gt;head：请求header&lt;/li&gt;
&lt;li&gt;post：建立或修改资源。&lt;/li&gt;
&lt;li&gt;put：取代资源&lt;/li&gt;
&lt;li&gt;delete：删除指定资源&lt;/li&gt;
&lt;li&gt;connect：&lt;/li&gt;
&lt;li&gt;options：允许客户端查看服务端的性能&lt;/li&gt;
&lt;li&gt;trace：回显服务器收到的请求，用于测试和诊断&lt;/li&gt;
&lt;li&gt;patch：对put的补充，对已有资源局部更新。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;12-输入url到显示页面的过程&#34;&gt;12 输入URL到显示页面的过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;首先需要找到这个url域名的服务器ip，首先会寻找缓存中的记录，如果没有则查找本地的hosts文件是否有记录，如果没有则进行下一步。&lt;/li&gt;
&lt;li&gt;DNS解析：首先，客户端通过发送DHCP请求报文获取网关路由器的IP地址，然后通过ARP协议获取网关路由器的MAC地址，接着向网关路由器发送DNS查询报文，到达DNS服务器后，在DNS数据库中查询域名解析后的IP地址。&lt;/li&gt;
&lt;li&gt;浏览器根据得到的IP地址及相应的端口号，构造一个HTTP请求报文，并将这个HTTP请求封装在一个TCP包中，依次经过传输层、网络层、数据链路层、物理层到达服务端，服务端解析这个请求来作出响应给浏览器。&lt;/li&gt;
&lt;li&gt;浏览器解析响应内容并渲染页面，结束连接。（DOM树和CSSOM树）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;13-websocket&#34;&gt;13 Websocket&lt;/h2&gt;
&lt;p&gt;WebSocket是HTML5中的协议，支持持久连续，http协议不支持持久性连接。Http1.0和HTTP1.1都不支持持久性的链接，HTTP1.1中的keep-alive，将多个http请求合并为1个。&lt;/p&gt;
&lt;p&gt;HTTP的生命周期通过Request来界定，也就是Request一个Response，那么在Http1.0协议中，这次Http请求就结束了。在Http1.1中进行了改进，有一个connection：Keep-alive，也就是说，在一个Http连接中，可以发送多个Request，接收多个Response。但是必须记住，在Http中一个Request只能对应有一个Response，而且这个Response是被动的，不能主动发起。&lt;/p&gt;
&lt;p&gt;WebSocket是基于Http协议的，或者说借用了Http协议来完成一部分握手，在握手阶段与Http是相同的。有2个相关的请求头，upgrade，connection。&lt;/p&gt;
&lt;p&gt;upgrade:websocket&lt;/p&gt;
&lt;p&gt;connection:upgrade&lt;/p&gt;
&lt;h2 id=&#34;14-bom对象&#34;&gt;14 BOM对象&lt;/h2&gt;
&lt;p&gt;浏览器对象，location、history和navigator&lt;/p&gt;
&lt;p&gt;常用属性和方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;history：go、back、forward&lt;/li&gt;
&lt;li&gt;navigator：userAgent、cookieEnabled&lt;/li&gt;
&lt;li&gt;location：
&lt;ol&gt;
&lt;li&gt;get类型：href、search、hash、host、hostname、pathname、port、protocal&lt;/li&gt;
&lt;li&gt;set类型：assgin（设置url）、replace（设置url，并且在history中移除）、reload&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;15-cors跨域请求的方式&#34;&gt;15 CORS跨域请求的方式&lt;/h2&gt;
&lt;p&gt;cors：跨域资源共享，客服了AJAX只能同源使用的限制。&lt;/p&gt;
&lt;p&gt;只要同时满足以下两大条件，就属于简单请求&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;请求方法为head、get、post之一&lt;/li&gt;
&lt;li&gt;请求头只有：Accepet、Accpet-Language、Content-Language、Last-Event-ID、Content-Type这五种，并且Content-type只有application/x-www-form-unlencoded、multipart/form-data、text/plain这三种。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于简单请求，浏览器直接发出CORS请求，在请求头加上Origin字段，用来说明来自哪个源，服务器根据这个值决定是否同意此次请求，同意则返回响应，响应头多出几个字段（以&lt;strong&gt;Access-Control-&lt;strong&gt;开头），否则返回一个正常的HTTP响应，但请求头&lt;/strong&gt;不包含Access-Control-Allow-Origin字段&lt;/strong&gt;，抛出一个错误。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;withCredentials属性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CORS请求默认不发送Cookie和HTTP认证信息，如果需要发送，一方面需要服务器同意，指定Access-Control-Allow-Credentials为True，另一方面ajax请求要设置withCredentials属性为true。此外，如果要发送Cookie，Access-Control-Allow-Origin就不能设置为星号，必须指定明确的、与明确网页一致的域名。同时，Cookie依然遵循同源政策。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;预检请求&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于复杂请求的CORS请求，会在正式通信前，增加一次HTTP查询请求，称为预检请求，浏览器先询问服务器，如果同意才会发出正式的XMLHttpRequest请求，否则就报错。&lt;/p&gt;
&lt;p&gt;预检请求用的请求方法为OPTIONS，请求头有Origin、Access-Control-Request-Method、Access-Control-Request-Headers这三个字段。&lt;/p&gt;
&lt;p&gt;一旦服务器通过了预检请求，以后每次浏览器正常的CORS请求，都跟正常请求一样，会有一个OrIgin请求头字段，服务器响应请求头会带有Access-Control-Allow-Origin。&lt;/p&gt;
&lt;h2 id=&#34;16-css盒模型&#34;&gt;16 CSS盒模型&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;标准盒模型：box-sizing：content-box；width=content&lt;/li&gt;
&lt;li&gt;IE盒模型：box-sizing：border-box；width=content+border+padding&lt;/li&gt;
&lt;li&gt;box-sizing：padding-box；width=content+padding&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;17-link标签和import标签的区别&#34;&gt;17 link标签和import标签的区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;link属于html标签，@import是css提供的。&lt;/li&gt;
&lt;li&gt;加载时机：页面加载时，link会同时加载，而@import引用的css会等到页面加载结束后加载。&lt;/li&gt;
&lt;li&gt;兼容性：@import只有IE5以上才支持。&lt;/li&gt;
&lt;li&gt;优先级：link大于@import&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;18-transition和animation的区别&#34;&gt;18 transition和animation的区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;大部分属性相同，都是随时间改变元素的属性值。&lt;/li&gt;
&lt;li&gt;transition需要触发一个事件才能改变属性，而animation不需要触发任何事件。&lt;/li&gt;
&lt;li&gt;transition为2帧，animation可以一帧一帧。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;19-flex布局&#34;&gt;19 Flex布局&lt;/h2&gt;
&lt;p&gt;弹性布局，用来为盒状模型提供最大的灵活性。&lt;/p&gt;
&lt;p&gt;划分：容器属性和元素属性&lt;/p&gt;
&lt;p&gt;容器属性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;flex-direction：主轴方向&lt;/li&gt;
&lt;li&gt;flex-wrap：换行规则&lt;/li&gt;
&lt;li&gt;flew-flow：上面两者结合。&lt;/li&gt;
&lt;li&gt;justify-content：主轴对齐方式&lt;/li&gt;
&lt;li&gt;align-items：交叉轴对齐方式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;元素属性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;order：排列顺序&lt;/li&gt;
&lt;li&gt;flex-glow：放大比例&lt;/li&gt;
&lt;li&gt;flex-shrink：缩小比例&lt;/li&gt;
&lt;li&gt;flex-basis：占据空间&lt;/li&gt;
&lt;li&gt;flex：上面三者的缩写&lt;/li&gt;
&lt;li&gt;align-self：允许元素与其它项目的对齐方式不一样，默认auto，继承父元素的align-item&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;20-bfc&#34;&gt;20 BFC&lt;/h2&gt;
&lt;p&gt;BFC：块级格式化上下文，用于清除浮动，防止margin重叠等&lt;/p&gt;
&lt;p&gt;BFC是页面上的一个独立容器，子元素不会影响到外面，计算BFC的高度时，浮动元素也会参与计算。&lt;/p&gt;
&lt;p&gt;会生成BFC的元素：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;float不为none的元素&lt;/li&gt;
&lt;li&gt;position为fixed和absolute的元素&lt;/li&gt;
&lt;li&gt;display为inline-block、table-cell、table-caption、flex、inline-flex的元素。&lt;/li&gt;
&lt;li&gt;overflow不为visible的元素&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;21-块元素和行元素&#34;&gt;21 块元素和行元素&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;块元素：独占一行，并且有自动填满父元素，可以设置margin和padding以及高度和宽度&lt;/li&gt;
&lt;li&gt;行元素：不会独占一行，width和height会失效，并且在垂直方向的padding和margin会失效。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;22-html5和css3的新元素&#34;&gt;22 HTML5和CSS3的新元素&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;HTML5新增元素：
&lt;ol&gt;
&lt;li&gt;新标签：8个语义标签（header、section、footer、aside、nav、main、article、figure）、mark高亮、progress进度、新表单控件(calendar、data、time、email、url、search)、新的input类型（color、date、datetime、datetime-local、email）&lt;/li&gt;
&lt;li&gt;canvas绘图，支持内联SVG，支持MathML&lt;/li&gt;
&lt;li&gt;多媒体：audio、video、source、embed track&lt;/li&gt;
&lt;li&gt;本地离线存储：manifest配置文件&lt;/li&gt;
&lt;li&gt;web存储：localStorage、SessionStorage&lt;/li&gt;
&lt;li&gt;其它：web worker、websocket&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;CSS3新元素
&lt;ol&gt;
&lt;li&gt;边框： border-radius、box-shadow&lt;/li&gt;
&lt;li&gt;背景：background-size、background-origin&lt;/li&gt;
&lt;li&gt;文本效果：text-shadow、word-wrap、word-break等&lt;/li&gt;
&lt;li&gt;2D/3D转换：transform&lt;/li&gt;
&lt;li&gt;动画：animation&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;23-重绘和重排&#34;&gt;23 重绘和重排&lt;/h2&gt;
&lt;p&gt;DOM的变化影响到了预算内宿的几何属性比如宽高，浏览器重新计算元素的几何属性，其他元素的几何属性也会受到影响，浏览器需要重新构造渲染树，这个过程称之为&lt;strong&gt;重排&lt;/strong&gt;，浏览器将受到影响的部分重新绘制在屏幕上的过程称为&lt;strong&gt;重绘&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;重绘和重排的原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;添加或删除可见的DOM元素&lt;/li&gt;
&lt;li&gt;元素尺寸位置的改变&lt;/li&gt;
&lt;li&gt;浏览器页面初始化&lt;/li&gt;
&lt;li&gt;浏览器窗口大小发生改变。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;重排一定导致重绘，重绘不一定导致重排。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;减少重排，提高性能的方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;元素的多次样式修改合并成一次修改。&lt;/li&gt;
&lt;li&gt;如需进行对DOM节点进行多次操作，先将其脱离文本流之后再进行多次操作。&lt;/li&gt;
&lt;li&gt;table布局的渲染与普通DOM节点的操作相比，性能消耗更大，如果可以，尽量减少table布局的使用。&lt;/li&gt;
&lt;li&gt;缓存常用的布局信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;24-闭包&#34;&gt;24 闭包&lt;/h2&gt;
&lt;p&gt;闭包：当一个嵌套的内部函数引用了外部函数的变量或者函数时，外部函数在执行时就产生了闭包。&lt;/p&gt;
&lt;p&gt;典型的闭包：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将函数作为灵一个函数的返回值&lt;/li&gt;
&lt;li&gt;将函数作为实参传给另一个函数调用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;闭包特点：函数嵌套函数，内部函数引用外部函数的变量。&lt;/p&gt;
&lt;p&gt;闭包的作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;延长外部函数局部变量的生命周期，可以用于实现计数器。&lt;/li&gt;
&lt;li&gt;可以形成变量的局部作用域，实现函数封装。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;闭包的缺点：函数定义的变量和数据会一直存在内存函数中，不会被及时释放，容易导致内存泄漏。&lt;/p&gt;
&lt;h2 id=&#34;25-类的创建和继承&#34;&gt;25 类的创建和继承&lt;/h2&gt;
&lt;p&gt;类的创建：new一个function，在这个function中的prototype里面添加属性和方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Animal&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//实例方法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sleep&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;正在睡觉!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//原型方法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;eat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;food&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;正在吃&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;food&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;类的继承：4种方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;原型链继承（new一个空对象，空对象指向Animal，缺点是无法多继承）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Cat&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构造继承（使用父亲的构造函数来增强子类实例，等于复制父亲的实例属性）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;优点：可以多继承&lt;/p&gt;
&lt;p&gt;缺点：只能继承实例属性和方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实例集成和拷贝继承：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实例继承：为父亲实例添加新特性，作为子类实例返回&lt;/li&gt;
&lt;li&gt;拷贝继承：拷贝父亲元素上的属性和方法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组合继承：构造继承和原型链继承的组合&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;constructor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过调用父类构造，继承父亲的属性并保留传参的优点，然后通过将父亲实例作为子类原型，实现函数复用。&lt;/p&gt;
&lt;p&gt;特点：可以继承实例属性，也可以继承原型属性&lt;/p&gt;
&lt;p&gt;缺点：调用了两次父类构造函数，生成了两份实例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;寄生组合继承：通过寄生方式，砍掉父亲的实例属性&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Super&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){};&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;Super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最常用的方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;26-promisegeneratorasyncawait&#34;&gt;26 promise、generator、async/await&lt;/h2&gt;
&lt;p&gt;promise：CommonJS工作组提出的一种规范，目的是为异步编程提供统一接口。每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。有三个状态：等待（pending）、已完成（resolved，又称fulfilled）、已拒绝（rejected）。promise必须实现then方法（可以说，then就是promise的核心），而且then必须返回一个promise，同一个promise的then可以调用多次，并且回调的执行顺序跟它们被定义时的顺序一致。then方法接受两个参数，第一个参数是成功时的回调，在promise由“等待”态转换到“完成”态时调用，另一个是失败时的回调，在promise由“等待”态转换到“拒绝”态时调用。同时，then可以接受另一个promise传入，也接受一个“类then”的对象或方法，即thenable对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用举例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)=&amp;gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;work&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&amp;gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&amp;gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;promise的用处&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解决了回调函数的回调地狱问题，有时候我们的请求需要上一个请求返回的结果，会造成相互间回调函数的嵌套，使得代码的可读性和维护性很低。&lt;/li&gt;
&lt;li&gt;让代码变得扁平，可读性更好，then返回一个promise，可以把then串起来，then返回的promise装载了由调用返回的值。&lt;/li&gt;
&lt;li&gt;在异步回调中，函数的执行栈与原函数分离开，导致外部无法抓住异常。在promise中我们可以使用reject捕获失败情况，和catch捕获执行异常。&lt;/li&gt;
&lt;li&gt;promise只不过是一种更良好的编程风格。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;promise的缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不设置回调函数，promise内部抛出的错误，无法返回到外部。&lt;/li&gt;
&lt;li&gt;处于pending状态时，无法得知进展到哪一个阶段。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;async和await：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;async函数返回一个promise对象，在没有await的情况下执行async函数，它会立即返回一个promise对象，并且，绝对不会注意后面语句的执行，await关键字只能用在aync定义的函数内； 
await 可以用于等待一个 async 函数的返回值，如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。async/await使得异步代码看起来像同步代码，使代码简洁，可读性更好，避免嵌套。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;27-事件流&#34;&gt;27 事件流&lt;/h2&gt;
&lt;p&gt;事件流：从页面接受事件的顺序，DOM2级事件流包括下面几个阶段&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;事件捕获阶段&lt;/li&gt;
&lt;li&gt;处于目标阶段&lt;/li&gt;
&lt;li&gt;事件冒泡阶段&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;addEventListener：DOM2级事件新增的指定事件处理程序的操作，这个方法接受三个参数，要处理的事件名，作为事件处理程序的函数和一个布尔值（true则在捕获阶段调用事件处理程序，否则在冒泡阶段调用）。IE只支持事件冒泡。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;addEventListener示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;op&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//do something
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;28-事件委托代理&#34;&gt;28 事件委托（代理）&lt;/h2&gt;
&lt;p&gt;事件委托：事件委托指的是，不在事件的发生地（直接dom）上设置监听函数，而是在其父元素上设置监听函数，通过事件冒泡，父元素可以监听到子元素上事件的触发，通过判断事件发生元素DOM的类型，来做出不同的响应。&lt;/p&gt;
&lt;p&gt;举例：最经典的就是ul和li标签的事件监听，比如我们在添加事件时候，采用事件委托机制，不会在li标签上直接添加，而是在ul父元素上添加。&lt;/p&gt;
&lt;p&gt;优点：比较合适动态元素的绑定，新添加的子元素也会有监听函数，也可以有事件触发机制。&lt;/p&gt;
&lt;h2 id=&#34;29-事件循环&#34;&gt;29 事件循环&lt;/h2&gt;
&lt;p&gt;事务队列中，在每一次事件循环中，宏任务只会提取一个执行，而微任务会一直提取，直到微任务队列为空为止。&lt;/p&gt;
&lt;p&gt;也就是说如果某个微任务任务被推入到执行中，那么当主线程任务执行完成后，会循环调用该队列任务中的下一个任务来执行，直到该任务队列到最后一个任务为止。而事件循环每次只会入栈一个宏任务,主线程执行完成该任务后又会检查微任务队列并完成里面的所有任务后再执行宏任务队列的任务。&lt;/p&gt;
&lt;p&gt;宏任务：setTimeOut、setInterval、setImmediate、IO、UI渲染、主JS、requestAnimationFrame等。&lt;/p&gt;
&lt;p&gt;微任务：process.nextTick、promise.then()，Object.observe()等&lt;/p&gt;
&lt;h2 id=&#34;30-图片懒加载和预加载&#34;&gt;30 图片懒加载和预加载&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;懒加载：迟缓加载甚至不加载。（减少服务器的压力）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实现方法：图片地址不放在src，而是放在其它属性，页面加载后，根据scrollTop判断图片是否在用户视野内，如果在，则将data-original属性中的值放在src。在滚动事件中重复判断图片是否进入视野。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;预加载：提前加载图片，当用户需要查看时直接从本地缓存中渲染。（会增大服务器的压力）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;CSS实现：background：url()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JS实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;xxx&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;31-new操作符&#34;&gt;31 new操作符&lt;/h2&gt;
&lt;p&gt;new操作符新建了一个空对象，这个对象原型指向构造函数的prototype，执行构造函数后返回这个对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;实现一个new的方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){...}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//var a = new Animal();
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myNew&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Constructor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;shifit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//绑定原型
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;__proto__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//调用构造函数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;object&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;32-bindapplycall的区别&#34;&gt;32 bind、apply、call的区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;apply和call用来改变函数的this指向，它们两个函数的第一个参数都是一样的，表示要改变指向的那个对象，第二个参数，apply中是数组，而call是arg1,arg2&amp;hellip;的形式。&lt;/li&gt;
&lt;li&gt;bind改变this作用域会返回一个新的函数，这个函数不会立即执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;33-节流和防抖&#34;&gt;33 节流和防抖&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;防抖：持续拖动滚动条，只要不停止触发，就永远不会有输出。短时间内触发的事件，在某个时间期限内，函数只执行一次。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;debounce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;clearTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;节流：持续拖动滚动条，每间隔一段时间，就会输出反馈。相当于&lt;strong&gt;技能冷却&lt;/strong&gt;，执行之后，函数会失效一段时间，冷却之后，又会恢复，设置一个状态位，判断是否处于工作状态。（在防抖基础上，到达指定事件必须输出）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;throttle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mustRun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;clearTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mustRun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;34-深拷贝&#34;&gt;34 深拷贝&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;简单深拷贝：JSON序列化和反序列化&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deepCopy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;__obj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;递归方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deepCopy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Object&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)){&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
                &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deepCopy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;constructor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;RegExp&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
                &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deepCopy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;35-对象属性改变监听-proxy&#34;&gt;35 对象属性改变监听-Proxy&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;receiver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
  	
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;36-变量提升和暂时性死区&#34;&gt;36 变量提升和暂时性死区&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;变量提升：var定义变量，变量可以在声明前使用，值为undefined；let不会出现这个情况。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;暂时性死区TDZ：只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等待变量声明的那一行代码出现，才可以获取和使用该变量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;只要块级作用域内存在let和const命令，它所声明的变量就会绑定这个区域，不再受外部影响。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;37-箭头函数&#34;&gt;37 箭头函数&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基本语法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//aka
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与普通函数的区别&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;箭头函数没有this，如果普通函数包含箭头函数，那么this访问的就是最近一层普通函数的this&lt;/li&gt;
&lt;li&gt;箭头函数是匿名函数，不能作为构造函数，不能使用new&lt;/li&gt;
&lt;li&gt;箭头函数没有自己的arguments参数，虽然有name属性但是是空字符串，用&amp;hellip;扩展运算符。&lt;/li&gt;
&lt;li&gt;箭头函数通过call()或apply()方法调用一个函数时，只传入了一个参数，对this并没有影响。&lt;/li&gt;
&lt;li&gt;箭头函数没有原型属性prototype&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;38-原型链&#34;&gt;38 原型链&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;原型：prototype，是一个对象，作用是共享属性和方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原型链：原型与原型层层连接的过程即为原型链&lt;/p&gt;
&lt;p&gt;假设B继承了A，b是B的实例，那么就有以下关系：&lt;/p&gt;
&lt;p&gt;（1）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;__proto__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;（2）B.prototype.constructor = B，A.prototype.constructor = A&lt;/p&gt;
&lt;p&gt;（3）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;__proto__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;A&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;（4）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;__proto__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;39-es6新特性&#34;&gt;39 ES6新特性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;let（解决了变量提升）、 const常量，块级作用域（暂时性死区）。&lt;/li&gt;
&lt;li&gt;模板字符串：“xxx${}”&lt;/li&gt;
&lt;li&gt;箭头函数&lt;/li&gt;
&lt;li&gt;对象，数组解构赋值&lt;/li&gt;
&lt;li&gt;for in和for of&lt;/li&gt;
&lt;li&gt;class类&lt;/li&gt;
&lt;li&gt;extend类继承&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;40-垂直居中的方法&#34;&gt;40 垂直居中的方法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;margin：auto，left、right、top、bottom全设为0&lt;/li&gt;
&lt;li&gt;display：flex，align-items:center，justify-content:center;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;41-前端性能优化&#34;&gt;41 前端性能优化&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;降低请求量：合并资源、减少HTTP请求数、minify/gzip压缩，webP，懒加载&lt;/li&gt;
&lt;li&gt;加快请求速度：预解析DNS、减少域名数、并行加载、CDN分发&lt;/li&gt;
&lt;li&gt;缓存：HTTP协议缓存请求、离线缓存manifest、离线数据缓存localStorage&lt;/li&gt;
&lt;li&gt;渲染：JS/CSS优化，加载顺序，服务端渲染，pipeline&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;42-get和post的区别&#34;&gt;42 get和post的区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;get参数通过url传递，post放在request body中&lt;/li&gt;
&lt;li&gt;get请求在url中传递的参数有长度限制，post没有&lt;/li&gt;
&lt;li&gt;get参数暴露在url，不安全。&lt;/li&gt;
&lt;li&gt;get请求只能进行url编码，post支持多种编码方式&lt;/li&gt;
&lt;li&gt;get请求浏览器会主动缓存。&lt;/li&gt;
&lt;li&gt;get请求参数会被完整保留在浏览历史记录。&lt;/li&gt;
&lt;li&gt;get用来获取资源，post用来增加或更新资源。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;43-web-worker&#34;&gt;43 web worker&lt;/h2&gt;
&lt;p&gt;在HTML页面中，如果在执行脚本时，页面的状态是不可响应的，直到脚本执行完成后，页面才变成可响应。web worker是运行在后台的js，独立于其他脚本，不会影响页面你的性能。并且通过postMessage将结果回传到主线程。这样在进行复杂操作的时候，就不会阻塞主线程了。&lt;/p&gt;
&lt;p&gt;如何创建web worker：&lt;/p&gt;
&lt;p&gt;检测浏览器对于web worker的支持性&lt;/p&gt;
&lt;p&gt;创建web worker文件（js，回传函数等）&lt;/p&gt;
&lt;p&gt;创建web worker对象&lt;/p&gt;
&lt;h2 id=&#34;44-浮动清除&#34;&gt;44 浮动清除&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;overflow:hidden/auto&lt;/li&gt;
&lt;li&gt;给浮动的元素的容器添加浮动&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;45-css选择器&#34;&gt;45 CSS选择器&lt;/h2&gt;
&lt;p&gt;ID选择器、Class选择器、标签选择器、伪元素选择器、伪类选择器&lt;/p&gt;
&lt;p&gt;优先级：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;引入了同类的选择器：排在后面的样式属性优先&lt;/li&gt;
&lt;li&gt;引入了不同的选择器：id&amp;gt;class&amp;gt;标签&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>计算机基础知识点总结</title>
        <link>https://cuterwrite.top/p/interview-help/</link>
        <pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/interview-help/</guid>
        <description>&lt;h1 id=&#34;一操作系统&#34;&gt;一、操作系统&lt;/h1&gt;
&lt;h2 id=&#34;1进程与线程的区别&#34;&gt;1、进程与线程的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;进程是对运行时程序的封装，是系统进行资源调度和分配的的基本单位，实现了操作系统的并发；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程是进程的子任务，是CPU调度和分派的基本单位，用于保证程序的 实时性，实现进程内部的并发；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个程序至少有一个进程，一个进程至少有一个线程，线程依赖于进程而存在；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程在执行过程中拥有独立的内存单元，而多个线程共享进程的内存。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2进程间的通信的几种方式&#34;&gt;2、&lt;strong&gt;进程间的通信的几种方式&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;管道（pipe）及命名管道（named pipe）：管道可用于具有亲缘关系的父子进程间的通信，有名管道除了具有管道所具有的功能外，它还允许无亲缘关系进程间的通信；&lt;/li&gt;
&lt;li&gt;信号（signal）：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；&lt;/li&gt;
&lt;li&gt;消息队列：消息队列是消息的链接表，它克服了上两种通信方式中信号量有限的缺点，具有写权限得进程可以按照一定得规则向消息队列中添加新信息；对消息队列有读权限得进程则可以从消息队列中读取信息；&lt;/li&gt;
&lt;li&gt;共享内存：可以说这是最有用的进程间通信方式。它使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据得更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等；&lt;/li&gt;
&lt;li&gt;信号量：主要作为进程之间及同一种进程的不同线程之间得同步和互斥手段；&lt;/li&gt;
&lt;li&gt;套接字：这是一种更为一般得进程间通信机制，它可用于网络中不同机器之间的进程间通信，应用非常广泛。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3线程同步的方式&#34;&gt;3、线程同步的方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;互斥量 Synchronized/Lock：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问&lt;/li&gt;
&lt;li&gt;信号量 Semphare：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量&lt;/li&gt;
&lt;li&gt;事件(信号)，Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4进程同步的方式&#34;&gt;4、进程同步的方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;临界区：对临界资源进行访问的那段代码称为临界区。为了互斥访问临界资源，每个进程在进入临界区之前，需要先进行检查。&lt;/li&gt;
&lt;li&gt;同步与互斥&lt;/li&gt;
&lt;li&gt;信号量&lt;/li&gt;
&lt;li&gt;管程：有一个重要特性：在一个时刻只能有一个进程使用管程。进程在无法继续执行的时候不能一直占用管程，否则其它进程永远不能使用管程。管程引入了   &lt;strong&gt;条件变量&lt;/strong&gt;   以及相关的操作：&lt;strong&gt;wait()&lt;/strong&gt; 和 &lt;strong&gt;signal()&lt;/strong&gt; 来实现同步操作。对条件变量执行 wait() 操作会导致调用进程阻塞，把管程让出来给另一个进程持有。signal() 操作用于唤醒被阻塞的进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5死锁&#34;&gt;5、死锁&lt;/h2&gt;
&lt;h3 id=&#34;1死锁的定义&#34;&gt;1、死锁的定义&lt;/h3&gt;
&lt;p&gt;在两个或者多个并发进程中，如果每个进程持有某种资源而又等待其它进程释放它或它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁。通俗的讲，就是两个或多个进程无限期的阻塞、相互等待的一种状态。&lt;/p&gt;
&lt;h3 id=&#34;2死锁必要条件&#34;&gt;2、死锁必要条件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;互斥：每个资源要么已经分配给了一个进程，要么就是可用的。&lt;/li&gt;
&lt;li&gt;占有和等待：已经得到了某个资源的进程可以再请求新的资源。&lt;/li&gt;
&lt;li&gt;不可抢占：已经分配给一个进程的资源不能强制性地被抢占，它只能被占有它的进程显式地释放。&lt;/li&gt;
&lt;li&gt;环路等待：有两个或者两个以上的进程组成一条环路，该环路中的每个进程都在等待下一个进程所占有的资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3死锁处理&#34;&gt;3、死锁处理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;鸵鸟策略：把头埋在沙子里，假装根本没发生问题。因为解决死锁问题的代价很高，因此鸵鸟策略这种不采取任务措施的方案会获得更高的性能。当发生死锁时不会对用户造成多大影响，或发生死锁的概率很低，可以采用鸵鸟策略。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;死锁检测与死锁恢复：不试图阻止死锁，而是当检测到死锁发生时，采取措施进行恢复。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每种类型一个资源的死锁检测：通过检测有向图是否存在环来实现，从一个节点出发进行深度优先搜索，对访问过的节点进行标记，如果访问了已经标记的节点，就表示有向图存在环，也就是检测到死锁的发生。&lt;/li&gt;
&lt;li&gt;每种类型多个资源的死锁检测：每个进程最开始时都不被标记，执行过程有可能被标记。当算法结束时，任何没有被标记的进程都是死锁进程。
&lt;ol&gt;
&lt;li&gt;寻找一个没有标记的进程 P&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;，它所请求的资源小于等于 A。&lt;/li&gt;
&lt;li&gt;如果找到了这样一个进程，那么将 C 矩阵的第 i 行向量加到 A 中，标记该进程，并转回 1。&lt;/li&gt;
&lt;li&gt;如果没有这样一个进程，算法终止。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;死锁恢复：在&lt;strong&gt;程序运行&lt;/strong&gt;之前预防发生死锁。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;破坏互斥条件&lt;/li&gt;
&lt;li&gt;破坏占有和等待条件&lt;/li&gt;
&lt;li&gt;破坏不可抢占条件&lt;/li&gt;
&lt;li&gt;破坏环路等待条件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;死锁避免：在&lt;strong&gt;程序运行&lt;/strong&gt;时避免发生死锁。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安全状态：如果没有死锁发生，并且即使所有进程突然请求对资源的最大需求，也仍然存在某种调度次序能够使得每一个进程运行完毕，则称该状态是安全的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;银行家算法：检查一个状态是否安全的算法如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查找右边的矩阵是否存在一行小于等于向量 A。如果不存在这样的行，那么系统将会发生死锁，状态是不安全的。&lt;/li&gt;
&lt;li&gt;假若找到这样一行，将该进程标记为终止，并将其已分配资源加到 A 中。&lt;/li&gt;
&lt;li&gt;重复以上两步，直到所有进程都标记为终止，则状态是安全的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果一个状态不是安全的，需要拒绝进入这个状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6进程的状态&#34;&gt;6、进程的状态&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ready&lt;/li&gt;
&lt;li&gt;running&lt;/li&gt;
&lt;li&gt;waiting&lt;/li&gt;
&lt;li&gt;只有ready和running可以相互转换，其它都是单向转换。就绪状态的进程通过调度算法从而获得 CPU 时间，转为运行状态；而运行状态的进程，在分配给它的 CPU 时间片用完之后就会转为就绪状态，等待下一次调度。&lt;/li&gt;
&lt;li&gt;阻塞状态是缺少需要的资源从running状态转换而来，但是该资源不包括CPU时间，缺少CPU时间会从running变成ready。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7进程调度算法&#34;&gt;7、进程调度算法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;先来先服务 first-come first-serverd（FCFS）：非抢占式的调度算法，按照请求的顺序进行调度。有利于长作业，但不利于短作业，因为短作业必须一直等待前面的长作业执行完毕才能执行，而长作业又需要执行很长时间，造成了短作业等待时间过长。&lt;/li&gt;
&lt;li&gt;短作业优先 shortest job first（SJF）：非抢占式的调度算法，按估计运行时间最短的顺序进行调度。长作业有可能会饿死，处于一直等待短作业执行完毕的状态。因为如果一直有短作业到来，那么长作业永远得不到调度。&lt;/li&gt;
&lt;li&gt;最短剩余时间优先 shortest remaining time next（SRTN）：最短作业优先的抢占式版本，按剩余运行时间的顺序进行调度。 当一个新的作业到达时，其整个运行时间与当前进程的剩余时间作比较。如果新的进程需要的时间更少，则挂起当前进程，运行新的进程。否则新的进程等待。&lt;/li&gt;
&lt;li&gt;时间片轮转：将所有就绪进程按 FCFS 的原则排成一个队列，每次调度时，把 CPU 时间分配给队首进程，该进程可以执行一个时间片。当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把 CPU 时间分配给队首的进程。&lt;/li&gt;
&lt;li&gt;优先级调度：每个进程分配一个优先级，按优先级进行调度。为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。&lt;/li&gt;
&lt;li&gt;多级反馈队列：可以将这种调度算法看成是时间片轮转调度算法和优先级调度算法的结合。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8虚拟内存&#34;&gt;8、虚拟内存&lt;/h2&gt;
&lt;p&gt;虚拟内存的目的是为了让物理内存扩充成更大的逻辑内存，从而让程序获得更多的可用内存。&lt;/p&gt;
&lt;p&gt;为了更好的管理内存，操作系统将内存抽象成地址空间。每个程序拥有自己的地址空间，这个地址空间被分割成多个块，每一块称为一页。这些页被映射到物理内存，但不需要映射到连续的物理内存，也不需要所有页都必须在物理内存中。当程序引用到不在物理内存中的页时，由硬件执行必要的映射，将缺失的部分装入物理内存并重新执行失败的指令。&lt;/p&gt;
&lt;h2 id=&#34;9页面置换算法&#34;&gt;9、页面置换算法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OPT&lt;/li&gt;
&lt;li&gt;LRU&lt;/li&gt;
&lt;li&gt;LFU&lt;/li&gt;
&lt;li&gt;FIFO&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;10分页与分段的区别&#34;&gt;10、分页与分段的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对程序员的透明性：分页透明，但是分段需要程序员显式划分每个段。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;地址空间的维度：分页是一维地址空间，分段是二维的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大小是否可以改变：页的大小不可变，段的大小可以动态改变。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;出现的原因：分页主要用于实现虚拟内存，从而获得更大的地址空间；分段主要是为了使程序和数据可以被划分为逻辑上独立的地址空间并且有助于共享和保护。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;二计算机网络&#34;&gt;二、计算机网络&lt;/h1&gt;
&lt;h2 id=&#34;1计算机网络体系结构&#34;&gt;1、计算机网络体系结构&lt;/h2&gt;
&lt;h3 id=&#34;1五层协议&#34;&gt;1、五层协议&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;应用层&lt;/li&gt;
&lt;li&gt;运输层&lt;/li&gt;
&lt;li&gt;网络层&lt;/li&gt;
&lt;li&gt;数据链路层&lt;/li&gt;
&lt;li&gt;物理层&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2osi七层协议&#34;&gt;2、OSI七层协议&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;应用层：&lt;strong&gt;为特定应用程序提供数据传输服务&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;表示层：数据压缩、加密以及数据描述&lt;/li&gt;
&lt;li&gt;会话层：建立和管理回话&lt;/li&gt;
&lt;li&gt;运输层：提供的是&lt;strong&gt;进程间的通用数据传输服务&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;网络层：&lt;strong&gt;为主机间提供数据传输服务&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;数据链路层：主机之间可以有很多链路，链路层协议就是为同一链路的节点提供服务。数据链路层把网络层传来的&lt;strong&gt;分组封装成帧&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;物理层：&lt;strong&gt;尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2udp和tcp的特点&#34;&gt;2、UDP和TCP的特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。&lt;/li&gt;
&lt;li&gt;传输控制协议 TCP（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3udp首部格式&#34;&gt;3、UDP首部格式&lt;/h2&gt;
&lt;p&gt;首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。12 字节的伪首部是为了计算检验和临时添加的。&lt;/p&gt;
&lt;h2 id=&#34;4tcp首部格式&#34;&gt;4、TCP首部格式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;序号&lt;/strong&gt;   ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确认号&lt;/strong&gt;   ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据偏移&lt;/strong&gt;   ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确认 ACK&lt;/strong&gt;   ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;同步 SYN&lt;/strong&gt;   ：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;终止 FIN&lt;/strong&gt;   ：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;窗口&lt;/strong&gt;   ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5tcp三次握手&#34;&gt;5、TCP三次握手&lt;/h2&gt;
&lt;p&gt;假设 A 为客户端，B 为服务器端。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。&lt;/li&gt;
&lt;li&gt;A 向 B 发送连接请求报文，SYN=1，ACK=0，选择一个初始的序号 x。&lt;/li&gt;
&lt;li&gt;B 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 y。&lt;/li&gt;
&lt;li&gt;A 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。&lt;/li&gt;
&lt;li&gt;B 收到 A 的确认后，连接建立。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;三次握手的原因&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。&lt;/p&gt;
&lt;p&gt;客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务器端发回的连接确认。客户端等待一个超时重传时间之后，就会重新请求连接。但是这个滞留的连接请求最后还是会到达服务器，如果不进行三次握手，那么服务器就会打开两个连接。如果有第三次握手，客户端会忽略服务器之后发送的对滞留连接请求的连接确认，不进行第三次握手，因此就不会再次打开连接。&lt;/p&gt;
&lt;h2 id=&#34;6tcp四次挥手&#34;&gt;6、TCP四次挥手&lt;/h2&gt;
&lt;p&gt;以下描述不讨论序号和确认号，因为序号和确认号的规则比较简单。并且不讨论 ACK，因为 ACK 在连接建立之后都为 1。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A 发送连接释放报文，FIN=1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当 B 不再需要连接时，发送连接释放报文，FIN=1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B 收到 A 的确认后释放连接。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;四次挥手的原因&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TIME_WAIT&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;客户端接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间 2MSL。这么做有两个理由：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保最后一个确认报文能够到达。如果 B 没收到 A 发送来的确认报文，那么就会重新发送连接释放请求报文，A 等待一段时间就是为了处理这种情况的发生。&lt;/li&gt;
&lt;li&gt;等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7tcp可靠传输&#34;&gt;7、TCP可靠传输&lt;/h2&gt;
&lt;p&gt;TCP 使用超时重传来实现可靠传输：如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。&lt;/p&gt;
&lt;h2 id=&#34;8tcp滑动窗口&#34;&gt;8、TCP滑动窗口&lt;/h2&gt;
&lt;p&gt;窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。&lt;/p&gt;
&lt;p&gt;发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。&lt;/p&gt;
&lt;p&gt;接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {34, 35} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。&lt;/p&gt;
&lt;h2 id=&#34;9tcp-流量控制&#34;&gt;9、TCP 流量控制&lt;/h2&gt;
&lt;p&gt;流量控制是为了控制发送方发送速率，保证接收方来得及接收。&lt;/p&gt;
&lt;p&gt;接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。&lt;/p&gt;
&lt;h2 id=&#34;10tcp-拥塞控制&#34;&gt;10、TCP 拥塞控制&lt;/h2&gt;
&lt;p&gt;如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。&lt;/p&gt;
&lt;p&gt;TCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。&lt;/p&gt;
&lt;p&gt;发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。&lt;/p&gt;
&lt;p&gt;为了便于讨论，做如下假设：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收方有足够大的接收缓存，因此不会发生流量控制；&lt;/li&gt;
&lt;li&gt;虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;1、慢开始与拥塞避免&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;发送的最初执行慢开始，令 cwnd = 1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 &amp;hellip;&lt;/p&gt;
&lt;p&gt;注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。设置一个慢开始门限 ssthresh，当 cwnd &amp;gt;= ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。&lt;/p&gt;
&lt;p&gt;如果出现了超时，则令 ssthresh = cwnd / 2，然后重新执行慢开始。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、快重传与快恢复&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在接收方，要求每次接收到报文段都应该对最后一个已收到的有序报文段进行确认。例如已经接收到 M&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 和 M&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;，此时收到 M&lt;!-- raw HTML omitted --&gt;4&lt;!-- raw HTML omitted --&gt;，应当发送对 M&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; 的确认。&lt;/p&gt;
&lt;p&gt;在发送方，如果收到三个重复确认，那么可以知道下一个报文段丢失，此时执行快重传，立即重传下一个报文段。例如收到三个 M&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;，则 M&lt;!-- raw HTML omitted --&gt;3&lt;!-- raw HTML omitted --&gt; 丢失，立即重传 M&lt;!-- raw HTML omitted --&gt;3&lt;!-- raw HTML omitted --&gt;。&lt;/p&gt;
&lt;p&gt;在这种情况下，只是丢失个别报文段，而不是网络拥塞。因此执行快恢复，令 ssthresh = cwnd / 2 ，cwnd = ssthresh，注意到此时直接进入拥塞避免。&lt;/p&gt;
&lt;p&gt;慢开始和快恢复的快慢指的是 cwnd 的设定值，而不是 cwnd 的增长速率。慢开始 cwnd 设定为 1，而快恢复 cwnd 设定为 ssthresh。&lt;/p&gt;
&lt;h2 id=&#34;11域名系统&#34;&gt;11、域名系统&lt;/h2&gt;
&lt;p&gt;DNS 是一个分布式数据库，提供了主机名和 IP 地址之间相互转换的服务。这里的分布式数据库是指，每个站点只保留它自己的那部分数据。&lt;/p&gt;
&lt;p&gt;域名具有层次结构，从上到下依次为：根域名、顶级域名、二级域名。&lt;/p&gt;
&lt;p&gt;DNS 可以使用 UDP 或者 TCP 进行传输，使用的端口号都为 53。大多数情况下 DNS 使用 UDP 进行传输，这就要求域名解析器和域名服务器都必须自己处理超时和重传从而保证可靠性。在两种情况下会使用 TCP 进行传输：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果返回的响应超过的 512 字节（UDP 最大只支持 512 字节的数据）。&lt;/li&gt;
&lt;li&gt;区域传送（区域传送是主域名服务器向辅助域名服务器传送变化的那部分数据）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12ftp协议&#34;&gt;12、FTP协议&lt;/h2&gt;
&lt;p&gt;FTP 使用 TCP 进行连接，它需要两个连接来传送一个文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控制连接：服务器打开端口号 21 等待客户端的连接，客户端主动建立连接后，使用这个连接将客户端的命令传送给服务器，并传回服务器的应答。&lt;/li&gt;
&lt;li&gt;数据连接：用来传送一个文件数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据数据连接是否是服务器端主动建立，FTP 有主动和被动两种模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主动模式：服务器端主动建立数据连接，其中服务器端的端口号为 20，客户端的端口号随机，但是必须大于 1024，因为 0~1023 是熟知端口号。&lt;/li&gt;
&lt;li&gt;被动模式：客户端主动建立数据连接，其中客户端的端口号由客户端自己指定，服务器端的端口号随机。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主动模式要求客户端开放端口号给服务器端，需要去配置客户端的防火墙。被动模式只需要服务器端开放端口号即可，无需客户端配置防火墙。但是被动模式会导致服务器端的安全性减弱，因为开放了过多的端口号。&lt;/p&gt;
&lt;h2 id=&#34;13dhcp协议&#34;&gt;13、DHCP协议&lt;/h2&gt;
&lt;p&gt;DHCP (Dynamic Host Configuration Protocol) 提供了即插即用的连网方式，用户不再需要手动配置 IP 地址等信息。&lt;/p&gt;
&lt;p&gt;DHCP 配置的内容不仅是 IP 地址，还包括子网掩码、网关 IP 地址。&lt;/p&gt;
&lt;p&gt;DHCP 工作过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端发送 Discover 报文，该报文的目的地址为 255.255.255.255:67，源地址为 0.0.0.0:68，被放入 UDP 中，该报文被广播到同一个子网的所有主机上。如果客户端和 DHCP 服务器不在同一个子网，就需要使用中继代理。&lt;/li&gt;
&lt;li&gt;DHCP 服务器收到 Discover 报文之后，发送 Offer 报文给客户端，该报文包含了客户端所需要的信息。因为客户端可能收到多个 DHCP 服务器提供的信息，因此客户端需要进行选择。&lt;/li&gt;
&lt;li&gt;如果客户端选择了某个 DHCP 服务器提供的信息，那么就发送 Request 报文给该 DHCP 服务器。&lt;/li&gt;
&lt;li&gt;DHCP 服务器发送 Ack 报文，表示客户端此时可以使用提供给它的信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;14ssh协议&#34;&gt;14、SSH协议&lt;/h2&gt;
&lt;p&gt;TELNET 用于登录到远程主机上，并且远程主机上的输出也会返回。&lt;/p&gt;
&lt;p&gt;TELNET 可以适应许多计算机和操作系统的差异，例如不同操作系统系统的换行符定义。&lt;/p&gt;
&lt;h2 id=&#34;15smtp协议&#34;&gt;15、SMTP协议&lt;/h2&gt;
&lt;p&gt;一个电子邮件系统由三部分组成：用户代理、邮件服务器以及邮件协议。&lt;/p&gt;
&lt;p&gt;邮件协议包含发送协议和读取协议，发送协议常用 SMTP，读取协议常用 POP3 和 IMAP。&lt;/p&gt;
&lt;p&gt;SMTP 只能发送 ASCII 码，而互联网邮件扩充 MIME 可以发送二进制文件。MIME 并没有改动或者取代 SMTP，而是增加邮件主体的结构，定义了非 ASCII 码的编码规则。&lt;/p&gt;
&lt;p&gt;POP3 的特点是只要用户从服务器上读取了邮件，就把该邮件删除。但最新版本的 POP3 可以不删除邮件。&lt;/p&gt;
&lt;p&gt;IMAP 协议中客户端和服务器上的邮件保持同步，如果不手动删除邮件，那么服务器上的邮件也不会被删除。IMAP 这种做法可以让用户随时随地去访问服务器上的邮件。&lt;/p&gt;
&lt;h2 id=&#34;16web页面请求过程&#34;&gt;16、Web页面请求过程&lt;/h2&gt;
&lt;h3 id=&#34;1-dhcp-配置主机信息&#34;&gt;1. DHCP 配置主机信息&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;假设主机最开始没有 IP 地址以及其它信息，那么就需要先使用 DHCP 来获取。&lt;/li&gt;
&lt;li&gt;主机生成一个 DHCP 请求报文，并将这个报文放入具有目的端口 67 和源端口 68 的 UDP 报文段中。&lt;/li&gt;
&lt;li&gt;该报文段则被放入在一个具有广播 IP 目的地址(255.255.255.255) 和源 IP 地址（0.0.0.0）的 IP 数据报中。&lt;/li&gt;
&lt;li&gt;该数据报则被放置在 MAC 帧中，该帧具有目的地址 FF:&amp;lt;zero-width space&amp;gt;FF:&amp;lt;zero-width space&amp;gt;FF:&amp;lt;zero-width space&amp;gt;FF:&amp;lt;zero-width space&amp;gt;FF:FF，将广播到与交换机连接的所有设备。&lt;/li&gt;
&lt;li&gt;连接在交换机的 DHCP 服务器收到广播帧之后，不断地向上分解得到 IP 数据报、UDP 报文段、DHCP 请求报文，之后生成 DHCP ACK 报文，该报文包含以下信息：IP 地址、DNS 服务器的 IP 地址、默认网关路由器的 IP 地址和子网掩码。该报文被放入 UDP 报文段中，UDP 报文段有被放入 IP 数据报中，最后放入 MAC 帧中。&lt;/li&gt;
&lt;li&gt;该帧的目的地址是请求主机的 MAC 地址，因为交换机具有自学习能力，之前主机发送了广播帧之后就记录了 MAC 地址到其转发接口的交换表项，因此现在交换机就可以直接知道应该向哪个接口发送该帧。&lt;/li&gt;
&lt;li&gt;主机收到该帧后，不断分解得到 DHCP 报文。之后就配置它的 IP 地址、子网掩码和 DNS 服务器的 IP 地址，并在其 IP 转发表中安装默认网关。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-arp-解析-mac-地址&#34;&gt;2. ARP 解析 MAC 地址&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;主机通过浏览器生成一个 TCP 套接字，套接字向 HTTP 服务器发送 HTTP 请求。为了生成该套接字，主机需要知道网站的域名对应的 IP 地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主机生成一个 DNS 查询报文，该报文具有 53 号端口，因为 DNS 服务器的端口号是 53。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;该 DNS 查询报文被放入目的地址为 DNS 服务器 IP 地址的 IP 数据报中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;该 IP 数据报被放入一个以太网帧中，该帧将发送到网关路由器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DHCP 过程只知道网关路由器的 IP 地址，为了获取网关路由器的 MAC 地址，需要使用 ARP 协议。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主机生成一个包含目的地址为网关路由器 IP 地址的 ARP 查询报文，将该 ARP 查询报文放入一个具有广播目的地址（FF:&amp;lt;zero-width space&amp;gt;FF:&amp;lt;zero-width space&amp;gt;FF:&amp;lt;zero-width space&amp;gt;FF:&amp;lt;zero-width space&amp;gt;FF:FF）的以太网帧中，并向交换机发送该以太网帧，交换机将该帧转发给所有的连接设备，包括网关路由器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网关路由器接收到该帧后，不断向上分解得到 ARP 报文，发现其中的 IP 地址与其接口的 IP 地址匹配，因此就发送一个 ARP 回答报文，包含了它的 MAC 地址，发回给主机。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-dns-解析域名&#34;&gt;3. DNS 解析域名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;知道了网关路由器的 MAC 地址之后，就可以继续 DNS 的解析过程了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网关路由器接收到包含 DNS 查询报文的以太网帧后，抽取出 IP 数据报，并根据转发表决定该 IP 数据报应该转发的路由器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为路由器具有内部网关协议（RIP、OSPF）和外部网关协议（BGP）这两种路由选择协议，因此路由表中已经配置了网关路由器到达 DNS 服务器的路由表项。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;到达 DNS 服务器之后，DNS 服务器抽取出 DNS 查询报文，并在 DNS 数据库中查找待解析的域名。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找到 DNS 记录之后，发送 DNS 回答报文，将该回答报文放入 UDP 报文段中，然后放入 IP 数据报中，通过路由器反向转发回网关路由器，并经过以太网交换机到达主机。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-http-请求页面&#34;&gt;4. HTTP 请求页面&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;有了 HTTP 服务器的 IP 地址之后，主机就能够生成 TCP 套接字，该套接字将用于向 Web 服务器发送 HTTP GET 报文。&lt;/li&gt;
&lt;li&gt;在生成 TCP 套接字之前，必须先与 HTTP 服务器进行三次握手来建立连接。生成一个具有目的端口 80 的 TCP SYN 报文段，并向 HTTP 服务器发送该报文段。&lt;/li&gt;
&lt;li&gt;HTTP 服务器收到该报文段之后，生成 TCP SYN ACK 报文段，发回给主机。&lt;/li&gt;
&lt;li&gt;连接建立之后，浏览器生成 HTTP GET 报文，并交付给 HTTP 服务器。&lt;/li&gt;
&lt;li&gt;HTTP 服务器从 TCP 套接字读取 HTTP GET 报文，生成一个 HTTP 响应报文，将 Web 页面内容放入报文主体中，发回给主机。&lt;/li&gt;
&lt;li&gt;浏览器收到 HTTP 响应报文后，抽取出 Web 页面内容，之后进行渲染，显示 Web 页面。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;（以下内容等待更新）&lt;/p&gt;
&lt;h1 id=&#34;三数据库原理&#34;&gt;三、数据库原理&lt;/h1&gt;
&lt;h1 id=&#34;四数据结构与算法&#34;&gt;四、数据结构与算法&lt;/h1&gt;
&lt;h1 id=&#34;五java&#34;&gt;五、JAVA&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;本文转载自：https://github.com/CyC2018/CS-Notes，用于个人复习。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>自动上传脚本测试</title>
        <link>https://cuterwrite.top/p/update-util/</link>
        <pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/update-util/</guid>
        <description>&lt;p&gt;测试&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Redis入门</title>
        <link>https://cuterwrite.top/p/redis-1/</link>
        <pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/redis-1/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1------&#34; &gt;1、命令返回值&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-----&#34; &gt;2、多数据库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-----&#34; &gt;3、命令大全&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-----&#34; &gt;1、通用命令&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#keys-pattern&#34; &gt;keys pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#exists-key&#34; &gt;exists key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#del-key&#34; &gt;del key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#type-key&#34; &gt;type key&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2------&#34; &gt;2、字符串类型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#--&#34; &gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#set-key-value---get-key&#34; &gt;set key value / get key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#incr-key&#34; &gt;incr key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#incrby-key-increment&#34; &gt;incrby key increment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#decr-key&#34; &gt;decr key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#decrby-key-decrement&#34; &gt;decrby key decrement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#incrbyfloat-key-increment&#34; &gt;incrbyfloat key increment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#append-key-value&#34; &gt;append key value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#strlen-key&#34; &gt;strlen key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#mget-key---mset-key1-value1-&#34; &gt;mget key / mset key1 value1 &amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#---&#34; &gt;位操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#----&#34; &gt;使用场景&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-hash--&#34; &gt;3、hash类型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#---1&#34; &gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#hset-key-field-value&#34; &gt;hset key field value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#hget-key-field&#34; &gt;hget key field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#hmset-key-field-value&#34; &gt;hmset key field value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#hmget-key-field&#34; &gt;hmget key field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#hgetall-key&#34; &gt;hgetall key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#hexists-key-field&#34; &gt;hexists key field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#hsetnx-key-field-value&#34; &gt;hsetnx key field value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#hincrby-key-field-increment&#34; &gt;hincrby key field increment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#hdel-key-field&#34; &gt;hdel key field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#----&#34; &gt;其他命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#-----1&#34; &gt;使用场景&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-list--&#34; &gt;4、list类型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#---2&#34; &gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#lpush-key-value1&#34; &gt;lpush key value1&amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#rpush-key-value1&#34; &gt;rpush key value1&amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#lpop-key&#34; &gt;lpop key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#rpop-key&#34; &gt;rpop key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#llen-key&#34; &gt;llen key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#lrange-key-start-stop&#34; &gt;lrange key start stop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#lrem-key-count-value&#34; &gt;lrem key count value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#lindex-key-index&#34; &gt;lindex key index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#lset-key-index-value&#34; &gt;lset key index value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#ltrim-key-start-end&#34; &gt;ltrim key start end&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#linsert-key-before-after-pivot-value&#34; &gt;linsert key before|after pivot value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#rpoplpush-source-destination&#34; &gt;rpoplpush source destination&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#-----2&#34; &gt;使用场景&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5-set--&#34; &gt;5、set类型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#---3&#34; &gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sadd-key-member&#34; &gt;sadd key member&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#srem-key-member&#34; &gt;srem key member&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#smembers&#34; &gt;smembers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sismember-key-member&#34; &gt;sismember key member&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sdiff-key1-key2-&#34; &gt;sdiff key1 key2 &amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sinter-key1-key2&#34; &gt;sinter key1 key2&amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sunion-key1-key2&#34; &gt;sunion key1 key2&amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#scard-key&#34; &gt;scard key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sdiffstore-sinterstore-sunionstore-destination-key1-key2&#34; &gt;sdiffstore/sinterstore/sunionstore destination key1 key2&amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#srandmember-key-count&#34; &gt;srandmember key count&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#spop&#34; &gt;spop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#-----3&#34; &gt;使用场景&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6-zset--&#34; &gt;6、zset类型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#---4&#34; &gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zadd-key-score-member&#34; &gt;zadd key score member&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zscore-key-member&#34; &gt;zscore key member&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zrange-key-start-stop--withscores-&#34; &gt;zrange key start stop [withscores]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zrangebyscore-key-min-max--withscores--limit-offset-count&#34; &gt;zrangebyscore key min max [withscores] limit offset count&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zrevrangebyscore-key-max-min--withscores--limit-offset-count&#34; &gt;zrevrangebyscore key max min [withscores] limit offset count&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zincrby-key-increment-member&#34; &gt;zincrby key increment member&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zcard-key&#34; &gt;zcard key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zcount-key-min-max&#34; &gt;zcount key min max&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zrem-key-member1-&#34; &gt;zrem key member1 &amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zremrangebyranke-key-start-stop&#34; &gt;zremrangebyranke key start stop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zremrangebyscore-key-min-max&#34; &gt;zremrangebyscore key min max&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zrank-key-member&#34; &gt;zrank key member&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zrevrank-key-member&#34; &gt;zrevrank key member&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1命令返回值&#34;&gt;1、命令返回值&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;状态回复
&lt;ul&gt;
&lt;li&gt;OK：成功&lt;/li&gt;
&lt;li&gt;PONG：响应PING&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;错误回复：命令不存在或者命令格式有误
&lt;ul&gt;
&lt;li&gt;Error Unknown command&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;整数回复：
&lt;ul&gt;
&lt;li&gt;INCR命令：返回递增后的键值&lt;/li&gt;
&lt;li&gt;DBSIZE命令：返回键的数量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符串回复：
&lt;ul&gt;
&lt;li&gt;请求键的值或者请求一个其他类型键中的某个元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多行字符串回复：
&lt;ul&gt;
&lt;li&gt;请求非字符串类型键的元素列表&lt;/li&gt;
&lt;li&gt;Keys (Pattern)：返回数据库中符合指定规则的键名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2多数据库&#34;&gt;2、多数据库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一个Redis实例提供了多个用来存储数据的字典，客户端可以指定数据存储在哪个字典中。&lt;/li&gt;
&lt;li&gt;数据库默认从0开始递增命名，默认支持16个数据库（DB0，DB1，&amp;hellip;，DB15）&lt;/li&gt;
&lt;li&gt;不支持自定义数据库名字，也不支持单独设置访问密码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3命令大全&#34;&gt;3、命令大全&lt;/h2&gt;
&lt;h3 id=&#34;1通用命令&#34;&gt;1、通用命令&lt;/h3&gt;
&lt;h4 id=&#34;keys-pattern&#34;&gt;keys pattern&lt;/h4&gt;
&lt;p&gt;获得符合规则的键名列表，支持？、*、[]、\x四种通配符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;keys命令会遍历所有键，不建议在生产环境中使用&lt;/li&gt;
&lt;li&gt;命令不区分大小写&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;exists-key&#34;&gt;exists key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;如果键存在返回1，否则返回0&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;del-key&#34;&gt;del key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;删除一个或多个键，返回删除的键的个数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;type-key&#34;&gt;type key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;获得键值的数据类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2字符串类型&#34;&gt;2、字符串类型&lt;/h3&gt;
&lt;h4 id=&#34;简介&#34;&gt;简介&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;字符串类型是Redis中最基本的数据类型，它能存储任何形式的字符串，包括二进制数据，可以存储邮箱、JSON、或者一张图片，允许存储的最大容量是512MB&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;set-key-value--get-key&#34;&gt;set key value / get key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;赋值与取值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;incr-key&#34;&gt;incr key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;递增数字，让当前键值递增，并返回递增后的值&lt;/li&gt;
&lt;li&gt;如果key不存在时会默认键值为0&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;incrby-key-increment&#34;&gt;incrby key increment&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;增加指定的整数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;decr-key&#34;&gt;decr key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;同上&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;decrby-key-decrement&#34;&gt;decrby key decrement&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;同上&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;incrbyfloat-key-increment&#34;&gt;incrbyfloat key increment&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;增加指定浮点数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;append-key-value&#34;&gt;append key value&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;尾部追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;strlen-key&#34;&gt;strlen key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;字符串长度&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mget-key--mset-key1-value1-&#34;&gt;mget key / mset key1 value1 &amp;hellip;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;同时获取/设置多个键值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;位操作&#34;&gt;位操作&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;getbit key offset&lt;/li&gt;
&lt;li&gt;setbit key offset value&lt;/li&gt;
&lt;li&gt;bitcount key&lt;/li&gt;
&lt;li&gt;bittop&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;使用场景&#34;&gt;使用场景&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;文章访问量统计：为每篇文章使用一个名为post:文h章ID:page.view的键来记录文章的访问量，每次访问文章的时候使用incr命令。（键命名建议：“对象类型：对象ID：对象属性”）&lt;/li&gt;
&lt;li&gt;生成自增ID：对于每一类对象使用名为对象类型：count的键来存储当前类型对象的数量（如users:count），每次新增一个对象时都使用incr命令，返回值就是该新增对象的ID。&lt;/li&gt;
&lt;li&gt;存储文章数据：JSON存储&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3hash类型&#34;&gt;3、hash类型&lt;/h3&gt;
&lt;h4 id=&#34;简介-1&#34;&gt;简介&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;散列类型适合存储对象：使用对象类别和ID构成键名，使用字段表示属性，字段值则存储属性值。一个键最多存2^32 - 1个元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hset-key-field-value&#34;&gt;hset key field value&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;hset car price 500&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hget-key-field&#34;&gt;hget key field&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;hget car price&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hmset-key-field-value&#34;&gt;hmset key field value&lt;/h4&gt;
&lt;h4 id=&#34;hmget-key-field&#34;&gt;hmget key field&lt;/h4&gt;
&lt;h4 id=&#34;hgetall-key&#34;&gt;hgetall key&lt;/h4&gt;
&lt;h4 id=&#34;hexists-key-field&#34;&gt;hexists key field&lt;/h4&gt;
&lt;h4 id=&#34;hsetnx-key-field-value&#34;&gt;hsetnx key field value&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当字段不存在时赋值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原子操作，线程安全&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hincrby-key-field-increment&#34;&gt;hincrby key field increment&lt;/h4&gt;
&lt;h4 id=&#34;hdel-key-field&#34;&gt;hdel key field&lt;/h4&gt;
&lt;h4 id=&#34;其他命令&#34;&gt;其他命令&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;hkeys&lt;/li&gt;
&lt;li&gt;hvals&lt;/li&gt;
&lt;li&gt;hlen&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;使用场景-1&#34;&gt;使用场景&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;存储文章数据&lt;/li&gt;
&lt;li&gt;存储文章缩略名：使用slug.to.id的键来存储文章缩略名和ID之间的映射关系。这样就可以用hexists判断缩略名是否存在，使用hget命令来获取缩略名对应的文章ID&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;4list类型&#34;&gt;4、list类型&lt;/h3&gt;
&lt;h4 id=&#34;简介-2&#34;&gt;简介&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;可以存储一个有序的字符串列表，常用操作是向列表两端添加元素&lt;/li&gt;
&lt;li&gt;底层：双向链表，添加复杂度O（1）&lt;/li&gt;
&lt;li&gt;适用场景：只关心最新的内容&lt;/li&gt;
&lt;li&gt;一个键最多存2^32 - 1个元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;lpush-key-value1&#34;&gt;lpush key value1&amp;hellip;&lt;/h4&gt;
&lt;h4 id=&#34;rpush-key-value1&#34;&gt;rpush key value1&amp;hellip;&lt;/h4&gt;
&lt;h4 id=&#34;lpop-key&#34;&gt;lpop key&lt;/h4&gt;
&lt;h4 id=&#34;rpop-key&#34;&gt;rpop key&lt;/h4&gt;
&lt;h4 id=&#34;llen-key&#34;&gt;llen key&lt;/h4&gt;
&lt;h4 id=&#34;lrange-key-start-stop&#34;&gt;lrange key start stop&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;获取列表片段（两边都是闭区间）&lt;/li&gt;
&lt;li&gt;支持负索引（与python类似）&lt;/li&gt;
&lt;li&gt;0，-1会返回所有元素&lt;/li&gt;
&lt;li&gt;start &amp;gt; stop：返回空&lt;/li&gt;
&lt;li&gt;stop &amp;gt; len：返回start,start + len&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;lrem-key-count-value&#34;&gt;lrem key count value&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;删除列表中前count个值为value的元素，返回值是实际删除的元素个数&lt;/li&gt;
&lt;li&gt;count&amp;gt;0时，从列表左边开始删除&lt;/li&gt;
&lt;li&gt;count&amp;lt;0时，从列表右边开始删除&lt;/li&gt;
&lt;li&gt;count=0时，删除所有&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;lindex-key-index&#34;&gt;lindex key index&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;索引取值，支持负数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;lset-key-index-value&#34;&gt;lset key index value&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;索引赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ltrim-key-start-end&#34;&gt;ltrim key start end&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;删除指定索引外的全部值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;linsert-key-beforeafter-pivot-value&#34;&gt;linsert key before|after pivot value&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;首先查找pivot，然后插入其前面或后面&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;rpoplpush-source-destination&#34;&gt;rpoplpush source destination&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;将一个元素转到另一个列表&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;使用场景-2&#34;&gt;使用场景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;存储文章ID列表&lt;/li&gt;
&lt;li&gt;存储评论列表&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5set类型&#34;&gt;5、set类型&lt;/h3&gt;
&lt;h4 id=&#34;简介-3&#34;&gt;简介&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;无序、唯一&lt;/li&gt;
&lt;li&gt;最多2^32 - 1个元素&lt;/li&gt;
&lt;li&gt;常用操作：插入、删除、判断某个元素是否存在、交集、并集、差集&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sadd-key-member&#34;&gt;sadd key member&lt;/h4&gt;
&lt;h4 id=&#34;srem-key-member&#34;&gt;srem key member&lt;/h4&gt;
&lt;h4 id=&#34;smembers&#34;&gt;smembers&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;返回所有元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sismember-key-member&#34;&gt;sismember key member&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;判断元素是否在集合中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;O（1）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sdiff-key1-key2-&#34;&gt;sdiff key1 key2 &amp;hellip;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;求差集（ key1 - key2）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sinter-key1-key2&#34;&gt;sinter key1 key2&amp;hellip;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;求交集&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sunion-key1-key2&#34;&gt;sunion key1 key2&amp;hellip;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;求并集&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;scard-key&#34;&gt;scard key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;获取元素个数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sdiffstoresinterstoresunionstore-destination-key1-key2&#34;&gt;sdiffstore/sinterstore/sunionstore destination key1 key2&amp;hellip;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;存储集合操作的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;srandmember-key-count&#34;&gt;srandmember key count&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;count&amp;gt;0时，获取不重复的随机count个元素&lt;/li&gt;
&lt;li&gt;count&amp;lt;0时，获取可能重复的随机count个元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;spop&#34;&gt;spop&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;随机选择一个元素弹出&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;使用场景-3&#34;&gt;使用场景&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;存储文章标签&lt;/li&gt;
&lt;li&gt;通过标签搜索文章&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;6zset类型&#34;&gt;6、zset类型&lt;/h3&gt;
&lt;h4 id=&#34;简介-4&#34;&gt;简介&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;有序&lt;/li&gt;
&lt;li&gt;唯一&lt;/li&gt;
&lt;li&gt;可以获取某一范围的袁旭&lt;/li&gt;
&lt;li&gt;底层：散列表和跳表，读取速度为O(logn)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zadd-key-score-member&#34;&gt;zadd key score member&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;支持整数、双精度浮点数，甚至-inf和+inf&lt;/li&gt;
&lt;li&gt;可以修改score&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zscore-key-member&#34;&gt;zscore key member&lt;/h4&gt;
&lt;h4 id=&#34;zrange-key-start-stop-withscores&#34;&gt;zrange key start stop [withscores]&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;获得排名在某个范围的元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以添加分数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;复杂度为O(logn + m)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zrangebyscore-key-min-max-withscores-limit-offset-count&#34;&gt;zrangebyscore key min max [withscores] limit offset count&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;获得指定分数范围的元素，两边是闭区间&lt;/li&gt;
&lt;li&gt;支持inf&lt;/li&gt;
&lt;li&gt;数字前添加左圆括号表示开区间&lt;/li&gt;
&lt;li&gt;可以用limit限制返回的个数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zrevrangebyscore-key-max-min-withscores-limit-offset-count&#34;&gt;zrevrangebyscore key max min [withscores] limit offset count&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;同上，改成降序&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zincrby-key-increment-member&#34;&gt;zincrby key increment member&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;增加某个元素的分数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zcard-key&#34;&gt;zcard key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;元素数量&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zcount-key-min-max&#34;&gt;zcount key min max&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;分数范围内个数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zrem-key-member1-&#34;&gt;zrem key member1 &amp;hellip;&lt;/h4&gt;
&lt;h4 id=&#34;zremrangebyranke-key-start-stop&#34;&gt;zremrangebyranke key start stop&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;根据排名范围删除元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zremrangebyscore-key-min-max&#34;&gt;zremrangebyscore key min max&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;根据分数范围删除元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zrank-key-member&#34;&gt;zrank key member&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;获取元素排名&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zrevrank-key-member&#34;&gt;zrevrank key member&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;降序排名&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Spring Cloud Alibaba笔记</title>
        <link>https://cuterwrite.top/p/spring-cloud-alibaba-1/</link>
        <pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/spring-cloud-alibaba-1/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#spring-cloud-alibaba--&#34; &gt;Spring Cloud alibaba笔记&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#soa--------&#34; &gt;SOA与微服务的区别：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#spring-cloud-alibaba-spring-cloud-netflix---&#34; &gt;Spring Cloud Alibaba与Spring Cloud Netflix的对比&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#---spring-boot-&#34; &gt;什么是Spring Boot？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#ioc-di-----------&#34; &gt;IOC/DI（控制反转与依赖注入）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#spring----&#34; &gt;Spring发展过程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#-------&#34; &gt;自动装配的实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#------starter&#34; &gt;手写实现一个Starter&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-starter---&#34; &gt;1 Starter的功能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-starter-----&#34; &gt;2 Starter的命名规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-----redis-starter&#34; &gt;3 实现基于Redis的Starter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#apache-dubbo&#34; &gt;Apache Dubbo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#zookeeper&#34; &gt;Zookeeper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#dubbo--zookeeper&#34; &gt;Dubbo集成Zookeeper&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1--------&#34; &gt;1 需要解决的问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-----&#34; &gt;2 实现步骤&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3---&#34; &gt;3 原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4---dubbo-spring-cloud&#34; &gt;4 实战Dubbo Spring Cloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#dubbo-----&#34; &gt;Dubbo的高级应用&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-----&#34; &gt;1 集群容错&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-----&#34; &gt;2 负载均衡&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-----&#34; &gt;3 服务降级&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#------&#34; &gt;主机绑定规则&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#dubbo----&#34; &gt;Dubbo源码分析&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1----&#34; &gt;1 核心点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2---ide-----&#34; &gt;2 生成IDE工程的命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-spi-service-provider-interface-&#34; &gt;3 SPI(Service Provider Interface)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-dubbo--spi--&#34; &gt;4 Dubbo中的SPI思想&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5-dubbo--spi--&#34; &gt;5 Dubbo中的SPI原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6-------&#34; &gt;6 自适应扩展点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#7-protocol--------&#34; &gt;7 Protocol自适应扩展点源码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#8-ioc&#34; &gt;8 IOC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#9-aop&#34; &gt;9 AOP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#10-dubbo--spring-----&#34; &gt;10 Dubbo集成Spring机制（略）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#---nacos-&#34; &gt;什么是Nacos？&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-----&#34; &gt;1 关键特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-nacos--&#34; &gt;2 Nacos集群&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#--nacos--------&#34; &gt;搭建Nacos注册中心的注意点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#nacos----&#34; &gt;Nacos实现原理&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-----&#34; &gt;1 模块组成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2--------&#34; &gt;2 注册中心的原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-nacos-----&#34; &gt;3 Nacos源码（略）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#nacos--------&#34; &gt;Nacos实现统一配置管理&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-nacos--spring-boot&#34; &gt;1 Nacos集成Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-nacos--spring-cloud&#34; &gt;2 Nacos集成Spring Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-------&#34; &gt;3 动态更新配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4---dataid--yaml------&#34; &gt;4 基于DataID配置yaml的文件扩展名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5----------&#34; &gt;5 不同环境的配置切换&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6----namespace-group&#34; &gt;6 自定义Namespace和Group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#nacos-config-------&#34; &gt;Nacos Config实现原理（略）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#spring-cloud----------&#34; &gt;Spring Cloud加载配置的原理（略）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#nacos-----&#34; &gt;Nacos源码（略）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sentinel-----&#34; &gt;Sentinel限流及熔断&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-----------&#34; &gt;1 服务限流的作用及实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2--------&#34; &gt;2 服务熔断和降级&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-sentinel---&#34; &gt;3 Sentinel的特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-sentinel----&#34; &gt;4 Sentinel的组成：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5-sentinel-----&#34; &gt;5 Sentinel基本应用：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6-sentinel------&#34; &gt;6 Sentinel资源保护规则&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-qps------&#34; &gt;1 QPS流量控制行为&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#7-sentinel------&#34; &gt;7 Sentinel实现服务熔断&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sentinel--spring-cloud&#34; &gt;Sentinel集成Spring Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#--sentinel-dashboard-------&#34; &gt;基于Sentinel Dashboard来实现流控配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sentinel---url----&#34; &gt;Sentinel自定义URL限流异常&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sentinel-url----&#34; &gt;Sentinel对URL资源清洗&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sentinel--nacos--------&#34; &gt;Sentinel集成Nacos实现动态流控规则&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sentinel--nacos------&#34; &gt;Sentinel集成Nacos实现规则同步&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-sentinel-dashboard-----&#34; &gt;1 Sentinel Dashboard源码修改：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-sentinel-dashboard----&#34; &gt;2 Sentinel Dashboard规则同步&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sentinel--dubbo----&#34; &gt;Sentinel集成Dubbo实现限流&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-dubbo----sentinel-dashboard&#34; &gt;1 Dubbo服务接入Sentinel Dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-dubbo------&#34; &gt;2 Dubbo服务限流规则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sentinel----&#34; &gt;Sentinel热点限流&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1----------&#34; &gt;1 热点参数限流的使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2--sentinelresource&#34; &gt;2 @SentinelResource&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3---------&#34; &gt;3 热点参数规则说明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sentinel--------&#34; &gt;Sentinel的工作原理（略）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#spring-cloud-sentinel-------&#34; &gt;Spring Cloud Sentinel工作原理（略）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#sentinel---------&#34; &gt;Sentinel核心源码分析（略）&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1--------&#34; &gt;1 限流的源码实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2---------&#34; &gt;2 实时指标数据统计&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3----------&#34; &gt;3 服务降级的实现原理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#---------&#34; &gt;什么是分布式事务？&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-------------&#34; &gt;1 分布式事务问题的理论模型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-x-open-----&#34; &gt;1 X/Open分布式模型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2--------&#34; &gt;2 两阶段提交协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3--------&#34; &gt;3 三阶段提交协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-cap---base--&#34; &gt;4 CAP定理和BASE理论&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2---------------&#34; &gt;2 分布式事务问题的常见解决方案&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-tcc-----&#34; &gt;1 TCC补偿性方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2--------------------&#34; &gt;2 &lt;strong&gt;基于可靠性消息的最终一致性方案&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3--------&#34; &gt;3 最大努力通知型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3--------seata&#34; &gt;3 分布式事务框架Seata&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-at--&#34; &gt;1 AT模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-saga--&#34; &gt;2 Saga模式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;spring-cloud-alibaba笔记&#34;&gt;Spring Cloud alibaba笔记&lt;/h1&gt;
&lt;h2 id=&#34;soa与微服务的区别&#34;&gt;SOA与微服务的区别：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;SOA关注的是服务的重用性及解决信息孤岛问题&lt;/li&gt;
&lt;li&gt;微服务关注的是解耦，虽然解耦和可重用性从特定的角度来看是一样的，但本质上是有区别的，解耦是降低业务之间的耦合度，而重用性关注的是服务的复用。&lt;/li&gt;
&lt;li&gt;微服务会更多地关注在DevOps的持续交付上，因为服务粒度细化之后使得开发运维变得更加重要，因此微服务与容器化技术的结合更加紧密。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;spring-cloud-alibaba与spring-cloud-netflix的对比&#34;&gt;Spring Cloud Alibaba与Spring Cloud Netflix的对比&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Alibaba开源组件在没有织入Spring Cloud生态之前，已经在各大公司广泛应用，所以容易实现技术整合及迁移。&lt;/li&gt;
&lt;li&gt;Alibaba开源组件在服务治理上和处理高并发的能力上有天然的优势。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;什么是spring-boot&#34;&gt;什么是Spring Boot？&lt;/h2&gt;
&lt;p&gt;帮助开发者快速构建一个基于Spring Framework及Spring生态体系的应用解决方案，也是对于“约定优于配置”理念的最佳实践。&lt;/p&gt;
&lt;h2 id=&#34;iocdi控制反转与依赖注入&#34;&gt;IOC/DI（控制反转与依赖注入）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;IOC：把对象的生命周期托管到Spring容器中，而反转是指对象的获取方式被反转了。&lt;/li&gt;
&lt;li&gt;当使用IOC容器之后，客户端类不需要通过new来创建这些对象，而是直接从IOC容器中获得。早期的Spring中，主要通过XML的方式来定义Bean，Spring会解析XML文件，把定义的Bean转载到IOC容器中。&lt;/li&gt;
&lt;li&gt;DI：IOC容器在运行期间，动态地把某种依赖关系注入组件中。&lt;/li&gt;
&lt;li&gt;DI的三种方法：接口注入、构造方法注入、setter方法注入；目前是基于注解的形式：有@Autowired、@Inject和@Resource&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;spring发展过程&#34;&gt;Spring发展过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;J2EE的EJB时代&lt;/li&gt;
&lt;li&gt;Spring XML配置文件时代&lt;/li&gt;
&lt;li&gt;JavaConfig的无配置化注入时代&lt;/li&gt;
&lt;li&gt;Spring Boot时代：约定优于配置，核心为：
&lt;ol&gt;
&lt;li&gt;Starter组件：开箱即用&lt;/li&gt;
&lt;li&gt;自动装配：自动根据上下文完成Bean的装配&lt;/li&gt;
&lt;li&gt;Actuator：应用监控&lt;/li&gt;
&lt;li&gt;Spring Boot CLI：脚手架&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;自动装配的实现&#34;&gt;自动装配的实现&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;实现原理：@EnableAutoConfiguration，这个注解的声明在启动类注解@SpringBootApplication内。进一步又涉及到@Enable注解（本质上是对@Configuration和@Bean的封装）；使用Enable注解后，Spring会解析到@Import导入的配置类，从而根据这个配置类中的描述来实现Bean的装配。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子：可以直接使用@Autowired来注入redisTemplate实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EnableAutoConfiguration的原理&lt;/p&gt;
&lt;p&gt;@Import：导入一个AutoConfigurationImportSelector类。&lt;/p&gt;
&lt;p&gt;@AutoConfigurationPackage：把使用了该注解的类所在的类所在的包及子包下所有组件扫描到Spring IoC容器中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AutoConfigurationImportSelector：是ImportSelector的实现类，只有一个selectImports抽象方法，并且返回一个String数组，在这个数组中可以指定需要装配到IOC容器的类，当@Import中导入一个ImportSelectord的实现类后，会把该实现类中返回的Class名称都装载到IOC容器中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ImportSelector与@Configuration的区别：前者可以实现批量装配，并且还可以通过逻辑处理来实现Bean的选择性装配，也就是根据上下文来决定哪些类能够被IOC容器初始化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动装配原理总结：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过@Import(AutoConfigurationImportSelector)实现配置类的导入&lt;/li&gt;
&lt;li&gt;AutoConfigurationImportSelector类实现了ImportSelector接口，重写了方法selectImports，用于实现选择性批量配置类的装配。&lt;/li&gt;
&lt;li&gt;通过Spring提供的SpringFactoriesLoader机制，扫描classpath路径下的META-INF/spring.factories，读取需要实现自动装配的配置类。&lt;/li&gt;
&lt;li&gt;通过条件筛选的方式，把不符合条件的配置类移除，最终完成自动装配。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@Conditional条件装配&lt;/p&gt;
&lt;p&gt;是Spring Framework提供的一个核心注解，这个注解的作用是提供自动装配的条件约束，一般与@Configuration和**@Bean**配合使用。&lt;/p&gt;
&lt;p&gt;简单来说，Spring在解析@Configuration配置类时，如果该配置类增加了@Conditional注解，那么就会根据该注解配置的条件来决定是否要实现Bean的装配。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Configuration&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ConditionConfig&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
   	
 &lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;
 &lt;span class=&#34;nd&#34;&gt;@Conditional&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GpCondition&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ThirdClass&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;thirdClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ThirdClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;表示：如果GpCondition类中的matches返回true，则装载ThirdClass这个类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@Conditional在Spring Boot中的扩展&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210224200015800.png&#34; alt=&#34;image-20210224200015800&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;常用装配注解：&lt;/p&gt;
&lt;p&gt;@ConditionalOnBean&lt;/p&gt;
&lt;p&gt;@ConditionalOnMissingBean&lt;/p&gt;
&lt;p&gt;@ConditionalOnResource&lt;/p&gt;
&lt;p&gt;@ConditionalOnProperties&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;spring-autoconfigure-metadata&lt;/p&gt;
&lt;p&gt;用于实现批量自动装配条件配置，作用和@Conditional一致，只是把这些条件配置放在了配置文件中。&lt;/p&gt;
&lt;p&gt;两个条件：&lt;/p&gt;
&lt;p&gt;（1）配置文件的路径和名称必须是/META-INF/spring-autoconfigure-metadata.properties&lt;/p&gt;
&lt;p&gt;（2）配置文件中key的配置格式：自动配置类的类全路径名.条件=值&lt;/p&gt;
&lt;p&gt;好处：有效降低Spring Boot的启动时间，通过这种过滤方式可以减少配置类的加载数量，因为这个过滤发生在配置类的装载之前，所以它可以降低Spring Boot启动时装载Bean的耗时。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;手写实现一个starter&#34;&gt;手写实现一个Starter&lt;/h2&gt;
&lt;h3 id=&#34;1-starter的功能&#34;&gt;1 Starter的功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;涉及相关组件的Jar包依赖&lt;/li&gt;
&lt;li&gt;自动实现Bean的装配&lt;/li&gt;
&lt;li&gt;自动声明并且加载application.properties文件中的属性配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-starter的命名规范&#34;&gt;2 Starter的命名规范&lt;/h3&gt;
&lt;p&gt;Starter的命名主要分为官方命名和自定义组件命名两类，这种命名格式不是强制性的，也是一种约定俗成的方式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官方命名格式：spring-boot-starter-模块名称&lt;/li&gt;
&lt;li&gt;自定义命名格式：模块名称-spring-boot-starter&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-实现基于redis的starter&#34;&gt;3 实现基于Redis的Starter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;创建一个工程，命名为redis-spring-boot-starter&lt;/li&gt;
&lt;li&gt;添加Jar包依赖&lt;/li&gt;
&lt;li&gt;定义属性类，实现在application.properties中配置Redis的连接参数，使用@ConfigurationProperties，把当前类中的属性和配置文件中的配置进行绑定，并且规定前缀。&lt;/li&gt;
&lt;li&gt;定义需要自动装配的配置类，主要就是把RedissonClient装配到IOC容器中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;apache-dubbo&#34;&gt;Apache Dubbo&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;什么是Dubbo：一个分布式服务框架，主要实现多个系统之间的高性能、透明化调用，简单来说就是一个RPC框架，但是和普通的RPC框架不同，它提供了服务治理功能，比如服务注册、监控、路由、容错等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务提供者开发流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个普通的Maven工程provider，并创建两个模块：api和provider，其中provider是一个Spring Boot工程&lt;/li&gt;
&lt;li&gt;在api模块中定义接口，并且通过mvn install安装到本地仓库&lt;/li&gt;
&lt;li&gt;在provider模块的pom文件中引入api和dubbo组件。&lt;/li&gt;
&lt;li&gt;在provider中实现接口，并且使用@DubboService注解发布服务&lt;/li&gt;
&lt;li&gt;在application.properties文件（或yml）中添加Dubbo服务的配置信息，包括application.name、protocal.name、protocol.port和registry.address&lt;/li&gt;
&lt;li&gt;启动Spring Boot&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务调用者的开发流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个Spring Boot项目consumer，添加Jar包依赖（Dubbo和api）&lt;/li&gt;
&lt;li&gt;在application.properties中配置dubbo.application.name&lt;/li&gt;
&lt;li&gt;使用@DubboReference注解获取一个远程代理对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;zookeeper&#34;&gt;Zookeeper&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Zookeeper是一个高性能的分布式协调中间件，基于Java编写。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zookeeper的数据结构：数据模型和分布式文件系统类似，是一种层次化的属性结构，区别是：Zookeeper的数据是结构化存储的，并没有在物理上体现出文件和目录。Zookeeper树中的每个节点被称为Znode，Znode维护了一个stat状态信息，其中包含数据变化的时间和版本等。并且每个Znode可以设置一个value值，Zookeeper并不用于通用的数据库或者大容量的对象存储，它只是管理和协调有关的数据，所以value的数据大小不建议设置得非常大，否则会带来更大的网络开销。Zookeeper上的每一个节点的数据都是允许读和写的，读表示指定获得Znode上的value数据，写表示修改Znode上的value数据。另外，节点的创建规则和文件系统中文件的创建规则类似，必须按照层次创建。例如：创建/node/node1/node1-1，先要创建/node/node1这两个层次节点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zookeeper的特性：Znode在被创建后，需要指定节点的类型，节点类型分为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225003640228.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Watcher机制：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Znode的订阅/通知机制：当Znode节点状态发生变化时或者Zookeeper客户端连接状态发生变化时，会触发事件通知。这个机制在服务注册与发现中，针对服务调用者及时感知到服务提供者的变化提供了非常好的解决方案。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zookeeper提供的Java API中，提供了三种机制来针对Znode进行注册监听，分别是：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225003945831.png&#34; alt=&#34;image-20210225003945831&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常用应用场景分析&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;分布式锁：（1）多线程中Synchronized和Lock用于解决共享资源访问的数据安全性问题，但范围是线程级别的。（2）在分布式架构中，多个进程对同一个共享资源的访问，也存在数据安全性问题，因此也需要使用锁的形式来解决这类问题，而解决分布式环境下多进程对于共享资源访问带来的安全性问题的方案就是使用分布式锁。锁的本质是排他性，也就是避免同一时刻多个进程同时访问某一个共享资源。（3）如果使用Zookeeper实现分布式锁来达到排他性的目的，只需要用到节点的特性：临时节点，以及同级节点的唯一性。（4）具体实现：a.获得锁的过程：所有客户端可以去Zookeeper服务器上/Exclusive_Locks节点下创建一个临时节点/lock。Zookeeper基于同级节点的唯一性，会保证所有客户端中只有一个客户端能创建成功，创建成功的客户端获得了排它锁，没有获得锁的客户端就需要通过Watcher机制监听/Exclusive_Locks节点下子节点的变更事件，用于实时监听/lock节点的变化情况以作出反应。 b.释放锁的过程：①获得锁的客户端因为异常断开了和服务端的连接，临时节点会自动删除。②获得锁的客户端执行完业务逻辑后，主动删除创建的lock节点。&lt;/li&gt;
&lt;li&gt;Master选举：分布式系统中的集群模式，某一机器宕机后，其他节点会接替故障节点继续工作。（1）Zookeeper有两种方式来实现Master选举的场景。假设集群中有3个节点，需要选举出Master，那么三个节点同时去Zookeeper服务器上创建一个临时节点/master-election，由于节点的唯一性，只会有一个客户端创建成功，创建成功就称为Master。同时，其他没有创建成功的客户端，针对该节点注册Watcher事件，监控master，一旦/master-election节点被删除，其他客户端重新发起master选举。（2）方法二：利用临时有序节点的特性来实现。所有参与选举的节点在/master节点下创建一个临时有序节点，编号最小的节点表示master，后续的节点监听上一个节点的删除事件，用于触发重新选举。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;dubbo集成zookeeper&#34;&gt;Dubbo集成Zookeeper&lt;/h2&gt;
&lt;h3 id=&#34;1-需要解决的问题&#34;&gt;1 需要解决的问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;服务动态上下线感知：服务调用者要感知到服务提供者上下线的变化。&lt;/li&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-实现步骤&#34;&gt;2 实现步骤&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在provider模块中添加Zookeeper相关依赖&lt;/li&gt;
&lt;li&gt;修改application.properties配置文件，修改dubbo的registry-addr为zookeeper服务器的地址，表示当前Dubbo服务需要注册到Zookeeper上。&lt;/li&gt;
&lt;li&gt;consumer只需要修改application.properties，设置dubbo的registry-addr即可&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3-原理&#34;&gt;3 原理&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Dubbo服务注册到Zookeeper上之后，可以在Zookeeper服务器上看到图下所示的树形结构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225005911001.png&#34; alt=&#34;image-20210225005911001&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其中URL是临时节点，其他皆为持久化节点，如果注册该节点的服务器下线了，那么这个服务器的URL地址就会被移除。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当Dubbo服务消费者启动时，会对/providers下的子节点注册Watcher监听，这样就可以感知到服务提供方的上下线变化，从而防止请求发送到已经下线的服务器造成访问失败。同时，服务消费者会在/consumers下写入自己的URL，这样可以在监控平台上看到某个Dubbo服务正在被哪些服务调用。最重要的是，如果服务消费者需要调用一个服务，那么它会先去/providers路径下获得所有该服务的提供方URL列表，然后通过负载均衡算法计算出一个地址进行远程访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此外，Dubbo还可以针对不同的情况实现以下功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于临时节点的特性，当服务器宕机或者下线时，注册中心会自动删除该服务提供者的信息。&lt;/li&gt;
&lt;li&gt;注册中心重启时，Dubbo能自动恢复注册数据及订阅请求。&lt;/li&gt;
&lt;li&gt;为了保证节点操作的安全性，Zookeeper提供了ACL权限控制，在Dubbo中可以通过register.username和password来设置节点的验证信息。&lt;/li&gt;
&lt;li&gt;注册中心默认的根节点为/dubbo，如果需要针对不同环境设置不同的根节点，可以使用registry.group修改根节点名称。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;4-实战dubbo-spring-cloud&#34;&gt;4 实战Dubbo Spring Cloud&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;创建service-provider工程，创建两个子模块api和provider，前者为maven工程，后者为Spring Boot工程&lt;/li&gt;
&lt;li&gt;在api中声明接口，并执行mvn install&lt;/li&gt;
&lt;li&gt;在provider中添加api、Spring Boot、Spring Cloud和Spring Cloud Alibaba相关组件的依赖。（包括spring-cloud-starter、spring-cloud-starter-dubbo、api、discovery）&lt;/li&gt;
&lt;li&gt;在父pom中显示声明dependencyManagement配置版本。&lt;/li&gt;
&lt;li&gt;在provider中创建接口的实现类，并且声明@DubboService&lt;/li&gt;
&lt;li&gt;在application.properties中配置Dubbo相关信息。&lt;/li&gt;
&lt;li&gt;启动provider服务。&lt;/li&gt;
&lt;li&gt;创建consumer，依赖与provider类似，同样在application.properties中配置Dubbo相关信息。注意：dubbo-cloud-subscribed-services表示服务调用者订阅的服务提供方的应用名称列表，如果有多个应用名称，可以通过&amp;quot;,&amp;ldquo;分开，默认值为“*”&lt;/li&gt;
&lt;li&gt;使用@DubboReference消费服务，启动即可。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;dubbo的高级应用&#34;&gt;Dubbo的高级应用&lt;/h2&gt;
&lt;h3 id=&#34;1-集群容错&#34;&gt;1 集群容错&lt;/h3&gt;
&lt;p&gt;Dubbo默认提供6种容错模式，默认为Failover Cluster，此外可以根据实际需求自行扩展。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225012015079.png&#34; alt=&#34;image-20210225012015079&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225012046078.png&#34; alt=&#34;image-20210225012046078&#34;  /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置方式：在@DubboService中增加参数cluster=&amp;ldquo;failfast&amp;quot;即可。&lt;/li&gt;
&lt;li&gt;推荐：查询语句容错策略建议使用默认的Failover Cluster，而增删改操作建议使用Failfast Cluster或者使用Failover Cluster(retries=0)，防止出现数据重复添加等其他问题！建议在设计接口的时候把查询接口方法单独做成一个接口提供查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-负载均衡&#34;&gt;2 负载均衡&lt;/h3&gt;
&lt;p&gt;Dubbo提供了4种负载均衡策略，默认为random，也可以自行扩展（基于SPI机制）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225012419926.png&#34; alt=&#34;image-20210225012419926&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-服务降级&#34;&gt;3 服务降级&lt;/h3&gt;
&lt;p&gt;服务降级是一种系统保护策略，当服务器访问压力较大时，可以根据当前业务情况对不重要的服务进行降级，以保证核心业务的正常运行。所谓的降级，就是把一些非必要的功能在流量较大的时间段暂时关闭，比如在双十一大促时，淘宝会把查看历史订单、商品评论等功能关闭。&lt;/p&gt;
&lt;p&gt;降级的分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是否自动化：人工降级、自动降级&lt;/li&gt;
&lt;li&gt;功能划分：读服务降级和写服务降级&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自动降级更多来自于系统出现某些异常时自动触发“兜底的流畅”，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;故障降级：调用的远程服务挂了，网络故障或者RPC服务返回异常。这类情况在业务情况下可以通过设置兜底数据响应给客户端。&lt;/li&gt;
&lt;li&gt;限流降级：为了保护系统不被压垮，在系统中会针对核心业务进行限流，当请求流量达到阈值时，后续的请求会被拦截。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dubbo提供了一种Mock配置来实现服务降级，也就是当服务提供方出现网络异常无法访问时，客户端不抛出异常，步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在consumer中创建MockService，这个类只需要实现降级的接口即可，重写接口中的抽象方法实现本地数据的返回。&lt;/li&gt;
&lt;li&gt;在@DubboReference中增加mock参数，制定MockService的位置。&lt;/li&gt;
&lt;li&gt;在不启动Dubbo服务或者服务端的返回值超过默认的超时时间时，得到的数据就是MockService中的数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;主机绑定规则&#34;&gt;主机绑定规则&lt;/h2&gt;
&lt;p&gt;主机绑定表示的是Dubbo服务对外发布的IP地址，默认情况下Dubbo会按照以下顺序来查找并绑定主机IP地址。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查找环境变量DUBBO_IP_TO_BIND属性配置的IP地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查找dubbo.protocol.host属性的IP地址，默认是空，如果没有配置或者IP地址不合法则继续查找。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过LocalHost.getHostAddress获取本机IP地址，获取失败则继续。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果配置了注册中心的地址，则使用Socket通信连接到注册中心的地址后，使用for循环通过socket.getLocalAddress().getHostAddress()扫描各个网卡来获取网卡IP的地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建议：通过dubbo.protocal.host设置主机地址，防止注册错误的IP地址，使服务消费者无法调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker部署解决方案：使用&amp;ndash;net=host绑定网络，然后配置application.yml&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210301020007424.png&#34; alt=&#34;image-20210301020007424&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;配置inetutils下的两个参数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dubbo源码分析&#34;&gt;Dubbo源码分析&lt;/h2&gt;
&lt;h3 id=&#34;1-核心点&#34;&gt;1 核心点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SPI机制&lt;/li&gt;
&lt;li&gt;自适应扩展点&lt;/li&gt;
&lt;li&gt;IOC和AOP&lt;/li&gt;
&lt;li&gt;Dubbo如何与Spring集成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-生成ide工程的命令&#34;&gt;2 生成IDE工程的命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;mvn idea:idea&lt;/li&gt;
&lt;li&gt;mvn eclipse:eclipse&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-spiservice-provider-interface&#34;&gt;3 SPI(Service Provider Interface)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;自适应扩展点：AdaptiveExtension&lt;/li&gt;
&lt;li&gt;指定名称扩展点：Extension(name)&lt;/li&gt;
&lt;li&gt;激活扩展点：ActivateExtension(url,key)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SPI是JDK内置的一种服务提供发现机制，主要用于服务的扩展实现。SPI机制在很多场景中都有运用，比如数据库连接，JDK提供了Driver接口，这个驱动类由不同的数据库厂商来实现，然后JDK利用SPI机制从classpath下找到相应的驱动来获得指定数据库的连接。这种插拔式的扩展加载方式，也同样遵循一定的协议约定，比如所有的扩展点必须要放在resources/META-INF/services目录下，SPI机制会默认扫描这个路径下的属性文件以完成加载。&lt;/p&gt;
&lt;h3 id=&#34;4-dubbo中的spi思想&#34;&gt;4 Dubbo中的SPI思想&lt;/h3&gt;
&lt;p&gt;Dubbo或者SpringFactoriesLoader并没有使用JDK内置的SPI机制，只是利用了SPI的思想。Dubbo SPI的相关逻辑被封装在了ExtensionLoader类中，通过ExtensionLoader我们可以加载指定的实现类。&lt;/p&gt;
&lt;p&gt;Dubbo的SPI扩展有两个规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;和JDK内置的SPI一样，需要在resources目录下创建任一目录结构：META-INF/dubbo、META-INF/dubbp/internal、META-INF/services，在对应的目录下创建以接口全路径名命名的文件，Dubbo会去三个目录下加载相应扩展点。&lt;/li&gt;
&lt;li&gt;文件内容和JDK内置的SPI不一样，内容是key-value形式的数据，key是一个字符串，value是一个对应扩展点的实现，这样的方式可以按照需要加载指定的实现类。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在一个依赖了Dubbo框架的工程中，创建一个扩展点及一个实现。其中，扩展点需要声明@SPI注解。&lt;/li&gt;
&lt;li&gt;在resources/META-INF/dubbo目录下创建以SPI接口命名的文件&lt;/li&gt;
&lt;li&gt;使用ExtensionLoader.getExtensionLoader.getExtension(key)获得指定名称的扩展点实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-dubbo中的spi原理&#34;&gt;5 Dubbo中的SPI原理&lt;/h3&gt;
&lt;p&gt;（1）ExtensionLoader.getExtensionLoader：这个方法用于返回一个ExtensionLoader实例，逻辑如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先从缓存中获取与扩展类对应的ExtensionLoader&lt;/li&gt;
&lt;li&gt;缓存未命中，则创建一个新的实例，保存到eEXTENXION_LOADERS集合中缓存起来。&lt;/li&gt;
&lt;li&gt;在ExtensionLoader构造方法中，初始化一个objectFactory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225020109248.png&#34; alt=&#34;image-20210225020109248&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225020130724.png&#34; alt=&#34;image-20210225020130724&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;（2）getExtension：这个方法用于根据指定名称获取对应的扩展点并返回。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name用于参数的判断，如果name=&amp;ldquo;true&amp;rdquo;，则返回一个默认的扩展实现。&lt;/li&gt;
&lt;li&gt;创建一个Holder对象，用户缓存该扩展点的实例。&lt;/li&gt;
&lt;li&gt;如果缓存中不存在，则通过createExtension(name)创建一个扩展点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225020354825.png&#34; alt=&#34;image-20210225020354825&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;（3）createExtension()：去指定的路径下查找name对应的扩展点的实现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过getExtensionClasses().get(name)获取一个扩展类&lt;/li&gt;
&lt;li&gt;通过反射实例化之后缓存到EXTENSION_INSTANCES集合中。&lt;/li&gt;
&lt;li&gt;injectExtension实例依赖注入&lt;/li&gt;
&lt;li&gt;把扩展类对象通过Wrapper进行包装。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225020624033.png&#34; alt=&#34;image-20210225020624033&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;（4）getExtensionClasses()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从缓存中换取已经被加载的扩展类&lt;/li&gt;
&lt;li&gt;如果缓存未命中，则调用loadExtensionClasses加载扩展类。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225020823393.png&#34; alt=&#34;image-20210225020823393&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;（5）loadExtensionClasses()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过cacheDefaultExtensionName方法获取当且扩展接口的默认扩展对象，并且缓存。&lt;/li&gt;
&lt;li&gt;调用loadDirectory方法加载指定文件目录下的配置文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（6）cacheDefaultExtensionName()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获得指定扩展接口的@SPI注解&lt;/li&gt;
&lt;li&gt;得到@SPI注解中的名字，保存到cacheDefaultName属性中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-自适应扩展点&#34;&gt;6 自适应扩展点&lt;/h3&gt;
&lt;p&gt;Adaptive Extension：能够根据上下文动态匹配一个扩展类，使用方式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;ExtensionLoader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getExtensionLoader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAdaptiveExtension&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;自适应扩展点通过@Adaptive注解声明，有两种使用方式&lt;/p&gt;
&lt;p&gt;（1）@Adaptive注解定义在类上面，表示当前类为自适应扩展点。&lt;/p&gt;
&lt;p&gt;（2）@Adaptive注解定义上方法层面，会通过动态代理的方式生成一个动态字节码，进行自适应匹配。&lt;/p&gt;
&lt;h3 id=&#34;7-protocol自适应扩展点源码&#34;&gt;7 Protocol自适应扩展点源码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;ExtensionLoader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getExtensionLoader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Protocol&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAdaptiveExtension&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先是getExtensionLoader：&lt;/p&gt;
&lt;p&gt;（1）从缓存中获取自适应扩展点实例。&lt;/p&gt;
&lt;p&gt;（2）如果缓存未命中，则通过createAdaptiveExtension创建自适应扩展点。&lt;/p&gt;
&lt;p&gt;然后是createAdaptiveExtension：&lt;/p&gt;
&lt;p&gt;（1）getAdaptiveExtensionClass：获取一个自适应扩展类的实例。&lt;/p&gt;
&lt;p&gt;（2）injectExtension完成依赖注入。&lt;/p&gt;
&lt;p&gt;接着是getAdaptiveExtensionClass：&lt;/p&gt;
&lt;p&gt;（1）通过&lt;strong&gt;getExtensionClasses&lt;/strong&gt;方法加载当前传入类型的所有扩展点，缓存在一个集合中。&lt;/p&gt;
&lt;p&gt;（2）如果cachedAdaptiveClass为空，则调用createAdaptiveExtensionClass进行创建。&lt;/p&gt;
&lt;h3 id=&#34;8-ioc&#34;&gt;8 IOC&lt;/h3&gt;
&lt;p&gt;上文中的injectExtension就是依赖注入的实现，整体逻辑为：&lt;/p&gt;
&lt;p&gt;（1）遍历被加载的扩展类中的所有set方法。&lt;/p&gt;
&lt;p&gt;（2）得到set方法中的参数类型，如果参数类型是对象类型，则获得这个set方法中的属性名称。&lt;/p&gt;
&lt;p&gt;（3）使用自适应扩展点加载该属性名称对应的扩展类。&lt;/p&gt;
&lt;p&gt;（4）调用set完成赋值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225192001158.png&#34; alt=&#34;image-20210225192001158&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225192017631.png&#34; alt=&#34;image-20210225192017631&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;简单来说，injectExtension方法的主要功能是，如果当前加载的扩展类中存在一个成员对象，并且为它提供了set方法，那么就会通过自适应扩展点进行加载并赋值。&lt;/p&gt;
&lt;h3 id=&#34;9-aop&#34;&gt;9 AOP&lt;/h3&gt;
&lt;p&gt;面向切面编程，意图是把业务逻辑和功能逻辑分离，然后在运行期间或者类加载期间进行织入，可以降低代码的复杂性，以及提高重用性。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;injectExtension&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WrapperClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getConstructor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;newInstance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段代码分别用到了依赖注入和AOP，AOP体现在基于Wrapper装饰器类实现对原有的扩展类instance进行包装。&lt;/p&gt;
&lt;h3 id=&#34;10-dubbo集成spring机制略&#34;&gt;10 Dubbo集成Spring机制（略）&lt;/h3&gt;
&lt;p&gt;p89&lt;/p&gt;
&lt;h2 id=&#34;什么是nacos&#34;&gt;什么是Nacos？&lt;/h2&gt;
&lt;p&gt;Nacos致力于解决微服务中的统一配置、服务注册与发现等问题。它提供了一组简单易用的特性集，帮助开发者快速实现动态服务发现、服务配置、服务元数据以及流量管理。&lt;/p&gt;
&lt;h3 id=&#34;1-关键特性&#34;&gt;1 关键特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;服务发现和服务健康监测&lt;/p&gt;
&lt;p&gt;Nacos基于DNS和基于RPC的服务发现。服务提供者通过原生SDK、OpenAPI或一个独立的Agent TODO注册Service后，服务消费者可以使用DNS或HTTP&amp;amp;API查找和发现服务。&lt;/p&gt;
&lt;p&gt;Nacos提供对服务的实时的健康检查，阻止向不健康的主机或服务实例发送请求。Nacos支持传输层（PING或TCP）和应用层（如HTTP、MYSQL、用户自定义）的健康检查。对于复杂的云环境和网络拓扑环境（如VPC、边缘网络等）服务的健康检查，Nacos提供了&lt;strong&gt;agent上报&lt;/strong&gt;和&lt;strong&gt;服务端主动监测&lt;/strong&gt;两种健康检查模式。Nacos还提供了统一的健康检查仪表盘。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态配置服务&lt;/p&gt;
&lt;p&gt;业务服务一般都会维护一个本地配置文件，然后把一些常量配置到这个文件中。这种方式在某些场景会存在某些问题，比如配置变更时需要重新部署应用。而动态配置服务可以以中心化、外部化和动态化的方式管理所有环境的应用配置和服务配置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态DNS服务&lt;/p&gt;
&lt;p&gt;支持权重路由，让开发者更容易实现中间层负载均衡、更灵活的路由策略、流量控制，以及数据中心内网的简单DNS服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务及其元数据管理&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-nacos集群&#34;&gt;2 Nacos集群&lt;/h3&gt;
&lt;p&gt;包含一个Leader节点和多个Follower节点。&lt;/p&gt;
&lt;p&gt;数据一致性算法采用的Raft（Etcd、Redis哨兵选举也是这个算法）&lt;/p&gt;
&lt;p&gt;3个或3个以上Nacos节点才能构成集群。&lt;/p&gt;
&lt;h2 id=&#34;搭建nacos注册中心的注意点&#34;&gt;搭建Nacos注册中心的注意点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;dubbo.scan.base-packages功能等同于@DubboComponentScan&lt;/li&gt;
&lt;li&gt;dubbo.registry.address：Dubbo服务注册中心的配置地址，它的值spring-cloud://url表示挂载到Spring Cloud注册中心，不配置的话会提示没有配置注册中心的错误。&lt;/li&gt;
&lt;li&gt;spring.cloud.nacos.discovery.server-addr：Nacos服务注册中心的地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nacos实现原理&#34;&gt;Nacos实现原理&lt;/h2&gt;
&lt;h3 id=&#34;1-模块组成&#34;&gt;1 模块组成&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Provider App&lt;/li&gt;
&lt;li&gt;Consumer App&lt;/li&gt;
&lt;li&gt;Name Server&lt;/li&gt;
&lt;li&gt;Nacos Server&lt;/li&gt;
&lt;li&gt;Nacos Console&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整体来说，服务提供者通过Virtual IP访问Nacos Server高可用集群，基于Open API完成服务的注册和服务的查询。Nacos Server本身可以支持主备模式，所以底层会采用数据一致性算法来完成主从节点的整体同步。服务消费者也是如此。&lt;/p&gt;
&lt;h3 id=&#34;2-注册中心的原理&#34;&gt;2 注册中心的原理&lt;/h3&gt;
&lt;p&gt;服务注册的功能主要体现在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务实例在启动时注册到服务注册表，并在关闭时注销。（Open API）&lt;/li&gt;
&lt;li&gt;服务消费者查询服务注册表，获得可用实例。&lt;/li&gt;
&lt;li&gt;服务注册中心需要调用服务实例的健康检查API来验证它是否能够处理请求。（心跳机制）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-nacos源码略&#34;&gt;3 Nacos源码（略）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;服务注册&lt;/li&gt;
&lt;li&gt;服务地址的获取&lt;/li&gt;
&lt;li&gt;服务地址变化的感知&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nacos实现统一配置管理&#34;&gt;Nacos实现统一配置管理&lt;/h2&gt;
&lt;p&gt;各个应用自己独立维护本地配置方式的不足：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225222922897.png&#34; alt=&#34;image-20210225222922897&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-nacos集成spring-boot&#34;&gt;1 Nacos集成Spring Boot&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在application.properties中配置nacos.config.server-addr&lt;/li&gt;
&lt;li&gt;创建NacosConfigController，用于从Nacos Server动态读取配置。&lt;/li&gt;
&lt;li&gt;@NacosPropertiesSource：用于加载dataId为example的配置源，autoRefreshed表示开启自动更新。&lt;/li&gt;
&lt;li&gt;@NacosValue：设置属性的值，其中info表示key，而Local Hello World表示默认值。也就是说如果key不存在，则使用默认值。这是一种高可用的策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225223903497.png&#34; alt=&#34;image-20210225223903497&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-nacos集成spring-cloud&#34;&gt;2 Nacos集成Spring Cloud&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;spring.cloud.nacos.config.prefix表示Nacos配置中心上的DataID的前缀。&lt;/li&gt;
&lt;li&gt;spring.cloud.nacos.config.server-addr表示Nacos配置中心的地址。&lt;/li&gt;
&lt;li&gt;在Nacos Console创建配置&lt;/li&gt;
&lt;li&gt;在启动类中，读取配置中心的数据。&lt;/li&gt;
&lt;li&gt;注意坑：配置文件必须用bootstrap.yml这个名称，因为bootstrap加载顺序优于application，因为需要在bootstrap配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-动态更新配置&#34;&gt;3 动态更新配置&lt;/h3&gt;
&lt;p&gt;通过一个while循环不断读取info属性，当info属性发生变化时，控制台可以监听到。&lt;/p&gt;
&lt;h3 id=&#34;4-基于dataid配置yaml的文件扩展名&#34;&gt;4 基于DataID配置yaml的文件扩展名&lt;/h3&gt;
&lt;p&gt;DataID默认规则是${prefix}-${spring.profile.active}.${file-extension}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在默认情况下，会去Nacos服务器上加载DataID以${spring.application.name}.${file-extension:properties}为前缀的基础配置。例如：在不通过spring.cloud.nacos.config.prefix指定DataID时，会默认读取DataID为nacos-config-demo.properties的配置信息。&lt;/li&gt;
&lt;li&gt;如果明确指定了spring.cloud.nacos.config.prefix，则会加载DataID为指定值的配置。&lt;/li&gt;
&lt;li&gt;spring.profile.active表示多环境支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在实际应用中，&lt;strong&gt;如果使用YAML格式配置&lt;/strong&gt;，则需要声明spring.cloud.nacos.config.file-extension=yaml&lt;/p&gt;
&lt;h3 id=&#34;5-不同环境的配置切换&#34;&gt;5 不同环境的配置切换&lt;/h3&gt;
&lt;p&gt;Spring Boot多环境支持配置步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在resource目录下根据不同环境创建不同的配置：
&lt;ul&gt;
&lt;li&gt;application-dev.properties&lt;/li&gt;
&lt;li&gt;application-test.properties&lt;/li&gt;
&lt;li&gt;application-prod.properties&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;定义一个application.properties默认配置，在该配置中通过spring.profile.active=${env}来指定使用哪个环境的配置，如果${env}的值为prod，表示使用prod环境。&lt;/li&gt;
&lt;li&gt;也可以通过设置 VM Options=-Dspring.profiles.active=prod来指定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nacos Config配置步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在bootstrap.properties中声明spring.profiles.active=prod&lt;/li&gt;
&lt;li&gt;在Nacos控制台新增DataID为nacos-config-demo-prod.properties的配置项。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-自定义namespace和group&#34;&gt;6 自定义Namespace和Group&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Namespace：解决多环境及多租户数据的隔离问题。
&lt;ul&gt;
&lt;li&gt;使用：在bootstrap.properties里指定spring.cloud.nacos.config.namespace&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Group：用于分组管理Data ID
&lt;ul&gt;
&lt;li&gt;使用：在bootstrap.properties里指定spring.cloud.nacos.config.group&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nacos-config实现原理略&#34;&gt;Nacos Config实现原理（略）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;获取配置&lt;/li&gt;
&lt;li&gt;监听配置&lt;/li&gt;
&lt;li&gt;发布配置&lt;/li&gt;
&lt;li&gt;删除配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分为两类：配置的CRUD和配置的动态监听&lt;/p&gt;
&lt;h2 id=&#34;spring-cloud加载配置的原理略&#34;&gt;Spring Cloud加载配置的原理（略）&lt;/h2&gt;
&lt;h2 id=&#34;nacos源码略&#34;&gt;Nacos源码（略）&lt;/h2&gt;
&lt;h2 id=&#34;sentinel限流及熔断&#34;&gt;Sentinel限流及熔断&lt;/h2&gt;
&lt;h3 id=&#34;1-服务限流的作用及实现&#34;&gt;1 服务限流的作用及实现&lt;/h3&gt;
&lt;p&gt;主要作用：损失一部分用户的可用性，为大部分用户提供稳定可靠的服务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;计算器算法：在制定周期内累加访问次数，当访问次数达到阈值时，触发限流策略。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225232943900.png&#34; alt=&#34;image-20210225232943900&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;滑动窗口算法：源于TCP拥塞控制，原理是在固定窗口中分割出&lt;strong&gt;多个小时间窗口&lt;/strong&gt;，分别在每个小时间窗口中记录访问次数，然后根据时间将窗口往前滑动并删除过期的小时间窗口。最终只需要统计滑动窗口范围内所有小时间窗口总的计数即可。（Sentinel的原理）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;令牌桶算法：每一个请求，都需要从令牌桶中获取一个令牌，如果没有获得令牌，则触发限流策略。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225233303914.png&#34; alt=&#34;image-20210225233303914&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;特性：短时间内新增的流量系统能够正常处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;漏桶限流算法：用于控制数据注入网络的速度，平滑网络上的突发流量。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225233550970.png&#34; alt=&#34;image-20210225233550970&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-服务熔断和降级&#34;&gt;2 服务熔断和降级&lt;/h3&gt;
&lt;p&gt;在微服务架构中，由于服务拆分粒度较细，会出现请求链路较长的情况，用户发起一个请求操作，需要调用多个微服务才能完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;雪崩效应&lt;/strong&gt;：某个服务因为网络延迟或者请求超时等原因不可用时，就会导致当前请求阻塞，一旦某个链路上被依赖的服务不可用，很可能出现请求堆积而产生雪崩。&lt;/p&gt;
&lt;p&gt;所以，服务熔断就是用来解决这个问题的方案，它指的是当某个服务提供者无法正常为服务调用者提供服务时，为了防止整个系统出现雪崩效应，暂时将出现故障的接口隔离出来，断绝与外部接口的联系，当触发熔断后，后续一段时间内该服务调用者的请求都会&lt;strong&gt;直接失败&lt;/strong&gt;，直至目标服务恢复正常。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210225234104602.png&#34; alt=&#34;image-20210225234104602&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-sentinel的特性&#34;&gt;3 Sentinel的特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;丰富的应用场景：秒杀、消息削峰填谷、集群流量控制等。&lt;/li&gt;
&lt;li&gt;实时监控&lt;/li&gt;
&lt;li&gt;开源生态支持&lt;/li&gt;
&lt;li&gt;SPI扩展点支持&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-sentinel的组成&#34;&gt;4 Sentinel的组成：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;核心库（Java客户端）：不依赖任何框架与库，能够运行于所有Java运行时环境。&lt;/li&gt;
&lt;li&gt;控制台（Dashboard）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-sentinel基本应用&#34;&gt;5 Sentinel基本应用：&lt;/h3&gt;
&lt;p&gt;步骤如下：&lt;/p&gt;
&lt;p&gt;（1）定义资源：限流保护的最基本元素，比如一个方法。&lt;/p&gt;
&lt;p&gt;（2）定义限流规则&lt;/p&gt;
&lt;p&gt;（3）检验规则是否生效&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;限流规则&lt;/strong&gt;：通过initFlowRules方法设置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grade：限流阈值类型，有QPS模式和并发线程数模式。&lt;/li&gt;
&lt;li&gt;count：限流阈值&lt;/li&gt;
&lt;li&gt;resource：设置需要保护的资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-sentinel资源保护规则&#34;&gt;6 Sentinel资源保护规则&lt;/h3&gt;
&lt;p&gt;Sentinel支持多种保护规则：流量控制规则、熔断降级规则、系统保护规则、来源访问控制规则、热点参数规则。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;限流规则：先通过FlowRules来定义限流规则，然后通过FlowRuleManager.loadRules来加载规则列表。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1-qps流量控制行为&#34;&gt;1 QPS流量控制行为&lt;/h4&gt;
&lt;p&gt;通过controlBehavior设置，包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接拒接&lt;/li&gt;
&lt;li&gt;Warm UP，冷启动&lt;/li&gt;
&lt;li&gt;匀速排队&lt;/li&gt;
&lt;li&gt;冷启动 + 匀速排队&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7-sentinel实现服务熔断&#34;&gt;7 Sentinel实现服务熔断&lt;/h3&gt;
&lt;p&gt;通过DegradeRule实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grade：熔断策略，支持秒级RT、秒级异常比例、分钟异常数。默认是秒级RT。&lt;/li&gt;
&lt;li&gt;timeWindow：熔断降级的时间窗口，单位为s。也就是出发熔断降级之后多长时间内自动熔断。&lt;/li&gt;
&lt;li&gt;rtSlowRequestAmount：在RT模式下，1s内持续多少个请求的平均RT超出阈值后出发熔断，默认值是5&lt;/li&gt;
&lt;li&gt;minRequestAmout：触发的异常熔断最小请求数，请求数小于该值时即使异常比例超出阈值也不会触发熔断，默认值是5.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三种熔断策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平均响应时间RT：如果1s内持续进来5个请求，对应的平均响应时间都超过了阈值(count，单位为ms)，那么在接下来的时间窗口内，对这个方法的调用都会自动熔断，抛出DegradeException&lt;/li&gt;
&lt;li&gt;异常比例&lt;/li&gt;
&lt;li&gt;最近一分钟异常数：如果timeWindow小于60s，则结束熔断状态后仍然可能再进入熔断状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sentinel集成spring-cloud&#34;&gt;Sentinel集成Spring Cloud&lt;/h2&gt;
&lt;p&gt;步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建项目，集成Spring Cloud依赖。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加Sentinel依赖。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建一个REST接口，并且通过@SentinelResource配置限流保护资源。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210226000233876.png&#34; alt=&#34;image-20210226000233876&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在上述代码中，配置限流资源有几种情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sentinel starter在默认情况下会为所有的HTTP服务提供限流埋点，所以如果只想对HTTP服务进行限流，只需添加依赖即可。&lt;/li&gt;
&lt;li&gt;如果想要对特定的方法进行限流或降级，则需要通过@SentinelResource注解来定义资源。&lt;/li&gt;
&lt;li&gt;可以通过SphU.entry()方法来配置资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;手动配置流控规则，可以借助Sentinel的InitFunc SPI扩展接口来实现，只需要实现自己的InitFunc接口，并在init方法中编写规则加载的逻辑即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基于sentinel-dashboard来实现流控配置&#34;&gt;基于Sentinel Dashboard来实现流控配置&lt;/h2&gt;
&lt;p&gt;步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;启动Sentinel Dashboard&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在application.yml中增加以下配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210226000900895.png&#34; alt=&#34;image-20210226000900895&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供一个REST接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进入Sentinel Dashboard中配置流控规则。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问簇点链路，找到资源名称。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单机流控按钮设置流控规则&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意sentinel的坑：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210226015008780.png&#34; alt=&#34;image-20210226015008780&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;sentinel自定义url限流异常&#34;&gt;Sentinel自定义URL限流异常&lt;/h2&gt;
&lt;p&gt;默认情况下，URL触发限流后会返回Blocked by Sentinel字符串&lt;/p&gt;
&lt;p&gt;在实际应用中，大都采用JSON格式，所以如果希望修改触发限流之后的返回结果形式，则可以通过自定义限流异常来处理，实现&lt;strong&gt;UrlBlockHandler&lt;/strong&gt;并且重写blocked方法。&lt;/p&gt;
&lt;p&gt;还有一种场景，当触发限流后，希望跳转到一个降级页面，可以通过下面这个配置来实现。&lt;/p&gt;
&lt;p&gt;spring.cloud.sentinel.servlet.block-page={url}&lt;/p&gt;
&lt;h2 id=&#34;sentinel对url资源清洗&#34;&gt;Sentinel对URL资源清洗&lt;/h2&gt;
&lt;p&gt;Sentinel中HTTP服务的限流默认由Sentinel-Web-Servlet包中的CommonFilter来实现，这个Filter会把每个不同的URL都作为不同的资源来处理。&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210226194317550.png&#34; alt=&#34;image-20210226194317550&#34;  /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;限流统计不准确，实际需求是控制clean方法总的QPS，结果统计的是每个URL的QPS&lt;/li&gt;
&lt;li&gt;导致Sentinel中资源数量过多，默认资源数量阈值为6000，对于多出的资源规则将不会生效。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;针对这个问题可以通过&lt;strong&gt;URLCleaner&lt;/strong&gt;接口来实现资源清洗，也就是对于/clean/{id}这个URL，我们可以统一归集到/clean/*资源下，具体代码如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210226194545852.png&#34; alt=&#34;image-20210226194545852&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;sentinel集成nacos实现动态流控规则&#34;&gt;Sentinel集成Nacos实现动态流控规则&lt;/h2&gt;
&lt;p&gt;Sentinel的理念是只需要开发者关注资源的定义，默认会对资源进行流控。当然我们还需要自定义流控规则，前面有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过FlowRuleManager.loadRules(List rules)手动加载流控规则&lt;/li&gt;
&lt;li&gt;在Sentinel Dashboard上针对资源动态创建流控规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;针对第一种方式，如果接入Sentinel Dashboard，那么同样支持动态修改流控规则。但是，这里会存在一个问题，基于Sentinel Dashboard所配置的流控规则，都是保存在&lt;strong&gt;内存&lt;/strong&gt;中的，一旦应用重启，这些规则都会被清除。为了解决这个问题，Sentinel提供了动态数据源支持。&lt;/p&gt;
&lt;p&gt;目前，Sentinel支持Consul、Zookeeper、Redis、Nacos、Apollo、etcd等数据源的扩展，我们使用Nacos的方式来扩展。&lt;/p&gt;
&lt;p&gt;步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;添加Nacos数据源依赖包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建一个REST接口用于测试。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在application.yml中添加数据源配置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210226195049493.png&#34; alt=&#34;image-20210226195049493&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;配置说明：&lt;/p&gt;
&lt;p&gt;rule-type：flow、degrade、param-flow、gw-flow等&lt;/p&gt;
&lt;p&gt;data-type：Spring Cloud Alibaba提供了JSON和XML两种格式。如果需要自定义，则可以将值配置为custom，并配置converter-class指向converter类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登录Nacos控制台，创建流控配置规则，配置信息如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210226195526683.png&#34; alt=&#34;image-20210226195526683&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后，登录Sentinel Dashboard，找到执行项目名称菜单下的“流控规则”，就可以看到在Nacos上所配置的流控规则已经被加载了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当在Nacos控制台修改流控规则后，可以同步在Sentinel Dashboard上看到流控规则的变化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意：在Sentinel Dashboard上修改无法同步到Nacos上。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;强烈建议&lt;/strong&gt;：不要在Nacos上修改流控规则，因为这种修改的危险系数很高。这就意味着流控规则的管理应该集中在Sentinel Dashboard上，所以我们需要实现Sentinel Dashboard来动态维护规则并同步到Nacos上，目前官方还没有提供支持，但可以自己实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这里有一个坑：出现了&lt;strong&gt;空指针异常&lt;/strong&gt;org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;lsquo;ds1-sentinel-nacos-datasource&amp;rsquo;: FactoryBean threw exception on object creation; nested exception is java.lang.NullPointerException，出现原因是Spring-Cloud-Alibaba与Sentinel的&lt;strong&gt;版本对应不上&lt;/strong&gt;，解决办法是把Spring Cloud Alibaba的版本升到2.2.5.RELEASE即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sentinel集成nacos实现规则同步&#34;&gt;Sentinel集成Nacos实现规则同步&lt;/h2&gt;
&lt;p&gt;Sentinel Dashboard的“流控规则”下的所有操作，都会调用Sentinel源码中的FlowControllerV1类，这个类包含流控规则本地化的CRUD&lt;/p&gt;
&lt;p&gt;另外，在com.alibaba.csp.sentinel.dashboard.controller.v2包下存在一个FlowControllerV2类，这个类同样提供流控规则的CRUD，和V1版本不同的是，它可以实现指定数据源的规则拉取和同步。&lt;/p&gt;
&lt;p&gt;FlowControllerV2依赖以下两个非常重要的类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DynamicRuleProvider：动态规则的拉取，从指定数据源中获取流控规则后在Sentinel Dashboard中展示。&lt;/li&gt;
&lt;li&gt;DynamicRulePublisher：动态规则的发布，将在Sentinel Dashboard中修改的规则同步到指定数据源中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里我们扩展这两个类，然后集成Nacos来实现Sentinel Dashboard规则的同步。&lt;/p&gt;
&lt;h3 id=&#34;1-sentinel-dashboard源码修改&#34;&gt;1 Sentinel Dashboard源码修改：&lt;/h3&gt;
&lt;p&gt;具体步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;打开sentinel-dashboard工程，在pom.xml中把sentinel-datasource-nacos依赖的scope注释掉。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210226220250575.png&#34; alt=&#34;image-20210226220250575&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改resouces/app/scripts/directives/sidebar/sidebar.html文件下的代码，将dashboard.flowV1改成dashboard.flow&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210226220240096.png&#34; alt=&#34;image-20210226220240096&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;修改之后，会调用FlowControllerV2中的接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在com.alibaba.csp.sentinel.dashboard.rule包中创建一个nacos包，并创建一个类用来加载外部化配置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210226220601939.png&#34; alt=&#34;image-20210226220601939&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建一个Nacos配置类NacosConfiguration&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注入Converter转换器，将FlowRuleEntity转化为FlowRule，以及反向转化。&lt;/li&gt;
&lt;li&gt;注入Nacos配置服务ConfigService&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建一个常量类NacosConstants，分别表示默认的GROUP_ID和DATA_ID的后缀。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现动态从Nacos配置中心获取流控规则。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建一个流控规则发布类，在Sentinel Dashboard上修改完配置后，需要调用该发布方法将数据持久化到Nacos中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改FlowControllerV2类，将上面配置的两个类注入进来，表示规则的拉取和规则的发布统一用我们前面自定义的两个实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在application.properties文件中添加nacos服务端的配置信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将代码打包成一个fat jar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;详见https://blog.csdn.net/weixin_42073629/article/details/107117433 或者test包中的nacos代码&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-sentinel-dashboard规则同步&#34;&gt;2 Sentinel Dashboard规则同步&lt;/h3&gt;
&lt;p&gt;应用程序需要修改的地方比较少，只需注意配置文件中data-id的命名要以-sentinel-flow结尾即可。&lt;/p&gt;
&lt;h2 id=&#34;sentinel集成dubbo实现限流&#34;&gt;Sentinel集成Dubbo实现限流&lt;/h2&gt;
&lt;p&gt;Sentinel提供了与Dubbo整合的模块Sentinel Apache Dubbo Adapter，可以针对服务提供者和服务消费者进行流控，在使用的时候，只需要添加以下依赖。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210227193606798.png&#34; alt=&#34;image-20210227193606798&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;添加后该依赖后，Dubbo服务中的接口和方法（包括服务端和消费端）就会成为Sentinel中的资源，只需针对指定资源配置流控规则就可以实现Sentinel流控功能。&lt;/p&gt;
&lt;p&gt;Sentinel Apache Dubbo Adapter实现限流的核心原理是基于Dubbo的SPI机制实现Filter扩展，Dubbo的Filter机制是专门为服务提供者和服务消费者调用过程进行拦截设计的，每次执行远程方法，该拦截都会被执行。&lt;/p&gt;
&lt;p&gt;同时，Sentinel Apache Dubbo Adapter还可以自定义开启或者关闭某个Filter的功能，下面表示关闭消费端的过滤器。&lt;/p&gt;
&lt;h3 id=&#34;image-20210227193903284httpscuterwriteoss-cn-beijingaliyuncscomimgimage-20210227193903284png&#34;&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210227193903284.png&#34; alt=&#34;image-20210227193903284&#34;  /&gt;&lt;/h3&gt;
&lt;h3 id=&#34;1-dubbo服务接入sentinel-dashboard&#34;&gt;1 Dubbo服务接入Sentinel Dashboard&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;引入sentinel-transport-simple-http依赖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加启动参数&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210227194238456.png&#34; alt=&#34;image-20210227194238456&#34;  /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登录Sentinel Dashboard之后，进入“簇点链路”，就可以看到资源信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要注意的是，限流可以通过服务接口或服务方法设置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务接口：resourceName为接口的全限定名（包+接口名）&lt;/li&gt;
&lt;li&gt;服务方法：resourceName为接口全限定名：方法名（包+接口名:方法名）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-dubbo服务限流规则&#34;&gt;2 Dubbo服务限流规则&lt;/h3&gt;
&lt;p&gt;两种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sentinel Dashboard&lt;/li&gt;
&lt;li&gt;FlowRuleManager.loadRules(List rules)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sentinel Apache Dubbo Adapter组件中没有实现规则持久化，因此有以下步骤来支持：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在dubbo服务中添加sentinel-datasource-nacos依赖&lt;/li&gt;
&lt;li&gt;通过Sentinel提供的InitFunc扩展点，实现Nacos数据源的配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210227204336472.png&#34; alt=&#34;image-20210227204336472&#34;  /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问Sentinel Dashboard，在针对某个资源创建流控规则时，这个规则会同步保存到Nacos的配置中心，而当Nacos配置中心发生变化时，会触发事件机制通知Dubbo应用重新加载流控规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sentinel热点限流&#34;&gt;Sentinel热点限流&lt;/h2&gt;
&lt;p&gt;热点数据表示经常访问的数据，在有限场景中我们希望针对这些访问频次非常高的数据进行限流，比如针对一段时间内频繁访问的用户ID地址进行限流，或者针对频繁访问的某个用户ID进行限流。&lt;/p&gt;
&lt;p&gt;Sentinel提供了热点参数限流的规则，它是一种特殊的限流，在普通限流的基础上对同一个受保护的资源区根据请求中的参数分别处理，该策略只对包含热点参数的资源调用生效。热点限流在&lt;strong&gt;以下场景&lt;/strong&gt;使用较多：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务网关层：例如防止网络爬虫和恶意攻击，一种常用方法就是限制爬虫的IP地址。&lt;/li&gt;
&lt;li&gt;写数据的服务：例如业务系统提供写数据的服务，数据会写入数据库之类的存储系统。存储系统的底层会加锁写磁盘上的文件，部分存储系统会将某一类数据写入同一个文件中。如果底层写同一文件，会出现抢占锁的情况，导致出现大量超时和失败。出现这种情况时一般有两种解决方法：修改存储设计、对热点参数限流。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sentinel通过&lt;strong&gt;LRU策略结合滑动窗口机制&lt;/strong&gt;来实现热点参数的统计，其中LRU策略可以统计单位时间内最常访问的热点数据，滑动窗口机制可以协助统计每个参数的QPS。&lt;/p&gt;
&lt;h3 id=&#34;1-热点参数限流的使用&#34;&gt;1 热点参数限流的使用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;引用热点参数限流依赖包sentinel-parameter-flow-control&lt;/li&gt;
&lt;li&gt;接下来创建一个REST接口，并定义限流埋点，此处针对参数ID配置热点限流规则。&lt;/li&gt;
&lt;li&gt;针对不同的热点参数，需要通过SphU.entry(resourceName,EntryType.IN,1,id)方法设置，其最后一个参数是一个数组，有多个热点参数就按照次序依次传入，该配置表示后续会针对该参数进行热点限流。&lt;/li&gt;
&lt;li&gt;通过ParamFlowRuleManager.loadRules加载热点参数规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-sentinelresource&#34;&gt;2 @SentinelResource&lt;/h3&gt;
&lt;p&gt;如果是通过@SentinelResource注解来定义资源，当注解所配置得方法上有参数时，Sentinel会把这些参数传入SphU.entry中&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210227231844217.png&#34; alt=&#34;image-20210227231844217&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-热点参数规则说明&#34;&gt;3 热点参数规则说明&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;durationInSec：统计窗口时间长度，单位为s&lt;/li&gt;
&lt;li&gt;maxQueueingTimeMS：最长排队等待时长，只有当流控为controlBehavior设置为匀速排队模式时生效。&lt;/li&gt;
&lt;li&gt;paramIdx：热点参数的索引，属于必填项，对应的是SphU.entry中的参数索引位置。&lt;/li&gt;
&lt;li&gt;paramFlowItemList：针对指定参数值单独设置限流阈值，不受count阈值的限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sentinel的工作原理略&#34;&gt;Sentinel的工作原理（略）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;工作流程：由各个Slot插槽组成（责任链模式）&lt;/li&gt;
&lt;li&gt;p229&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring-cloud-sentinel工作原理略&#34;&gt;Spring Cloud Sentinel工作原理（略）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;starter自动装配&lt;/li&gt;
&lt;li&gt;p232&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sentinel核心源码分析略&#34;&gt;Sentinel核心源码分析（略）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sentinel-adapter&lt;/li&gt;
&lt;li&gt;sentinel-core&lt;/li&gt;
&lt;li&gt;sentinel-dashboard&lt;/li&gt;
&lt;li&gt;sentinel-demo&lt;/li&gt;
&lt;li&gt;sentinel-extension&lt;/li&gt;
&lt;li&gt;sentinel-transport&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-限流的源码实现&#34;&gt;1 限流的源码实现&lt;/h3&gt;
&lt;h3 id=&#34;2-实时指标数据统计&#34;&gt;2 实时指标数据统计&lt;/h3&gt;
&lt;h3 id=&#34;3-服务降级的实现原理&#34;&gt;3 服务降级的实现原理&lt;/h3&gt;
&lt;h2 id=&#34;什么是分布式事务&#34;&gt;什么是分布式事务？&lt;/h2&gt;
&lt;p&gt;事务：作为单个逻辑工作单元执行的多个数据库操作，要么同时成功，要么同时失败，必须满足ACID特性。（单库多表）&lt;/p&gt;
&lt;p&gt;在微服务架构下，随着业务服务的拆分及数据库的拆分，举例说，订单和库存分别拆分成两个独立的数据库，当客户端发起一个下单操作，需要在订单服务对应的数据库创建订单，同时基于RPC通信调用库存服务完成商品库存的扣减。&lt;/p&gt;
&lt;p&gt;这样，原来的单库事务操作就变成了多个数据库的事务操作 =&amp;gt; 数据不一致问题。&lt;/p&gt;
&lt;h3 id=&#34;1-分布式事务问题的理论模型&#34;&gt;1 分布式事务问题的理论模型&lt;/h3&gt;
&lt;p&gt;核心原因：存储资源的分布性&lt;/p&gt;
&lt;p&gt;在实际应用中，应该尽可能从设计层面去避免分布式事务的问题。&lt;/p&gt;
&lt;h4 id=&#34;1-xopen分布式模型&#34;&gt;1 X/Open分布式模型&lt;/h4&gt;
&lt;p&gt;X/Open DTP是X/Open这个组织定义的一套分布式事务的标准。这个标准提出了&lt;strong&gt;两阶段提交&lt;/strong&gt;（2PC，2-phase-commit）来保证分布式事务的完整性。X/Open DTP包含以下三种角色。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AP：Application&lt;/li&gt;
&lt;li&gt;RM：Resource Manager&lt;/li&gt;
&lt;li&gt;TM：Transaction Manager&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果TM需要能够管理多个数据库的事务，则实现步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置TM，把多个RM注册到TM，相当于TM注册RM作为数据源。&lt;/li&gt;
&lt;li&gt;AP从TM管理的RM中获取连接，如果RM是数据库则获取JDBC连接。&lt;/li&gt;
&lt;li&gt;AP向TM发起一个全局事务，生成全局事务ID（XID），XID会通知各个RM。&lt;/li&gt;
&lt;li&gt;AP通过第二步获得的连接直接操作RM完成数据库操作。这时，AP在每次操作会把XID传递给RM。&lt;/li&gt;
&lt;li&gt;AP结束全局事务，TM会通知各个RM全局事务结束。&lt;/li&gt;
&lt;li&gt;根据各个RM的事务执行结果，执行提交或者回滚操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，TM和多个RM之间的事务控制，是基于XA协议来完成的。目前Oracle、MySQL、DB2都实现了XA接口，因此都能作为RM。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210227233821400.png&#34; alt=&#34;image-20210227233821400&#34;  /&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-两阶段提交协议&#34;&gt;2 两阶段提交协议&lt;/h4&gt;
&lt;p&gt;第一阶段：事务的准备阶段&lt;/p&gt;
&lt;p&gt;第二阶段：事务的提交或回滚阶段&lt;/p&gt;
&lt;p&gt;这两个阶段都是由事务管理器发起的，流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;准备阶段：TM通知RM准备分支事务，记录事务日志，并告知TM的准备结果。&lt;/li&gt;
&lt;li&gt;提交/回滚阶段：如果所有的RM在准备阶段都明确返回成功，TM向所有RM发起提交指令完成数据的变更；反之，则TM向所有RM发送回滚指令。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而，它并不是完美的，也有缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步阻塞：所有RM都是事务阻塞型的，对于任何一次指令都必须要有明确的响应才能进行下一步，否则会处于阻塞状态。&lt;/li&gt;
&lt;li&gt;过于保守：任何一个节点失败都会导致数据回滚。&lt;/li&gt;
&lt;li&gt;TM的单点故障：如果TM在第二阶段故障，则所有RM会一直处于锁定状态。&lt;/li&gt;
&lt;li&gt;“脑裂”导致数据不一致问题：在第二阶段中，TM向所有RM发送commit请求后，发生局部网络异常导致只有一部分RM接受到commit，剩余未收到请求的则没提交，导致数据出现不一致问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-三阶段提交协议&#34;&gt;3 三阶段提交协议&lt;/h4&gt;
&lt;p&gt;利用超时机制解决了同步阻塞的问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CanCommit（询问阶段）：TM向RM发送事务执行请求，询问是否可以完成指令，参与者只需回答是或者不是即可，不需要做真正的事务操作，这个阶段会有超时中止机制。&lt;/li&gt;
&lt;li&gt;PreCommit（准备阶段）：TM根据RM的反馈结果决定是否继续，如果在询问阶段所有RM都能执行操作，则TM向所有RM发送PreCommit请求，RM收到请求后写redo和undo日志，执行事务操作但是不提交事务，然后返回ACK响应等待TM的下一步通知。如果询问阶段任意参与者返回不能执行操作的结果，则TM发送事务中断请求。&lt;/li&gt;
&lt;li&gt;DoCommit（提交或回滚阶段）：根据上一步骤的执行结果，如果每个RM都返回成功，则TM发送事务提交指令，反之则中止。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三阶段提交协议与二阶段提交协议的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加了一个CanCommit阶段，可以尽早发现无法执行操作而中止后续的行为。&lt;/li&gt;
&lt;li&gt;在准备阶段之后，TM和RM都引入超时机制，一旦超时，TM和RM会继续提交事务，并且认为处于成功状态，因为这种情况下事务默认为成功的可能性比较大。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实际上，一旦超时，在三阶段提交协议下仍然可能出现数据不一致的问题，当然概率是比较小的。另外，最大的好处是基于超时机制来避免资源的永久锁定。&lt;/p&gt;
&lt;h4 id=&#34;4-cap定理和base理论&#34;&gt;4 CAP定理和BASE理论&lt;/h4&gt;
&lt;p&gt;XA协议：二阶段提交和三阶段提交，数据一致性强，但可用性低。&lt;/p&gt;
&lt;p&gt;CAP定理：布鲁尔定理，指在分布式系统中不可能同时满足一致性C、可用性A、分区容错性P，最多同时满足两个。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C：数据在多个副本中要保持强一致&lt;/li&gt;
&lt;li&gt;A：系统对外提供的服务必须一直处于可用状态。&lt;/li&gt;
&lt;li&gt;P：在分布式系统中遇到任何网络分区故障，系统仍然能够正常对外提供服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;在分布式系统中，要么满足CP，要么满足AP，不可能实现CAP或者CA，因为网络通信不是绝对可靠的。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AP：放弃强一致性，实现最终的一致。（很多互联网公司的主要选择）&lt;/li&gt;
&lt;li&gt;CP：放弃高可用性，实现强一致性。（2PC和3PC，存在问题：用户完成一个操作可能会等待较长的时间，用户体验差）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BASE理论：由于CAP中CA不可兼得衍生出来的一种新的思想。核心思想是：牺牲数据的强一致性来获得高可用性，有三个特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Basically Avaliable（基本可用）：分布式系统出现故障时，允许损失一部分功能的可用性，保证核心功能的可用。&lt;/li&gt;
&lt;li&gt;Soft State（软状态）：允许系统中的数据存在中间状态，这个状态不影响系统的可用性，也就是允许系统中不同节点的数据副本之间的同步存在延时。&lt;/li&gt;
&lt;li&gt;Eventually Consistent（最终一致性）：中间状态的数据在经过一段时间之后，会达到一个最终的数据一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-分布式事务问题的常见解决方案&#34;&gt;2 分布式事务问题的常见解决方案&lt;/h3&gt;
&lt;h4 id=&#34;1-tcc补偿性方案&#34;&gt;1 TCC补偿性方案&lt;/h4&gt;
&lt;p&gt;TCC（Try-Confirm-Cancel）是一种比较成熟的分布式数据一致性解决方案，它实际上是把一个完整的业务拆分为如下三个步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Try：这个阶段主要是对数据的校验或者资源的预留。&lt;/li&gt;
&lt;li&gt;Confirm：确定真正执行的任务，只操作Try阶段预留的资源。&lt;/li&gt;
&lt;li&gt;Cancel：取消执行，释放Try阶段预留的资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本质：二阶段提交的思想，第一阶段通过Try准备，第二阶段通过Confirm/Cancel&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210228000708843.png&#34; alt=&#34;image-20210228000708843&#34;  /&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-基于可靠性消息的最终一致性方案&#34;&gt;2 &lt;strong&gt;基于可靠性消息的最终一致性方案&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;基于可靠性消息的最终一致性方案是互联网公司比较常用的分布式数据一致性解决方案，它主要利用消息中间件（Kafka、RocketMQ或RabbitMQ）的可靠性机制来实现数据一致性的投递。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cuterwrite.oss-cn-beijing.aliyuncs.com/img/image-20210228001428049.png&#34; alt=&#34;image-20210228001428049&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;总结：消费者没有向消息中间件服务器发送确认之前，这个消息会被重复投递，确保消息的可靠性消费。&lt;/p&gt;
&lt;h4 id=&#34;3-最大努力通知型&#34;&gt;3 最大努力通知型&lt;/h4&gt;
&lt;p&gt;与基于可靠性消息的最终一致性方案实现类似，是一种比较简单的柔性事务解决方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果没有返回一个消息确认时，则不断进行重试，直到收到一个消息确认或者达到最大重试次数。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-分布式事务框架seata&#34;&gt;3 分布式事务框架Seata&lt;/h3&gt;
&lt;p&gt;提供了AT、TCC、Saga和XA四种事务模式。&lt;/p&gt;
&lt;h4 id=&#34;1-at模式&#34;&gt;1 AT模式&lt;/h4&gt;
&lt;p&gt;Seata最主推的分布式事务解决方案，基于XA演进而来，分为TM、RM和TC，TC作为Seata的服务器独立部署。&lt;/p&gt;
&lt;h4 id=&#34;2-saga模式&#34;&gt;2 Saga模式&lt;/h4&gt;
&lt;p&gt;又称长事务解决方案，主要描述的是在没有2PC的情况下如何解决分布式事务问题。其核心思想是：把一个业务流程中的长事务拆分为多个本地短事务，业务流程中的每个参与者都提交真实提交给本地段事务，当其中一个参与者失败，则通过补偿机制补偿前面已经成功的参与者。&lt;/p&gt;
&lt;p&gt;两种补偿恢复方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;向后恢复：如果任一子事务失败，则撤销执行结果。&lt;/li&gt;
&lt;li&gt;向前恢复：不进行补偿，而是对失败的事务进行redo，这种方式比较适合于事务必须要执行成功的场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一阶段直接提交本地事务&lt;/li&gt;
&lt;li&gt;没有锁等待，性能较高&lt;/li&gt;
&lt;li&gt;在事件驱动的模式下，短事务可以异步执行。&lt;/li&gt;
&lt;li&gt;补偿机制的实现比较简单。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：不提供原子性和隔离性支持&lt;/p&gt;
&lt;p&gt;协调模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事件/编排式&lt;/li&gt;
&lt;li&gt;命令/协同式&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
