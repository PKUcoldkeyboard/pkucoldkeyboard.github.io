<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Comprehensive Tech Stack on Cuterwrite's Blog</title><link>https://cuterwrite.top/en/categories/techstack/</link><description>Recent content in Comprehensive Tech Stack on Cuterwrite's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>cuterwrite</copyright><lastBuildDate>Fri, 08 Mar 2024 14:39:00 +0000</lastBuildDate><atom:link href="https://cuterwrite.top/en/categories/techstack/index.xml" rel="self" type="application/rss+xml"/><item><title>Record: Install Intel® OneAPI-2024.0</title><link>https://cuterwrite.top/en/p/intel-oneapi/</link><pubDate>Fri, 08 Mar 2024 14:39:00 +0000</pubDate><guid>https://cuterwrite.top/en/p/intel-oneapi/</guid><description>&lt;img src="https://cloud.cuterwrite.fun/img/crop_62cf8bae89f60c3522eb45af53a53f4b195413-2024-03-09.webp" alt="Featured image of post Record: Install Intel® OneAPI-2024.0" />&lt;h1 id="record-install-intel-oneapi-20240">
&lt;a href="#record-install-intel-oneapi-20240" class="header-anchor">#&lt;/a>
Record: Install Intel® OneAPI-2024.0
&lt;/h1>
&lt;p>Intel oneAPI consists of two parts, the former being the Base Toolkit, and the latter must rely on the former, Intel oneAPI HPC Toolkit, which means they need to be installed sequentially.&lt;/p>
&lt;h2 id="base-toolkit">
&lt;a href="#base-toolkit" class="header-anchor">#&lt;/a>
Base Toolkit
&lt;/h2>
&lt;p>Base Toolkit is Intel&amp;rsquo;s basic API toolkit that includes the following libraries and others.&lt;/p>
&lt;pre>&lt;code class="language-text">Intel® oneAPI DPC++/C++ Compiler
Intel® DPC++ Compatibility Tool
Intel® oneAPI DPC++ Library
Intel® oneAPI Math Kernel Library
Intel® oneAPI Threading Building Blocks
Intel® oneAPI Collective Communications Library
Intel® oneAPI Data Analytics Library
Intel® oneAPI Deep Neural Networks Library
Intel® Integrated Performance Primitives
Intel® VTune™ Profiler
Intel® Advisor
Intel® Distribution for GDB*
Intel® Distribution for Python* (separate download required)
Intel® FPGA Add-on for oneAPI Base Toolkit (separate download required)
&lt;/code>&lt;/pre>
&lt;h3 id="base-toolkit-installation">
&lt;a href="#base-toolkit-installation" class="header-anchor">#&lt;/a>
Base Toolkit Installation
&lt;/h3>
&lt;ol>
&lt;li>Download the installation package&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-bash">$ wget https://registrationcenter-download.intel.com/akdlm/IRC_NAS/163da6e4-56eb-4948-aba3-debcec61c064/l_BaseKit_p_2024.0.1.46_offline.sh
&lt;/code>&lt;/pre>
&lt;ol start="2">
&lt;li>Installation&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-bash">$ chmod +x l_BaseKit_p_2024.0.1.46_offline.sh
$ sudo ./l_BaseKit_p_2024.0.1.46_offline.sh
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>If custom installed in the user directory, root privileges are not required.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">./l_BaseKit_p_2024.0.1.46_offline.sh
&lt;/code>&lt;/pre>
&lt;p>Then a graphical installation interface will start, continue with the following steps:&lt;/p>
&lt;p>&lt;strong>(1) Select Accept &amp;amp; customize&lt;/strong>
&lt;figure>&lt;img src="https://cloud.cuterwrite.fun/img/OneAPI-Accepet-2024-03-09.png"
alt="OneAPI-Accepet-2024-03-09" width="auto" loading="lazy">
&lt;/figure>
&lt;/p>
&lt;p>&lt;strong>(2) Select components to install&lt;/strong>
&lt;figure>&lt;img src="https://cloud.cuterwrite.fun/img/OneAPI-Select-2-2024-03-09.png"
alt="OneAPI-Select-2-2024-03-09" width="auto" loading="lazy">
&lt;/figure>
&lt;/p>
&lt;p>&lt;strong>(3) Select installation path&lt;/strong>
&lt;figure>&lt;img src="https://cloud.cuterwrite.fun/img/OneAPI-Select-3-2024-03-09.png"
alt="OneAPI-Select-3-2024-03-09" width="auto" loading="lazy">
&lt;/figure>
&lt;/p>
&lt;p>&lt;strong>(4) Select Next&lt;/strong>
&lt;figure>&lt;img src="https://cloud.cuterwrite.fun/img/OneAPI-Select-4-2024-03-09.png"
alt="OneAPI-Select-4-2024-03-09" width="auto" loading="lazy">
&lt;/figure>
&lt;/p>
&lt;p>&lt;strong>(5) Select 2 then start installation&lt;/strong>
&lt;figure>&lt;img src="https://cloud.cuterwrite.fun/img/OneAPI-Select-5-2024-03-09.png"
alt="OneAPI-Select-5-2024-03-09" width="auto" loading="lazy">
&lt;/figure>
&lt;/p>
&lt;p>Next, wait for the installation to complete.&lt;/p>
&lt;h2 id="hpc-toolkit">
&lt;a href="#hpc-toolkit" class="header-anchor">#&lt;/a>
HPC Toolkit
&lt;/h2>
&lt;p>Run based on Base Toolkit, this must be installed afterwards&lt;/p>
&lt;pre>&lt;code class="language-text">Intel® Fortran Compiler
Intel® Fortran Compiler Classic
Intel® Inspector
Intel® MPI Library
Intel® Trace Analyzer and Collector
&lt;/code>&lt;/pre>
&lt;h3 id="hpc-toolkit-installation">
&lt;a href="#hpc-toolkit-installation" class="header-anchor">#&lt;/a>
HPC Toolkit Installation
&lt;/h3>
&lt;ol>
&lt;li>Download and install package&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-bash">$ wget https://registrationcenter-download.intel.com/akdlm/IRC_NAS/67c08c98-f311-4068-8b85-15d79c4f277a/l_HPCKit_p_2024.0.1.38_offline.sh
&lt;/code>&lt;/pre>
&lt;ol start="2">
&lt;li>Installation&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-bash">$ chmod +x l_HPCKit_p_2024.0.1.38_offline.sh
$ sudo ./l_HPCKit_p_2024.0.1.38_offline.sh
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>If custom installation is in the user directory, root privileges are not required.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">./l_HPCKit_p_2024.0.1.38_offline.sh
&lt;/code>&lt;/pre>
&lt;p>Required library files: Intel® MPI Library Intel® Fortran Compiler (Beta) &amp;amp; Intel® Fortran Compiler Classic Intel® oneAPI DPC++/C++ Compiler &amp;amp; Intel® C++ Compiler Classic&lt;/p>
&lt;p>The installation process is similar to the Base Toolkit and will not be elaborated.&lt;/p>
&lt;h2 id="environment-configuration">
&lt;a href="#environment-configuration" class="header-anchor">#&lt;/a>
Environment Configuration
&lt;/h2>
&lt;p>After installation, you need to configure environment variables to use Intel® oneAPI tools in the terminal.&lt;/p>
&lt;p>In an HPC environment, use &lt;code>modulefile&lt;/code> to manage environment variables, and you can use the &lt;code>module&lt;/code> command to load environment variables.&lt;/p>
&lt;p>Below is a reference &lt;code>modulefile&lt;/code> file, which you can modify according to your installation path.&lt;/p>
&lt;pre>&lt;code class="language-modulefile">#%Module1.0#####################################################################
##
## modules modulefile
##
proc ModulesHelp { } {
global version prefix
puts stderr &amp;quot;\tmodules - loads the modules software &amp;amp; application environment&amp;quot;
puts stderr &amp;quot;\n\tThis adds $prefix/* to several of the&amp;quot;
puts stderr &amp;quot;\tenvironment variables.&amp;quot;
puts stderr &amp;quot;\n\tVersion $version\n&amp;quot;
}
module-whatis &amp;quot;loads intel/oneapi2024.0&amp;quot;
# for Tcl script use only
set version oneapi2024.0
set prefix /opt/software/intel/oneapi2024.0
conflict intel
prepend-path TBBROOT ${prefix}/tbb/2021.11/env/..
prepend-path DAALROOT ${prefix}/cdal/2024.0
prepend-path DPCT_BUNDLE_ROOT ${prefix}/dpcpp-ct/2024.0
prepend-path INSPECTOR_2023_DIR ${prefix}/inspector/2024.0
prepend-path ONEAPI_ROOT ${prefix}
prepend-path PKG_CONFIG_PATH ${prefix}/vtune/2024.0/include/pkgconfig/lib64:${prefix}/tbb/2021.11/env/../lib/pkgconfig:${prefix}/mpi/2021.11/lib/pkgconfig:${prefix}/mkl/2024.0/lib/pkgconfig:${prefix}/ippcp/2021.9/lib/pkgconfig:${prefix}/inspector/2024.0/include/pkgconfig/lib64:${prefix}/dpl/2022.3/lib/pkgconfig:${prefix}/dnnl/2024.0/cpu_dpcpp_gpu_dpcpp/../lib/pkgconfig:${prefix}/cdal/2024.0/lib/pkgconfig:${prefix}/compiler/2024.0/lib/pkgconfig:${prefix}/ccl/2021.11/lib/pkgconfig:${prefix}/advisor/2024.0/include/pkgconfig/lib64:
#prepend-path PKG_CONFIG_PATH ${prefix}/vtune/2024.0/include/pkgconfig/lib64:${prefix}/tbb/2021.11/env/../lib/pkgconfig:${prefix}/mkl/2024.0/lib/pkgconfig:${prefix}/ippcp/2021.9/lib/pkgconfig:${prefix}/inspector/2024.0/include/pkgconfig/lib64:${prefix}/dpl/2022.3/lib/pkgconfig:${prefix}/dnnl/2024.0/cpu_dpcpp_gpu_dpcpp/../lib/pkgconfig:${prefix}/cdal/2024.0/lib/pkgconfig:${prefix}/compiler/2024.0/lib/pkgconfig:${prefix}/ccl/2021.11/lib/pkgconfig:${prefix}/advisor/2024.0/include/pkgconfig/lib64:
prepend-path VT_MPI impi4
prepend-path ACL_BOARD_VENDOR_PATH /opt/Intel/OpenCLFPGA/oneAPI/Boards
prepend-path FPGA_VARS_DIR ${prefix}/compiler/2024.0/lib/oclfpga
prepend-path CCL_ROOT ${prefix}/ccl/2021.11
prepend-path VT_ADD_LIBS &amp;quot;-ldwarf -lelf -lvtunwind -lm -lpthread&amp;quot;
prepend-path I_MPI_ROOT ${prefix}/mpi/2021.11
prepend-path FI_PROVIDER_PATH ${prefix}/mpi/2021.11//libfabric/lib/prov:/usr/lib/x86_64-linux-gnu/libfabric
prepend-path DNNLROOT ${prefix}/dnnl/2024.0/cpu_dpcpp_gpu_dpcpp
prepend-path DIAGUTIL_PATH ${prefix}/vtune/2024.0/sys_check/vtune_sys_check.py:${prefix}/dpcpp-ct/2024.0/sys_check/sys_check.sh:${prefix}/debugger/2024.0/sys_check/debugger_sys_check.py:${prefix}/compiler/2024.0/sys_check/sys_check.sh:${prefix}/advisor/2024.0/sys_check/advisor_sys_check.py:
prepend-path CCL_CONFIGURATION cpu_gpu_dpcpp
prepend-path DPL_ROOT ${prefix}/dpl/2022.3
prepend-path MANPATH ${prefix}/mpi/2021.11/man:${prefix}/itac/2022.0/man:${prefix}/debugger/2024.0/documentation/man:${prefix}/compiler/2024.0/documentation/en/man/common:::
#prepend-path MANPATH ${prefix}/itac/2022.0/man:${prefix}/debugger/2024.0/documentation/man:${prefix}/compiler/2024.0/documentation/en/man/common:::
prepend-path GDB_INFO ${prefix}/debugger/2024.0/documentation/info/
prepend-path SETVARS_COMPLETED 1
prepend-path APM ${prefix}/advisor/2024.0/perfmodels
prepend-path CMAKE_PREFIX_PATH ${prefix}/tbb/2021.11/env/..:${prefix}/ipp/2021.10/lib/cmake/ipp:${prefix}/ipp/2021.10/lib/cmake/ipp:${prefix}/dnnl/2024.0/cpu_dpcpp_gpu_dpcpp/../lib/cmake:${prefix}/cdal/2024.0:${prefix}/compiler/2024.0/IntelDPCPP:${prefix}/ccl/2021.11/lib/cmake/oneCCL
prepend-path VTUNE_PROFILER_2023_DIR ${prefix}/vtune/2024.0
prepend-path CMPLR_ROOT ${prefix}/compiler/2024.0
prepend-path ADVISOR_2023_DIR ${prefix}/advisor/2024.0
prepend-path FPGA_VARS_ARGS &amp;quot;&amp;quot;
prepend-path INFOPATH ${prefix}/debugger/2024.0/gdb/intel64/lib
prepend-path IPPROOT ${prefix}/ipp/2021.10
prepend-path IPP_TARGET_ARCH intel64
prepend-path PYTHONPATH ${prefix}/advisor/2024.0/pythonapi
prepend-path VT_ROOT ${prefix}/itac/2022.0
prepend-path DALROOT ${prefix}/cdal/2024.0
prepend-path LIBRARY_PATH ${prefix}/tbb/2021.11/env/../lib/intel64/gcc4.8:${prefix}/mpi/2021.11//libfabric/lib:${prefix}/mpi/2021.11//lib/release:${prefix}/mpi/2021.11//lib:${prefix}/mkl/2024.0/lib/intel64:${prefix}/ipp/2021.10/lib/intel64:${prefix}/ippcp/2021.9/lib/intel64:${prefix}/ipp/2021.10/lib/intel64:${prefix}/dnnl/2024.0/cpu_dpcpp_gpu_dpcpp/lib:${prefix}/cdal/2024.0/lib/intel64:${prefix}/compiler/2024.0/compiler/lib/intel64_lin:${prefix}/compiler/2024.0/lib:${prefix}/ccl/2021.11/lib/cpu_gpu_dpcpp
#prepend-path LIBRARY_PATH ${prefix}/tbb/2021.11/env/../lib/intel64/gcc4.8:${prefix}/mkl/2024.0/lib/intel64:${prefix}/ipp/2021.10/lib/intel64:${prefix}/ippcp/2021.9/lib/intel64:${prefix}/ipp/2021.10/lib/intel64:${prefix}/dnnl/2024.0/cpu_dpcpp_gpu_dpcpp/lib:${prefix}/cdal/2024.0/lib/intel64:${prefix}/compiler/2024.0/compiler/lib/intel64_lin:${prefix}/compiler/2024.0/lib:${prefix}/ccl/2021.11/lib/cpu_gpu_dpcpp
prepend-path DAL_MAJOR_BINARY 1
prepend-path IPPCRYPTOROOT ${prefix}/ippcp/2021.9
prepend-path IPPCP_TARGET_ARCH intel64
prepend-path OCL_ICD_FILENAMES libintelocl_emu.so:libalteracl.so:${prefix}/compiler/2024.0/lib/x64/libintelocl.so
prepend-path CLASSPATH ${prefix}/mpi/2021.11//lib/mpi.jar:${prefix}/cdal/2024.0/lib/onedal.jar
#prepend-path CLASSPATH ${prefix}/cdal/2024.0/lib/onedal.jar
prepend-path INTELFPGAOCLSDKROOT ${prefix}/compiler/2024.0/lib/oclfpga
prepend-path LD_LIBRARY_PATH ${prefix}/tbb/2021.11/env/../lib/intel64/gcc4.8:${prefix}/mpi/2021.11//libfabric/lib:${prefix}/mpi/2021.11//lib/release:${prefix}/mpi/2021.11//lib:${prefix}/mkl/2024.0/lib/intel64:${prefix}/itac/2022.0/slib:${prefix}/ipp/2021.10/lib/intel64:${prefix}/ippcp/2021.9/lib/intel64:${prefix}/ipp/2021.10/lib/intel64:${prefix}/dnnl/2024.0/cpu_dpcpp_gpu_dpcpp/lib:${prefix}/debugger/2024.0/gdb/intel64/lib:${prefix}/debugger/2024.0/libipt/intel64/lib:${prefix}/debugger/2024.0/dep/lib:${prefix}/cdal/2024.0/lib/intel64:${prefix}/compiler/2024.0/lib:${prefix}/compiler/2024.0/lib/x64:${prefix}/compiler/2024.0/lib/oclfpga/host/linux64/lib:${prefix}/compiler/2024.0/compiler/lib/intel64_lin:${prefix}/ccl/2021.11/lib/cpu_gpu_dpcpp:${prefix}/compiler/2024.0/compiler/lib/intel64_lin:${prefix}/ccl/2021.11/lib/cpu_gpu_dpcpp
#prepend-path LD_LIBRARY_PATH ${prefix}/tbb/2021.11/env/../lib/intel64/gcc4.8:${prefix}/mkl/2024.0/lib/intel64:${prefix}/itac/2022.0/slib:${prefix}/ipp/2021.10/lib/intel64:${prefix}/ippcp/2021.9/lib/intel64:${prefix}/ipp/2021.10/lib/intel64:${prefix}/dnnl/2024.0/cpu_dpcpp_gpu_dpcpp/lib:${prefix}/debugger/2024.0/gdb/intel64/lib:${prefix}/debugger/2024.0/libipt/intel64/lib:${prefix}/debugger/2024.0/dep/lib:${prefix}/cdal/2024.0/lib/intel64:${prefix}/compiler/2024.0/lib:${prefix}/compiler/2024.0/lib/x64:${prefix}/compiler/2024.0/lib/oclfpga/host/linux64/lib:${prefix}/compiler/2024.0/compiler/lib/intel64_lin:${prefix}/ccl/2021.11/lib/cpu_gpu_dpcpp:${prefix}/compiler/2024.0/compiler/lib/intel64_lin:${prefix}/ccl/2021.11/lib/cpu_gpu_dpcpp
prepend-path VT_LIB_DIR ${prefix}/itac/2022.0/lib
prepend-path VTUNE_PROFILER_DIR ${prefix}/vtune/2024.0
prepend-path VT_SLIB_DIR ${prefix}/itac/2022.0/slib
prepend-path MKLROOT ${prefix}/mkl/2024.0
prepend-path DAL_MINOR_BINARY 1
prepend-path NLSPATH ${prefix}/mkl/2024.0/lib/intel64/locale/%l_%t/%N:${prefix}/compiler/2024.0/compiler/lib/intel64_lin/locale/%l_%t/%N
prepend-path PATH ${prefix}/vtune/2024.0/bin64:${prefix}/mpi/2021.11//libfabric/bin:${prefix}/mpi/2021.11//bin:${prefix}/mkl/2024.0/bin/intel64:${prefix}/itac/2022.0/bin:${prefix}/inspector/2024.0/bin64:${prefix}/dpcpp-ct/2024.0/bin:${prefix}/dev-utilities/2024.0/bin:${prefix}/debugger/2024.0/gdb/intel64/bin:${prefix}/compiler/2024.0/lib/oclfpga/bin:${prefix}/compiler/2024.0/bin/intel64:${prefix}/compiler/2024.0/bin:${prefix}/advisor/2024.0/bin64
#prepend-path PATH ${prefix}/vtune/2024.0/bin64:${prefix}/mkl/2024.0/bin/intel64:${prefix}/itac/2022.0/bin:${prefix}/inspector/2024.0/bin64:${prefix}/dpcpp-ct/2024.0/bin:${prefix}/dev-utilities/2024.0/bin:${prefix}/debugger/2024.0/gdb/intel64/bin:${prefix}/compiler/2024.0/lib/oclfpga/bin:${prefix}/compiler/2024.0/bin/intel64:${prefix}/compiler/2024.0/bin:${prefix}/advisor/2024.0/bin64
prepend-path INTEL_PYTHONHOME ${prefix}/debugger/2024.0/dep
prepend-path INTEL_LICENSE_FILE /opt/intel/licenses:/root/intel/licenses
prepend-path CPATH ${prefix}/tbb/2021.11/env/../include:${prefix}/mpi/2021.11//include:${prefix}/mkl/2024.0/include:${prefix}/ipp/2021.10/include:${prefix}/ippcp/2021.9/include:${prefix}/ipp/2021.10/include:${prefix}/dpl/2022.3/linux/include:${prefix}/dpcpp-ct/2024.0/include:${prefix}/dnnl/2024.0/cpu_dpcpp_gpu_dpcpp/include:${prefix}/dev-utilities/2024.0/include:${prefix}/cdal/2024.0/include:${prefix}/compiler/2024.0/lib/oclfpga/include:${prefix}/ccl/2021.11/include/cpu_gpu_dpcpp
#prepend-path CPATH ${prefix}/tbb/2021.11/env/../include:${prefix}/mkl/2024.0/include:${prefix}/ipp/2021.10/include:${prefix}/ippcp/2021.9/include:${prefix}/ipp/2021.10/include:${prefix}/dpl/2022.3/linux/include:${prefix}/dpcpp-ct/2024.0/include:${prefix}/dnnl/2024.0/cpu_dpcpp_gpu_dpcpp/include:${prefix}/dev-utilities/2024.0/include:${prefix}/cdal/2024.0/include:${prefix}/compiler/2024.0/lib/oclfpga/include:${prefix}/ccl/2021.11/include/cpu_gpu_dpcpp
&lt;/code>&lt;/pre>
&lt;h2 id="run-test">
&lt;a href="#run-test" class="header-anchor">#&lt;/a>
Run test
&lt;/h2>
&lt;p>Load environment variables using the &lt;code>module load&lt;/code> command&lt;/p>
&lt;pre>&lt;code class="language-bash">$ module load intel/oneapi2024.0
&lt;/code>&lt;/pre>
&lt;p>Test whether the installation was successful&lt;/p>
&lt;pre>&lt;code class="language-bash">$ icx -v
&lt;/code>&lt;/pre>
&lt;p>If the version information is output, the installation is successful.&lt;/p>
&lt;pre>&lt;code class="language-bash">Intel(R) oneAPI DPC++/C++ Compiler 2024.0.2 (2024.0.2.20231213)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /opt/software/intel/oneapi2024.0/compiler/2024.0/bin/compiler
Configuration file: /opt/software/intel/oneapi2024.0/compiler/2024.0/bin/compiler/../icx.cfg
Found candidate GCC installation: /opt/rh/devtoolset-11/root/usr/lib/gcc/x86_64-redhat-linux/11
Selected GCC installation: /opt/rh/devtoolset-11/root/usr/lib/gcc/x86_64-redhat-linux/11
Candidate multilib: .;@m64
Candidate multilib: 32;@m32
Selected multilib: .;@m64
&lt;/code>&lt;/pre>
&lt;p>Continue testing MPI&lt;/p>
&lt;pre>&lt;code class="language-bash">$ mpirun --version
&lt;/code>&lt;/pre>
&lt;p>If the version information is output, then the installation is successful.&lt;/p>
&lt;pre>&lt;code class="language-bash">Intel(R) MPI Library for Linux* OS, Version 2021.11 Build 20231005 (id: 74c4a23)
Copyright 2003-2023, Intel Corporation.
&lt;/code>&lt;/pre>
&lt;h2 id="icx-instructions">
&lt;a href="#icx-instructions" class="header-anchor">#&lt;/a>
icx instructions
&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>Intel® oneAPI DPC++/C++ Compiler (icx)&lt;/strong> is Intel&amp;rsquo;s next-gen compiler based on Clang/LLVM technology plus Intel proprietary optimizations and code generation.&lt;/p>&lt;span class="cite">&lt;span>― &lt;/span>&lt;span>Intel®, &lt;/span>&lt;a href="https://www.intel.cn/content/www/cn/zh/developer/articles/technical/adoption-of-llvm-complete-icx.html">&lt;cite>Intel® C/C&amp;#43;&amp;#43; Compilers Complete Adoption of LLVM&lt;/cite>&lt;/a>&lt;/span>&lt;/blockquote>
&lt;p>icx is Intel&amp;rsquo;s next-generation compiler based on Clang/LLVM technology, with Intel&amp;rsquo;s proprietary optimizations and code generation.&lt;/p>
&lt;p>LLVM helped achieve the goal of providing a better C/C++ compiler for Intel architecture. The latest Intel C/C++ compiler uses the LLVM architecture, offering faster compile times, better optimization, enhanced standards support, and support for GPU and FPGA offloading.&lt;/p>
&lt;h3 id="benefits-of-adopting-llvm">
&lt;a href="#benefits-of-adopting-llvm" class="header-anchor">#&lt;/a>
Benefits of adopting LLVM
&lt;/h3>
&lt;p>The LLVM open source project is a collection of modular and reusable compiler and toolchain technologies that supports multiple processor architectures and programming languages. The Clang open source project provides a C/C++ frontend, supporting the latest language standards for the LLVM project. Including Clang, LLVM is maintained by a large and very active development community.&lt;/p>
&lt;figure>&lt;img src="https://cloud.cuterwrite.fun/img/v2-7ac93f64b283ba0b5c5371b7cd524210_1440w-2024-03-09.webp"
alt="v2-7ac93f64b283ba0b5c5371b7cd524210_1440w-2024-03-09" width="auto" loading="lazy">
&lt;/figure>
&lt;p>There are many benefits to using LLVM, the first being faster build times. It is well known that Clang is very fast! When we used the Intel C/C++ Compiler from the Intel oneAPI 2021.3 toolkit, we measured a 14% reduction in build time. In addition to reducing build time, adopting Clang allows us to benefit from the community&amp;rsquo;s support for the latest C++ language standards and contribute results to give back to the community.&lt;/p>
&lt;p>Intel has a long history of contributing to and supporting open-source projects, including ten years of contributions to LLVM. Our proactive collaboration today includes optimization report supplements, expanded floating-point model support, and vector enhancements. Intel directly contributes to the LLVM project and has a staging area (Intel LLVM Technology Project) for SYCL support.&lt;/p>
&lt;p>On Intel architecture, the Intel C/C++ compiler is expected to provide higher performance than the base Clang+LLVM compiler. The upcoming Intel C/C++ compilers will be versions (icx) that have adopted the LLVM open-source infrastructure. We will continue our long-term efforts to contribute to the Clang and LLVM projects, including providing optimizations for them. Not all optimization techniques will be accepted upstream, sometimes because they are too new, and sometimes because they are too specific to Intel architecture. This is to be expected and is the same situation as with other compilers that have adopted LLVM.&lt;/p>
&lt;figure>&lt;img src="https://cloud.cuterwrite.fun/img/v2-1a1672571e4a8a60c335e5abe38ee86b_1440w-2024-03-09.webp"
alt="v2-1a1672571e4a8a60c335e5abe38ee86b_1440w-2024-03-09" width="auto" loading="lazy">
&lt;/figure>
&lt;p>Intel C/C++ compilers have consistently provided the best performance. The classic version of the Intel C/C++ compiler achieved an 18% advantage over GCC, while the Intel C/C++ compiler based on LLVM achieved a 41% advantage.&lt;/p></description></item><item><title>Setting Up the Xuantie 900 Series Toolchain and xuantie-qemu Environment</title><link>https://cuterwrite.top/en/p/thead-tools/</link><pubDate>Tue, 20 Feb 2024 01:51:00 +0000</pubDate><guid>https://cuterwrite.top/en/p/thead-tools/</guid><description>&lt;img src="https://cloud.cuterwrite.fun/img/59aa9fecb7e1a3a2b2c88811e6360647195413.jpg@1256w_774h_!web-article-pic-2024-02-20.webp" alt="Featured image of post Setting Up the Xuantie 900 Series Toolchain and xuantie-qemu Environment" />&lt;h1 id="set-up-xuantie-900-series-toolchain-and-xuantie-qemu-environment">
&lt;a href="#set-up-xuantie-900-series-toolchain-and-xuantie-qemu-environment" class="header-anchor">#&lt;/a>
Set up Xuantie 900 series toolchain and xuantie-qemu environment
&lt;/h1>
&lt;h2 id="1-build-the-platform">
&lt;a href="#1-build-the-platform" class="header-anchor">#&lt;/a>
1. Build the platform
&lt;/h2>
&lt;ul>
&lt;li>Linux distribution: CentOS Linux release 7.6.1810 (Core)&lt;/li>
&lt;li>Kernel version: 3.10.0-957.el7.x86_64&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">$ cat /etc/centos-release
CentOS Linux release 7.6.1810 (Core)
$ uname -r
3.10.0-957.el7.x86_64
&lt;/code>&lt;/pre>
&lt;h2 id="2-set-up-the-xuantie-900-series-toolchain-environment">
&lt;a href="#2-set-up-the-xuantie-900-series-toolchain-environment" class="header-anchor">#&lt;/a>
2. Set up the XuanTie 900 series toolchain environment
&lt;/h2>
&lt;h3 id="1-download-xuantie-900-series-toolchain">
&lt;a href="#1-download-xuantie-900-series-toolchain" class="header-anchor">#&lt;/a>
1. Download Xuantie 900 series toolchain
&lt;/h3>
&lt;p>First, we need to download the Xuantie GNU toolchain for the RISC-V architecture. Go to the &lt;a class="link" href="https://www.xrvm.cn/" target="_blank" rel="noopener" >Xuantie official website
&lt;span style="white-space: nowrap;">&lt;svg width=".8em" height=".8em" viewBox="0 0 21 21"
xmlns="http://www.w3.org/2000/svg">
&lt;path d="m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z" fill="currentColor" />
&lt;path d="M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z"
fill="currentColor">
&lt;/svg>&lt;/span>
&lt;/a>
to get the latest version of the precompiled package and install it according to your operating system. On Linux systems, it is usually sufficient to add the &lt;code>bin&lt;/code> path to the &lt;code>$PATH&lt;/code> environment variable after extraction.&lt;/p>
&lt;p>The toolchain installation package is divided into different versions due to the differences between the execution platform and the target program platform. For example, Xuantie-&lt;em>-elf-&lt;/em>-x86_64-V*-.tar.gz is a RISC-V bare program toolchain suite for the 64-bit Linux platform. The specific classifications are as follows:&lt;/p>
&lt;ul>
&lt;li>According to the execution platform&lt;/li>
&lt;li>x86_64: 64-bit Linux platform&lt;/li>
&lt;li>i386: 32-bit Linux platform
&lt;ul>
&lt;li>mingw: Windows Mingw platform&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>According to the target program platform&lt;/li>
&lt;li>elf: Bare program compilation suite&lt;/li>
&lt;li>linux: linux application compilation suite&lt;/li>
&lt;/ul>
&lt;p>Here we download the latest version 2.8.1 of the Linux application compilation suite for the 64-bit Linux platform, namely Xuantie-900-gcc-linux-5.10.4-glibc-x86_64.&lt;/p>
&lt;pre>&lt;code class="language-bash">wget https://occ-oss-prod.oss-cn-hangzhou.aliyuncs.com/resource//1705395627867/Xuantie-900-gcc-linux-5.10.4-glibc-x86_64-V2.8.1-20240115.tar.gz
tar -xzvf Xuantie-900-gcc-linux-5.10.4-glibc-x86_64-V2.8.1-20240115.tar.gz
sudo mv Xuantie-900-gcc-linux-5.10.4-glibc-x86_64-V2.8.1-20240115 /opt
export PATH=/opt/Xuantie-900-gcc-linux-5.10.4-glibc-x86_64-V2.8.1-20240115/bin:$PATH
&lt;/code>&lt;/pre>
&lt;h3 id="2-verify-toolchain-installation">
&lt;a href="#2-verify-toolchain-installation" class="header-anchor">#&lt;/a>
2. Verify toolchain installation
&lt;/h3>
&lt;pre>&lt;code class="language-bash">$ riscv64-unknown-linux-gnu-gcc -v
Using built-in specs.
COLLECT_GCC=riscv64-unknown-linux-gnu-gcc
COLLECT_LTO_WRAPPER=/opt/Xuantie-900-gcc-linux-5.10.4-glibc-x86_64-V2.8.0/bin/../libexec/gcc/riscv64-unknown-linux-gnu/10.4.0/lto-wrapper
Target: riscv64-unknown-linux-gnu
Configured with: /mnt/ssd/jenkins_iotsw/slave/workspace/Toolchain/build-gnu-riscv_4/./source/riscv/riscv-gcc/configure --target=riscv64-unknown-linux-gnu --with-gmp=/mnt/ssd/jenkins_iotsw/slave/workspace/Toolchain/build-gnu-riscv_4/build-gcc-riscv64-unknown-linux-gnu/build-Xuantie-900-gcc-linux-5.10.4-glibc-x86_64-V2.8.0/lib-for-gcc-x86_64-linux --with-mpfr=/mnt/ssd/jenkins_iotsw/slave/workspace/Toolchain/build-gnu-riscv_4/build-gcc-riscv64-unknown-linux-gnu/build-Xuantie-900-gcc-linux-5.10.4-glibc-x86_64-V2.8.0/lib-for-gcc-x86_64-linux --with-mpc=/mnt/ssd/jenkins_iotsw/slave/workspace/Toolchain/build-gnu-riscv_4/build-gcc-riscv64-unknown-linux-gnu/build-Xuantie-900-gcc-linux-5.10.4-glibc-x86_64-V2.8.0/lib-for-gcc-x86_64-linux --with-libexpat-prefix=/mnt/ssd/jenkins_iotsw/slave/workspace/Toolchain/build-gnu-riscv_4/build-gcc-riscv64-unknown-linux-gnu/build-Xuantie-900-gcc-linux-5.10.4-glibc-x86_64-V2.8.0/lib-for-gcc-x86_64-linux --with-libmpfr-prefix=/mnt/ssd/jenkins_iotsw/slave/workspace/Toolchain/build-gnu-riscv_4/build-gcc-riscv64-unknown-linux-gnu/build-Xuantie-900-gcc-linux-5.10.4-glibc-x86_64-V2.8.0/lib-for-gcc-x86_64-linux --with-pkgversion='Xuantie-900 linux-5.10.4 glibc gcc Toolchain V2.8.0 B-20231018' CXXFLAGS='-g -O2 -DTHEAD_VERSION_NUMBER=2.8.0 ' --prefix=/mnt/ssd/jenkins_iotsw/slave/workspace/Toolchain/build-gnu-riscv_4/build-gcc-riscv64-unknown-linux-gnu/Xuantie-900-gcc-linux-5.10.4-glibc-x86_64-V2.8.0 --with-sysroot=/mnt/ssd/jenkins_iotsw/slave/workspace/Toolchain/build-gnu-riscv_4/build-gcc-riscv64-unknown-linux-gnu/Xuantie-900-gcc-linux-5.10.4-glibc-x86_64-V2.8.0/sysroot --with-system-zlib --enable-shared --enable-tls --enable-languages=c,c++,fortran --disable-libmudflap --disable-libssp --disable-libquadmath --enable-libsanitizer --disable-nls --disable-bootstrap --src=https://cuterwrite.top/mnt/ssd/jenkins_iotsw/slave/workspace/Toolchain/build-gnu-riscv_4/./source/riscv/riscv-gcc --enable-multilib --with-abi=lp64d --with-arch=rv64gc_zfh_xtheadc 'CFLAGS_FOR_TARGET=-O2 -mcmodel=medany' 'CXXFLAGS_FOR_TARGET=-O2 -mcmodel=medany'
Thread model: posix
Supported LTO compression algorithms: zlib
gcc version 10.4.0 (Xuantie-900 linux-5.10.4 glibc gcc Toolchain V2.8.0 B-20231018)
&lt;/code>&lt;/pre>
&lt;p>You can see the output of the gcc version information, indicating that the toolchain was installed successfully.&lt;/p>
&lt;h2 id="3-set-up-the-xuantie-qemu-environment">
&lt;a href="#3-set-up-the-xuantie-qemu-environment" class="header-anchor">#&lt;/a>
3. Set up the xuantie-qemu environment
&lt;/h2>
&lt;h3 id="1-prerequisites">
&lt;a href="#1-prerequisites" class="header-anchor">#&lt;/a>
1. Prerequisites
&lt;/h3>
&lt;p>Before installing xuantie-qemu, you need to ensure that the system contains the following tools or libraries.&lt;/p>
&lt;ul>
&lt;li>gcc compiler&lt;/li>
&lt;li>automake&lt;/li>
&lt;li>autoconf&lt;/li>
&lt;li>libtool&lt;/li>
&lt;li>glib2 library&lt;/li>
&lt;li>Others&amp;hellip;..&lt;/li>
&lt;/ul>
&lt;p>Install the above tools or libraries using the following command.&lt;/p>
&lt;pre>&lt;code class="language-bash">sudo yum update -y
sudo yum install -y autoconf automake libtool make gcc gcc-c++ gawk bison flex texinfo gperf patchutils bc \
zlib-devel mpfr-devel gmp-devel curl-devel expat-devel git \
glib2-devel libfdt-devel pixman-devel ncurses-devel ncurses-compat-libs
&lt;/code>&lt;/pre>
&lt;p>If it is an Ubuntu/Debian system, you can use the following command to install.&lt;/p>
&lt;pre>&lt;code class="language-bash">sudo apt-get update
sudo apt-get install -y autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev \
gawk build-essential bison flex texinfo gperf libtool patchutils bc \
zlib1g-dev libexpat-dev git \
libglib2.0-dev libfdt-dev libpixman-1-dev \
libncurses5-dev libncursesw5-dev
&lt;/code>&lt;/pre>
&lt;h3 id="2-download-and-install-xuantie-qemu">
&lt;a href="#2-download-and-install-xuantie-qemu" class="header-anchor">#&lt;/a>
2. Download and install xuantie-qemu
&lt;/h3>
&lt;p>Visit the &lt;a class="link" href="https://github.com/T-head-Semi/qemu.git" target="_blank" rel="noopener" >Xuantie QEMU official repository
&lt;span style="white-space: nowrap;">&lt;svg width=".8em" height=".8em" viewBox="0 0 21 21"
xmlns="http://www.w3.org/2000/svg">
&lt;path d="m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z" fill="currentColor" />
&lt;path d="M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z"
fill="currentColor">
&lt;/svg>&lt;/span>
&lt;/a>
to obtain the xuantie-qemu source code suitable for the Xuantie 900 series chips, and then follow the usual steps to compile and install:&lt;/p>
&lt;pre>&lt;code class="language-bash">git clone https://github.com/T-head-Semi/qemu.git
git checkout xuantie-qemu-6.1.0
&lt;/code>&lt;/pre>
&lt;h3 id="3-compile-and-install-xuantie-qemu">
&lt;a href="#3-compile-and-install-xuantie-qemu" class="header-anchor">#&lt;/a>
3. Compile and install xuantie-qemu
&lt;/h3>
&lt;pre>&lt;code class="language-bash">cd qemu
mkdir build
cd build
../configure --target-list=riscv64-softmmu,riscv64-linux-user --prefix=/opt/qemu/6.1.0-xuantie
make -j $(nproc)
sudo make install
export PATH=/opt/qemu/6.1.0-xuantie/bin:$PATH
&lt;/code>&lt;/pre>
&lt;h3 id="4-verify-xuantie-qemu-installation">
&lt;a href="#4-verify-xuantie-qemu-installation" class="header-anchor">#&lt;/a>
4. Verify xuantie-qemu installation
&lt;/h3>
&lt;p>After the installation is complete, if you can view the specific version of qemu by executing the following command, it means the installation was successful.&lt;/p>
&lt;pre>&lt;code class="language-bash">$ qemu-riscv64 --version
qemu-riscv64 version 6.0.94 (v6.1.0-12-g03813c9)
Copyright (c) 2003-2021 Fabrice Bellard and the QEMU Project developers
&lt;/code>&lt;/pre>
&lt;p>Write a C language program as follows:&lt;/p>
&lt;pre>&lt;code class="language-c">#include &amp;lt;stdio.h&amp;gt;
int main() {
printf(&amp;quot;Hello RISC-V \n&amp;quot;);
return 0;
}
&lt;/code>&lt;/pre>
&lt;p>Compile the program using the Xuantie 900 series toolchain and run the program using xuantie-qemu in user mode.&lt;/p>
&lt;pre>&lt;code class="language-bash">$ riscv64-unknown-linux-gnu-gcc -static -o hello hello.c
$ qemu-riscv64 ./hello
Hello RISC-V
&lt;/code>&lt;/pre>
&lt;p>Write another C language program with RVV vectorization, as follows:&lt;/p>
&lt;details>
&lt;summary>&lt;strong>RVV Vectorization of C Language Program&lt;/strong>&lt;/summary>
&lt;pre>&lt;code class="language-c">#include &amp;lt;riscv_vector.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#define N 15
float vsum(float* v, int n) {
vfloat32m1_t vs, vv, vtmp;
float s = 0.0;
int i;
int vlmax;
vlmax = vsetvlmax_e32m1();
printf(&amp;quot;vlmax:%d\n&amp;quot;, vlmax);
vs = vfmv_v_f_f32m1(0.0, vlmax);
vtmp = vfmv_v_f_f32m1(0.0, vlmax);
for (i = 0; i &amp;lt; n - vlmax; i += vlmax) {
vv = vle32_v_f32m1(&amp;amp;v[i], vlmax);
vtmp = vfadd_vv_f32m1(vtmp, vv, vlmax);
}
vs = vfredusum_vs_f32m1_f32m1(vs, vtmp, vs, vlmax);
s = vfmv_f_s_f32m1_f32(vs);
for (; i &amp;lt; n; i++) {
s += v[i];
}
return s;
}
float vsum1(float* v, int n) {
vfloat32m1_t vs, vv;
float s;
int i;
int vl, vlmax;
vlmax = vsetvlmax_e32m1();
vs = vfmv_v_f_f32m1(0.0, vlmax);
for (i = 0; n &amp;gt; 0; i += vl, n -= vl) {
vl = vsetvl_e32m1(n);
printf(&amp;quot;vl:%d\n&amp;quot;, vl);
vv = vle32_v_f32m1(&amp;amp;v[i], vl);
vs = vfredusum_vs_f32m1_f32m1(vs, vv, vs, vl);
}
s = vfmv_f_s_f32m1_f32(vs);
return s;
}
float vsum2(float* v, int n) {
vfloat32m2_t vv;
vfloat32m1_t vs;
float s;
int i;
int vl, vlmax;
vlmax = vsetvlmax_e32m1();
vs = vfmv_v_f_f32m1(0.0, vlmax);
for (i = 0; n &amp;gt; 0; i += vl, n -= vl) {
vl = vsetvl_e32m2(n);
printf(&amp;quot;vl:%d\n&amp;quot;, vl);
vv = vle32_v_f32m2(&amp;amp;v[i], vl);
vs = vfredusum_vs_f32m2_f32m1(vs, vv, vs, vl);
}
s = vfmv_f_s_f32m1_f32(vs);
return s;
}
int main() {
int i;
float v[N], sum = 0.0;
printf(&amp;quot;Hello RISC-V!\n&amp;quot;);
for (i = 0; i &amp;lt; N; i++) {
v[i] = i;
}
sum = vsum(v, N);
printf(&amp;quot;%f\n&amp;quot;, sum);
return 0;
}
&lt;/code>&lt;/pre>
&lt;/details>
&lt;p>Compile and run the program (at this time you need to specify &lt;code>-cpu&lt;/code>, otherwise it will report an illegal instruction exception, i.e., Illegal instruction (core dumped)):&lt;/p>
&lt;pre>&lt;code class="language-bash">$ riscv64-unknown-linux-gnu-gcc -static -O3 -march=rv64imafdcv0p7_zfh_xtheadc -o test_vec test_vec.c
$ qemu-riscv64 -cpu c920 ./test_vec
Hello RISC-V!
vlmax:4
105.000000
&lt;/code>&lt;/pre>
&lt;h2 id="4-running-risc-v-64-bit-linux-system-on-qemu">
&lt;a href="#4-running-risc-v-64-bit-linux-system-on-qemu" class="header-anchor">#&lt;/a>
4. Running RISC-V 64-bit Linux System on QEMU
&lt;/h2>
&lt;h3 id="1-make-kernel">
&lt;a href="#1-make-kernel" class="header-anchor">#&lt;/a>
1. Make kernel
&lt;/h3>
&lt;h4 id="11-download-the-kernel-source-code">
&lt;a href="#11-download-the-kernel-source-code" class="header-anchor">#&lt;/a>
1.1 Download the kernel source code
&lt;/h4>
&lt;pre>&lt;code class="language-bash">$ wget https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/linux-5.10.42.tar.gz
$ tar -xzvf linux-5.10.42.tar.gz
&lt;/code>&lt;/pre>
&lt;p>After downloading, enter the kernel source directory&lt;/p>
&lt;pre>&lt;code class="language-bash">$ cd linux-5.10.42
&lt;/code>&lt;/pre>
&lt;h4 id="12-configure-and-compile-the-kernel">
&lt;a href="#12-configure-and-compile-the-kernel" class="header-anchor">#&lt;/a>
1.2 Configure and Compile the Kernel
&lt;/h4>
&lt;pre>&lt;code class="language-bash">$ make ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- defconfig
$ make ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- -j $(nproc)
...
AR drivers/built-in.a
GEN .version
CHK include/generated/compile.h
LD vmlinux.o
MODPOST vmlinux.symvers
MODINFO modules.builtin.modinfo
GEN modules.builtin
LD .tmp_vmlinux.kallsyms1
KSYMS .tmp_vmlinux.kallsyms1.S
AS .tmp_vmlinux.kallsyms1.S
LD .tmp_vmlinux.kallsyms2
KSYMS .tmp_vmlinux.kallsyms2.S
AS .tmp_vmlinux.kallsyms2.S
LD vmlinux
SYSMAP System.map
MODPOST modules-only.symvers
GEN Module.symvers
CC [M] fs/efivarfs/efivarfs.mod.o
OBJCOPY arch/riscv/boot/Image
GZIP arch/riscv/boot/Image.gz
LD [M] fs/efivarfs/efivarfs.ko
Kernel: arch/riscv/boot/Image.gz is ready
&lt;/code>&lt;/pre>
&lt;h3 id="2-create-rootfs">
&lt;a href="#2-create-rootfs" class="header-anchor">#&lt;/a>
2. Create rootfs
&lt;/h3>
&lt;h4 id="21-download-busybox-source-code">
&lt;a href="#21-download-busybox-source-code" class="header-anchor">#&lt;/a>
2.1 Download busybox source code
&lt;/h4>
&lt;pre>&lt;code class="language-bash">$ wget https://busybox.net/downloads/busybox-1.33.1.tar.bz2
&lt;/code>&lt;/pre>
&lt;p>After downloading, enter the busybox source code directory&lt;/p>
&lt;pre>&lt;code class="language-bash">cd busybox-1.33.1
&lt;/code>&lt;/pre>
&lt;h4 id="22-configure-busybox">
&lt;a href="#22-configure-busybox" class="header-anchor">#&lt;/a>
2.2 Configure busybox
&lt;/h4>
&lt;pre>&lt;code class="language-bash">$ make ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- defconfig
$ make ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- menuconfig
&lt;/code>&lt;/pre>
&lt;p>After opening the configuration menu, go to the first line &amp;ldquo;Settings&amp;rdquo;, in the &amp;ldquo;Build Options&amp;rdquo; section, select &amp;ldquo;Build static binary (no shared libs)&amp;rdquo;, then exit and save the configuration.&lt;/p>
&lt;p>Check if &lt;code>CONFIG_STATIC=y&lt;/code> is in the &lt;code>.config&lt;/code> file, if not, add it manually.&lt;/p>
&lt;h4 id="23-compile-and-install-busybox">
&lt;a href="#23-compile-and-install-busybox" class="header-anchor">#&lt;/a>
2.3 Compile and Install busybox
&lt;/h4>
&lt;pre>&lt;code class="language-bash">$ make ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- -j $(nproc)
$ make ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- install
&lt;/code>&lt;/pre>
&lt;p>At this point, a new &lt;code>_install&lt;/code> directory will appear under the source directory busyboxsource, where you can see the generated items.&lt;/p>
&lt;pre>&lt;code class="language-bash">$ ls _install
bin linuxrc sbin usr
&lt;/code>&lt;/pre>
&lt;p>Enter the &lt;code>_install&lt;/code> directory and create the following directories&lt;/p>
&lt;pre>&lt;code class="language-bash">$ cd _install
$ mkdir proc sys dev etc etc/init.d
$ ls
bin dev etc linuxrc proc sbin sys usr
&lt;/code>&lt;/pre>
&lt;p>Then create another simplest init RC file:&lt;/p>
&lt;pre>&lt;code class="language-bash">$ cd etc/init.d/
$ touch rcS
$ vim rcS
&lt;/code>&lt;/pre>
&lt;p>Edit the file content to:&lt;/p>
&lt;pre>&lt;code class="language-bash">#!/bin/sh
mount -t proc none /proc
mount -t sysfs none /sys
/sbin/mdev -s
&lt;/code>&lt;/pre>
&lt;p>Then modify the rcS file permissions to add executable permissions.&lt;/p>
&lt;pre>&lt;code class="language-bash">$ chmod +x rcS
&lt;/code>&lt;/pre>
&lt;h4 id="24-create-file-system">
&lt;a href="#24-create-file-system" class="header-anchor">#&lt;/a>
2.4 Create File System
&lt;/h4>
&lt;p>Continue executing the following command in the &lt;code>_install&lt;/code> directory:&lt;/p>
&lt;pre>&lt;code class="language-bash">$ find -print0 | cpio -0oH newc | gzip -9 &amp;gt; ../rootfs.img
3276 blocks
&lt;/code>&lt;/pre>
&lt;h3 id="3-start-running">
&lt;a href="#3-start-running" class="header-anchor">#&lt;/a>
3. Start running
&lt;/h3>
&lt;p>Create a new directory and move the compiled kernel &lt;code>Image&lt;/code> and the prepared &lt;code>rootfs.img&lt;/code> to that directory.&lt;/p>
&lt;pre>&lt;code class="language-bash">$ mkdir riscv64-linux
$ cd riscv64-linux
$ cp ../linux-5.10.42/arch/riscv/boot/Image .
$ cp ../busybox-1.33.1/rootfs.img .
&lt;/code>&lt;/pre>
&lt;p>Execute the following command:&lt;/p>
&lt;pre>&lt;code class="language-bash">$ qemu-system-riscv64 \
-nographic -machine virt \
-kernel Image \
-initrd rootfs.img \
-append &amp;quot;root=/dev/ram rdinit=/sbin/init&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>Show the Linux Kernel boot process:&lt;/p>
&lt;details>
&lt;summary>&lt;strong>Click to expand&lt;/strong>&lt;/summary>
&lt;pre>&lt;code class="language-bash">OpenSBI v0.9
____ _____ ____ _____
/ __ \ / ____| _ \_ _|
| | | |_ __ ___ _ __ | (___ | |_) || |
| | | | '_ \ / _ \ '_ \ \___ \| _ &amp;lt; | |
| |__| | |_) | __/ | | |____) | |_) || |_
\____/| .__/ \___|_| |_|_____/|____/_____|
| |
|_|
Platform Name : riscv-virtio,qemu
Platform Features : timer,mfdeleg
Platform HART Count : 1
Firmware Base : 0x80000000
Firmware Size : 100 KB
Runtime SBI Version : 0.2
Domain0 Name : root
Domain0 Boot HART : 0
Domain0 HARTs : 0*
Domain0 Region00 : 0x0000000080000000-0x000000008001ffff ()
Domain0 Region01 : 0x0000000000000000-0xffffffffffffffff (R,W,X)
Domain0 Next Address : 0x0000000080200000
Domain0 Next Arg1 : 0x0000000087000000
Domain0 Next Mode : S-mode
Domain0 SysReset : yes
Boot HART ID : 0
Boot HART Domain : root
Boot HART ISA : rv64imafdcvsu
Boot HART Features : scounteren,mcounteren,time
Boot HART PMP Count : 16
Boot HART PMP Granularity : 4
Boot HART PMP Address Bits: 54
Boot HART MHPM Count : 0
Boot HART MHPM Count : 0
Boot HART MIDELEG : 0x0000000000000222
Boot HART MEDELEG : 0x000000000000b109
[ 0.000000] Linux version 5.10.42 (root@centos) (riscv64-unknown-linux-gnu-gcc (Xuantie-900 linux-5.10.4 glibc gcc Toolchain V2.8.0 B-20231018) 10.4.0, GNU ld (GNU Binutils) 2.35) #1 SMP Wed Feb 21 02:07:46 CST 2024
[ 0.000000] OF: fdt: Ignoring memory range 0x80000000 - 0x80200000
[ 0.000000] efi: UEFI not found.
[ 0.000000] Initial ramdisk at: 0x(____ptrval____) (1085440 bytes)
[ 0.000000] Zone ranges:
[ 0.000000] DMA32 [mem 0x0000000080200000-0x0000000087ffffff]
[ 0.000000] Normal empty
[ 0.000000] Movable zone start for each node
[ 0.000000] Early memory node ranges
[ 0.000000] node 0: [mem 0x0000000080200000-0x0000000087ffffff]
[ 0.000000] Initmem setup node 0 [mem 0x0000000080200000-0x0000000087ffffff]
[ 0.000000] software IO TLB: Cannot allocate buffer
[ 0.000000] SBI specification v0.2 detected
[ 0.000000] SBI implementation ID=0x1 Version=0x9
[ 0.000000] SBI v0.2 TIME extension detected
[ 0.000000] SBI v0.2 IPI extension detected
[ 0.000000] SBI v0.2 RFENCE extension detected
[ 0.000000] SBI v0.2 HSM extension detected
[ 0.000000] riscv: ISA extensions acdfimsuv
[ 0.000000] riscv: ELF capabilities acdfim
[ 0.000000] percpu: Embedded 17 pages/cpu s32360 r8192 d29080 u69632
[ 0.000000] Built 1 zonelists, mobility grouping on. Total pages: 31815
[ 0.000000] Kernel command line: root=/dev/ram rdinit=/sbin/init
[ 0.000000] Dentry cache hash table entries: 16384 (order: 5, 131072 bytes, linear)
[ 0.000000] Inode-cache hash table entries: 8192 (order: 4, 65536 bytes, linear)
[ 0.000000] Sorting __ex_table...
[ 0.000000] mem auto-init: stack:off, heap alloc:off, heap free:off
[ 0.000000] Memory: 108240K/129024K available (7084K kernel code, 3993K rwdata, 4096K rodata, 223K init, 342K bss, 20784K reserved, 0K cma-reserved)
[ 0.000000] Virtual kernel memory layout:
[ 0.000000] fixmap : 0xffffffcefee00000 - 0xffffffceff000000 (2048 kB)
[ 0.000000] pci io : 0xffffffceff000000 - 0xffffffcf00000000 ( 16 MB)
[ 0.000000] vmemmap : 0xffffffcf00000000 - 0xffffffcfffffffff (4095 MB)
[ 0.000000] vmalloc : 0xffffffd000000000 - 0xffffffdfffffffff (65535 MB)
[ 0.000000] lowmem : 0xffffffe000000000 - 0xffffffe007e00000 ( 126 MB)
[ 0.000000] SLUB: HWalign=64, Order=0-3, MinObjects=0, CPUs=1, Nodes=1
[ 0.000000] rcu: Hierarchical RCU implementation.
[ 0.000000] rcu: RCU restricting CPUs from NR_CPUS=8 to nr_cpu_ids=1.
[ 0.000000] rcu: RCU debug extended QS entry/exit.
[ 0.000000] Tracing variant of Tasks RCU enabled.
[ 0.000000] rcu: RCU calculated value of scheduler-enlistment delay is 25 jiffies.
[ 0.000000] rcu: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=1
[ 0.000000] NR_IRQS: 64, nr_irqs: 64, preallocated irqs: 0
[ 0.000000] riscv-intc: 64 local interrupts mapped
[ 0.000000] plic: plic@c000000: mapped 53 interrupts with 1 handlers for 2 contexts.
[ 0.000000] random: get_random_bytes called from start_kernel+0x31a/0x48c with crng_init=0
[ 0.000000] riscv_timer_init_dt: Registering clocksource cpuid [0] hartid [0]
[ 0.000000] clocksource: riscv_clocksource: mask: 0xffffffffffffffff max_cycles: 0x24e6a1710, max_idle_ns: 440795202120 ns
[ 0.000150] sched_clock: 64 bits at 10MHz, resolution 100ns, wraps every 4398046511100ns
[ 0.003557] Console: colour dummy device 80x25
[ 0.008887] printk: console [tty0] enabled
[ 0.012368] Calibrating delay loop (skipped), value calculated using timer frequency.. 20.00 BogoMIPS (lpj=40000)
[ 0.012666] pid_max: default: 32768 minimum: 301
[ 0.014227] Mount-cache hash table entries: 512 (order: 0, 4096 bytes, linear)
[ 0.014306] Mountpoint-cache hash table entries: 512 (order: 0, 4096 bytes, linear)
[ 0.040922] rcu: Hierarchical SRCU implementation.
[ 0.042741] EFI services will not be available.
[ 0.044926] smp: Bringing up secondary CPUs ...
[ 0.045062] smp: Brought up 1 node, 1 CPU
[ 0.054128] devtmpfs: initialized
[ 0.061463] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645041785100000 ns
[ 0.061753] futex hash table entries: 256 (order: 2, 16384 bytes, linear)
[ 0.067460] NET: Registered protocol family 16
[ 0.131233] vgaarb: loaded
[ 0.132530] SCSI subsystem initialized
[ 0.134485] usbcore: registered new interface driver usbfs
[ 0.134834] usbcore: registered new interface driver hub
[ 0.135035] usbcore: registered new device driver usb
[ 0.150024] clocksource: Switched to clocksource riscv_clocksource
[ 0.167109] NET: Registered protocol family 2
[ 0.168330] IP idents hash table entries: 2048 (order: 2, 16384 bytes, linear)
[ 0.172076] tcp_listen_portaddr_hash hash table entries: 128 (order: 0, 5120 bytes, linear)
[ 0.172242] TCP established hash table entries: 1024 (order: 1, 8192 bytes, linear)
[ 0.172480] TCP bind hash table entries: 1024 (order: 3, 32768 bytes, linear)
[ 0.172690] TCP: Hash tables configured (established 1024 bind 1024)
[ 0.173861] UDP hash table entries: 256 (order: 2, 24576 bytes, linear)
[ 0.174481] UDP-Lite hash table entries: 256 (order: 2, 24576 bytes, linear)
[ 0.175963] NET: Registered protocol family 1
[ 0.179024] RPC: Registered named UNIX socket transport module.
[ 0.179111] RPC: Registered udp transport module.
[ 0.179150] RPC: Registered tcp transport module.
[ 0.179186] RPC: Registered tcp NFSv4.1 backchannel transport module.
[ 0.179332] PCI: CLS 0 bytes, default 64
[ 0.182716] Unpacking initramfs...
[ 0.263706] Freeing initrd memory: 1056K
[ 0.265678] workingset: timestamp_bits=62 max_order=15 bucket_order=0
[ 0.281052] NFS: Registering the id_resolver key type
[ 0.282003] Key type id_resolver registered
[ 0.282074] Key type id_legacy registered
[ 0.282505] nfs4filelayout_init: NFSv4 File Layout Driver Registering...
[ 0.282631] nfs4flexfilelayout_init: NFSv4 Flexfile Layout Driver Registering...
[ 0.283481] 9p: Installing v9fs 9p2000 file system support
[ 0.284918] NET: Registered protocol family 38
[ 0.285416] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 251)
[ 0.285593] io scheduler mq-deadline registered
[ 0.285692] io scheduler kyber registered
[ 0.295484] pci-host-generic 30000000.pci: host bridge /soc/pci@30000000 ranges:
[ 0.296336] pci-host-generic 30000000.pci: IO 0x0003000000..0x000300ffff -&amp;gt; 0x0000000000
[ 0.296861] pci-host-generic 30000000.pci: MEM 0x0040000000..0x007fffffff -&amp;gt; 0x0040000000
[ 0.296961] pci-host-generic 30000000.pci: MEM 0x0400000000..0x07ffffffff -&amp;gt; 0x0400000000
[ 0.299940] pci-host-generic 30000000.pci: ECAM at [mem 0x30000000-0x3fffffff] for [bus 00-ff]
[ 0.301083] pci-host-generic 30000000.pci: PCI host bridge to bus 0000:00
[ 0.301328] pci_bus 0000:00: root bus resource [bus 00-ff]
[ 0.301486] pci_bus 0000:00: root bus resource [io 0x0000-0xffff]
[ 0.301528] pci_bus 0000:00: root bus resource [mem 0x40000000-0x7fffffff]
[ 0.301568] pci_bus 0000:00: root bus resource [mem 0x400000000-0x7ffffffff]
[ 0.302864] pci 0000:00:00.0: [1b36:0008] type 00 class 0x060000
[ 0.377412] Serial: 8250/16550 driver, 4 ports, IRQ sharing disabled
[ 0.389894] 10000000.uart: ttyS0 at MMIO 0x10000000 (irq = 2, base_baud = 230400) is a 16550A
[ 0.428017] printk: console [ttyS0] enabled
[ 0.430410] [drm] radeon kernel modesetting enabled.
[ 0.457312] loop: module loaded
[ 0.460726] libphy: Fixed MDIO Bus: probed
[ 0.464996] e1000e: Intel(R) PRO/1000 Network Driver
[ 0.465383] e1000e: Copyright(c) 1999 - 2015 Intel Corporation.
[ 0.466272] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[ 0.466724] ehci-pci: EHCI PCI platform driver
[ 0.467203] ehci-platform: EHCI generic platform driver
[ 0.467683] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[ 0.468129] ohci-pci: OHCI PCI platform driver
[ 0.468593] ohci-platform: OHCI generic platform driver
[ 0.469968] usbcore: registered new interface driver uas
[ 0.470477] usbcore: registered new interface driver usb-storage
[ 0.471603] mousedev: PS/2 mouse device common for all mice
[ 0.475055] goldfish_rtc 101000.rtc: registered as rtc0
[ 0.476070] goldfish_rtc 101000.rtc: setting system clock to 2024-02-20T19:37:51 UTC (1708457871)
[ 0.478889] syscon-poweroff soc:poweroff: pm_power_off already claimed (____ptrval____) sbi_shutdown
[ 0.479494] syscon-poweroff: probe of soc:poweroff failed with error -16
[ 0.480977] usbcore: registered new interface driver usbhid
[ 0.481324] usbhid: USB HID core driver
[ 0.483516] NET: Registered protocol family 10
[ 0.491589] Segment Routing with IPv6
[ 0.492256] sit: IPv6, IPv4 and MPLS over IPv4 tunneling driver
[ 0.495528] NET: Registered protocol family 17
[ 0.497086] 9pnet: Installing 9P2000 support
[ 0.497667] Key type dns_resolver registered
[ 0.498706] debug_vm_pgtable: [debug_vm_pgtable ]: Validating architecture page table helpers
[ 0.533266] Freeing unused kernel memory: 220K
[ 0.539682] Run /sbin/init as init process
Please press Enter to activate this console.
&lt;/code>&lt;/pre>
&lt;/details>
&lt;p>After seeing the prompt &lt;code>&amp;quot;Please press Enter to activate this console.&amp;quot;&lt;/code>, just press Enter to enter the system without a password.&lt;/p>
&lt;p>Execute several common commands to test, all can work normally:&lt;/p>
&lt;pre>&lt;code class="language-bash">/ # ls
bin etc proc sbin usr
dev linuxrc root sys
/ # pwd
/
/ # cd bin
/bin #
/ # ls
arch dumpkmap kill netstat setarch
ash echo link nice setpriv
base32 ed linux32 nuke setserial
base64 egrep linux64 pidof sh
busybox false ln ping sleep
cat fatattr login ping6 stat
chattr fdflush ls pipe_progress stty
chgrp fgrep lsattr printenv su
chmod fsync lzop ps sync
chown getopt makemime pwd tar
conspy grep mkdir reformime touch
cp gunzip mknod resume true
cpio gzip mktemp rev umount
cttyhack hostname more rm uname
date hush mount rmdir usleep
dd ionice mountpoint rpm vi
df iostat mpstat run-parts watch
dmesg ipcalc mt scriptreplay zcat
dnsdomainname kbd_mode mv sed
/bin #
&lt;/code>&lt;/pre>
&lt;p>To exit QEMU, press &lt;code>Ctrl + A&lt;/code>, release it, and then press the &lt;code>x&lt;/code> key to exit QEMU.&lt;/p>
&lt;p>If you want to transfer files into QEMU, you can use the mount method, as shown below:&lt;/p>
&lt;pre>&lt;code class="language-bash">$ mkdir rootfs
$ sudo mount -o loop rootfs.img rootfs
$ cp [-r] [file] ./rootfs/
$ sudo umount rootfs
&lt;/code>&lt;/pre>
&lt;h2 id="5-summary">
&lt;a href="#5-summary" class="header-anchor">#&lt;/a>
5. Summary
&lt;/h2>
&lt;p>At this point, we have successfully set up the toolchain environment for the XuanTie 900 series and the xuantie-qemu simulation environment, which lays the foundation for subsequent development, compilation, linking, running, and debugging of RISC-V applications based on the XuanTie 900 series chips.&lt;/p></description></item><item><title>GCC-13.2.0 Compilation and Installation</title><link>https://cuterwrite.top/en/p/gcc-13-source-install/</link><pubDate>Tue, 30 Jan 2024 11:00:00 +0000</pubDate><guid>https://cuterwrite.top/en/p/gcc-13-source-install/</guid><description>&lt;img src="https://cloud.cuterwrite.fun/img/cropped-2024-01-30.webp" alt="Featured image of post GCC-13.2.0 Compilation and Installation" />&lt;h1 id="gcc-1320-compilation-and-installation">
&lt;a href="#gcc-1320-compilation-and-installation" class="header-anchor">#&lt;/a>
GCC-13.2.0 Compilation and Installation
&lt;/h1>
&lt;p>GCC 13.1 has been released as the first stable version of GCC 13, as the annual feature release of the GNU Compiler Collection.&lt;/p>
&lt;p>GCC 13.1 is a major update that adds a Modula-2 language frontend for those interested in some vintage programming. Although there is new GCC Rust &lt;code>gccrs&lt;/code> code, it is disabled in v13.1. In this version, GCC&amp;rsquo;s static analyzer continues to improve, with more C23 and C++23 features, and support for many new x86_64/RISC-V/AArch64 processors.&lt;/p>
&lt;p>GCC 13.1 also provides initial AMD Zen 4 (Znver4) support for Ryzen 7000 series and EPYC 9004 series processors, OpenMP offloading improvements, support for issuing diagnostics in SARIF format based on JSON, additional Ada 2022 features, various new C/C++ warnings, support for AMD Instinct MI200 series for AMDGCN backend, Ampere-1A support, Neoverse-V2/Cortex-X3/Cortex-X1C/Cortex-A715 support, and many new Intel CPU supports. GCC 13 added Intel CPU targets for Raptor Lake, Meteor Lake, Sierra Forest, Grand Ridge, Emerald Rapids, and Granite Rapids, as well as related new Intel CPU instruction set extensions such as AMX-FP16, AVX-IFMA, AVX-VNNI-INT8, AVX-NE-CONVERT, RAO-INT, and AMX-Complex.&lt;/p>
&lt;p>In order to experience the new features of C++20, GCC 13.1 is also a great choice because it includes support for many new features of C++20. As of the writing of this article, GCC-13.2 has also been released, so I directly chose the latest version.&lt;/p>
&lt;h2 id="download-gcc-1320-source-code">
&lt;a href="#download-gcc-1320-source-code" class="header-anchor">#&lt;/a>
Download GCC-13.2.0 source code
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Download link: &lt;a class="link" href="https://mirror.koddos.net/gcc/releases/gcc-13.2.0/" target="_blank" rel="noopener" >Index of /gcc/releases/gcc-13.2.0
&lt;span style="white-space: nowrap;">&lt;svg width=".8em" height=".8em" viewBox="0 0 21 21"
xmlns="http://www.w3.org/2000/svg">
&lt;path d="m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z" fill="currentColor" />
&lt;path d="M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z"
fill="currentColor">
&lt;/svg>&lt;/span>
&lt;/a>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Download and extract GCC-13.2.0 source code&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">wget https://mirror.koddos.net/gcc/releases/gcc-13.2.0/gcc-13.2.0.tar.gz
tar -xzvf gcc-13.2.0.tar.gz
cd gcc-13.2.0
&lt;/code>&lt;/pre>
&lt;h2 id="start-compiling">
&lt;a href="#start-compiling" class="header-anchor">#&lt;/a>
Start compiling
&lt;/h2>
&lt;ul>
&lt;li>Compilation command:&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">./contrib/download_prerequisites
mkdir build &amp;amp;&amp;amp; cd build
../configure --prefix=/root/software/gcc-13.2.0 \
--with-pkgversion='glibc gcc V13.2.0' \
--enable-checking=release \
--enable-languages=c,c++ \
--disable-multilib \
--enable-bootstrap \
--enable-threads=posix \
--with-system-zlib \
--with-gmp=$GMP_HOME \
--with-mpfr=$MPFR_HOME \
--with-mpc=$MPC_HOME \
make -j$(nproc)
make install
&lt;/code>&lt;/pre>
&lt;h2 id="set-environment-variable">
&lt;a href="#set-environment-variable" class="header-anchor">#&lt;/a>
Set environment variable
&lt;/h2>
&lt;pre>&lt;code class="language-bash"># gcc-13.0.2.env
export GCC13_HOME=/root/software/gcc-13.2.0
export PATH=$GCC13_HOME/bin:$PATH
export LD_LIBRARY_PATH=$GCC13_HOME/lib64:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=$GCC13_HOME/lib:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=$GCC13_HOME/libexec:$LD_LIBRARY_PATH
export CPATH=$GCC13_HOME/include:$CPATH
export INCLUDE=$GCC13_HOME/include:$CPATH
export CC=$GCC13_HOME/bin/gcc
export CXX=$GCC13_HOME/bin/g++
export FC=$GCC13_HOME/bin/gfortran
export F77=$GCC13_HOME/bin/gfortran
export F90=$GCC13_HOME/bin/gfortran
export F95=$GCC13_HOME/bin/gfortran
&lt;/code>&lt;/pre>
&lt;h2 id="command-line-test">
&lt;a href="#command-line-test" class="header-anchor">#&lt;/a>
Command line test
&lt;/h2>
&lt;pre>&lt;code class="language-cmd">$ gcc -v
&lt;/code>&lt;/pre>
&lt;p>The output is:&lt;/p>
&lt;pre>&lt;code class="language-text">Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=/root/software/gcc-13.2.0/libexec/gcc/x86_64-pc-linux-gnu/13.2.0/lto-wrapper
Target: x86_64-pc-linux-gnu
Configured with: ../configure --prefix=/root/software/gcc-13.2.0 --with-pkgversion='glibc gcc V13.2.0' --enable-checking=release --enable-languages=c,c++,fortran --enable-threads=posix --enable-bootstrap --disable-multilib --with-system-zlib --with-gmp=/root/software/gmp/6.2.1 --with-mpfr=/root/software/mpfr/4.1.0 --with-mpc=/root/software/mpc/1.2.1
Thread model: posix
Supported LTO compression algorithms: zlib
gcc version 13.2.0 (glibc gcc V13.2.0)
&lt;/code>&lt;/pre>
&lt;p>Successfully compiled and installed.&lt;/p>
&lt;h2 id="main-new-features-of-c-20">
&lt;a href="#main-new-features-of-c-20" class="header-anchor">#&lt;/a>
Main new features of C++ 20
&lt;/h2>
&lt;ul>
&lt;li>The main new features of C++ 20 are as follows:&lt;/li>
&lt;li>Concepts: Concepts are type constraints for template parameters, making template code clearer and easier to understand. Concepts allow developers to define an interface that template parameters must satisfy in order to be accepted.&lt;/li>
&lt;li>Ranges (Ranges Library): This is a significant extension to the Standard Template Library (STL), introducing the concept of &amp;ldquo;ranges&amp;rdquo; to support a more declarative way of data processing.&lt;/li>
&lt;li>Spaceship Operator: &amp;lt;=&amp;gt; is called the spaceship operator, it can compare two values at once and return their relative order (less than, equal to, greater than).&lt;/li>
&lt;li>Modules: Modules are designed to replace the traditional separation of header files and source files, providing a new compilation unit that can significantly improve compilation time and code organization.&lt;/li>
&lt;li>&lt;strong>Coroutines&lt;/strong>: Coroutines are a lightweight thread that can switch between different execution points, rather than switching between function calls. Coroutines are a new way to write asynchronous code, allowing functions to pause and resume execution at different points in time without needing callback functions or complex state machines.
&lt;ul>
&lt;li>constexpr improvements: C++20 greatly expanded the scope of code that can be computed at compile time, including allowing &lt;code>virtual&lt;/code> functions, &lt;code>try&lt;/code>, and &lt;code>catch&lt;/code> blocks to be used in &lt;code>constexpr&lt;/code> functions.&lt;/li>
&lt;li>&lt;code>std::to_array&lt;/code> for initializer lists: This allows converting initializer lists to std::array, providing a type-safe way to handle fixed-size arrays.&lt;/li>
&lt;li>Simplification of template syntax: typename and class can be used interchangeably in template parameters, simplifying the template syntax.&lt;/li>
&lt;li>New standard attributes: Introduced several new attributes, such as &lt;code>[[likely]]&lt;/code> and &lt;code>[[unlikely]]&lt;/code>, to provide branch prediction hints to the compiler.&lt;/li>
&lt;li>New standard library components: for example, &lt;code>std::span&lt;/code>, which provides a view that can represent a part of an array or other contiguous sequence without needing to copy data.&lt;/li>
&lt;li>New synchronization libraries: For example, &lt;code>std::latch&lt;/code> and &lt;code>std::barrier&lt;/code>, providing new synchronization primitives for multithreading programming.&lt;/li>
&lt;li>std::format: This is a new formatting library that provides a type-safe way to format strings.&lt;/li>
&lt;li>Others, etc.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="main-new-features-of-c-23">
&lt;a href="#main-new-features-of-c-23" class="header-anchor">#&lt;/a>
Main new features of C++ 23
&lt;/h2>
&lt;ul>
&lt;li>The main new features of C++ 23 are as follows:
&lt;ul>
&lt;li>Lambada
&lt;ol>
&lt;li>Fix the issue with omitted parameter parentheses ().&lt;/li>
&lt;li>Change the scope of the return type at the end of the lambda.&lt;/li>
&lt;li>Allow the attributes of support functions to support lambda. This feature is actually supported by many compilers already.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Compile-time calculation: Mainly fix some bugs and continue to improve the capabilities of compile-time calculation.&lt;/li>
&lt;li>&lt;strong>Deducing this&lt;/strong>: Deducing this is one of the most important features in C++23. It actually provides a way to transform the &amp;ldquo;implicit object parameter&amp;rdquo; of non-static member functions into an &amp;ldquo;explicit object parameter&amp;rdquo;.
&lt;ul>
&lt;li>The main motivation for deducing this is to eliminate the redundancy caused by member function qualifiers.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Multidimensional array:
&lt;ol>
&lt;li>Support multi-dimensional subscript operator, i.e., operator[a, b, c, …].&lt;/li>
&lt;li>The standard library introduces std::mdspan.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Standard Library:
&lt;ul>
&lt;li>Enhance std::string and std::string_view&lt;/li>
&lt;li>Enhance std::optional&lt;/li>
&lt;li>std::flat_map and std::flat_set, replace std::map and std::set.&lt;/li>
&lt;li>std::stacktrace: Used for expanding the call stack after exception capture, facilitating debugging. Introducing stacktrace into the standard library can be seen as an enhancement of C++ exception handling capabilities.&lt;/li>
&lt;li>std::expected: Enhanced C++ error handling capability through return values. Similar to std::optional, but std::optional can only represent a normal value and an empty value (std::nullopt). In contrast, std::expected can represent an expected value and an error value, equivalent to a std::variant with two members, but the interface of std::expected is more convenient to use.&lt;/li>
&lt;li>std::unreachable(): An optimization hint for the compiler, indicating that this point is unreachable. If std::unreachable() is called, the result is undefined behavior.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Others:
&lt;ul>
&lt;li>Static operator() and static operator[]&lt;/li>
&lt;li>Assume expression [[assume(expr)]]&lt;/li>
&lt;li>size_t literal&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="coroutines-example">
&lt;a href="#coroutines-example" class="header-anchor">#&lt;/a>
Coroutines example
&lt;/h2>
&lt;pre>&lt;code class="language-cpp">#include &amp;lt;coroutine&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;optional&amp;gt;
template&amp;lt;typename T&amp;gt;
struct Generator {
struct promise_type;
using handle_type = std::coroutine_handle&amp;lt;promise_type&amp;gt;;
struct promise_type {
std::optional&amp;lt;T&amp;gt; current_value;
static auto get_return_object_on_allocation_failure() { return Generator{nullptr}; }
auto get_return_object() { return Generator{handle_type::from_promise(*this)}; }
auto initial_suspend() { return std::suspend_always{}; }
auto final_suspend() noexcept { return std::suspend_always{}; }
void unhandled_exception() { std::exit(1); }
template&amp;lt;typename U&amp;gt;
auto yield_value(U&amp;amp;&amp;amp; value) {
current_value = std::forward&amp;lt;U&amp;gt;(value);
return std::suspend_always{};
}
void return_void() {}
};
handle_type coro;
Generator(handle_type h): coro(h) {}
Generator(Generator const&amp;amp;) = delete;
Generator(Generator&amp;amp;&amp;amp; o) : coro(o.coro) { o.coro = nullptr; }
~Generator() { if (coro) coro.destroy(); }
T next() {
if (coro) {
coro.resume();
if (coro.done()) {
coro.promise().current_value.reset();
}
return *coro.promise().current_value;
}
return T{};
}
};
Generator&amp;lt;int&amp;gt; generateNumbers(int start, int end) {
for (int i = start; i &amp;lt;= end; ++i) {
co_yield i;
}
}
int main() {
auto numbers = generateNumbers(1, 5);
for (int i = 1; i &amp;lt;= 5; ++i) {
std::cout &amp;lt;&amp;lt; numbers.next() &amp;lt;&amp;lt; std::endl;
}
return 0;
}
&lt;/code>&lt;/pre>
&lt;p>Compile command:&lt;/p>
&lt;pre>&lt;code class="language-bash">g++ -o coroutines coroutines.cpp -std=c++20 -fcoroutines -O3
&lt;/code>&lt;/pre>
&lt;p>Run result:&lt;/p>
&lt;pre>&lt;code class="language-bash">./coroutines
1
2
3
4
5
&lt;/code>&lt;/pre>
&lt;h2 id="deducing-this-example">
&lt;a href="#deducing-this-example" class="header-anchor">#&lt;/a>
Deducing this example
&lt;/h2>
&lt;pre>&lt;code class="language-cpp">#include &amp;lt;iostream&amp;gt;
struct Test {
template &amp;lt;typename Self&amp;gt;
void explicitCall(this Self&amp;amp;&amp;amp; self, const std::string&amp;amp; text) {
std::cout &amp;lt;&amp;lt; text &amp;lt;&amp;lt; &amp;quot;: &amp;quot;;
std::forward&amp;lt;Self&amp;gt;(self).implicitCall();
std::cout &amp;lt;&amp;lt; '\n';
}
void implicitCall() &amp;amp; {
std::cout &amp;lt;&amp;lt; &amp;quot;non const lvalue&amp;quot;;
}
void implicitCall() const&amp;amp; {
std::cout &amp;lt;&amp;lt; &amp;quot;const lvalue&amp;quot;;
}
void implicitCall() &amp;amp;&amp;amp; {
std::cout &amp;lt;&amp;lt; &amp;quot;non const rvalue&amp;quot;;
}
void implicitCall() const&amp;amp;&amp;amp; {
std::cout &amp;lt;&amp;lt; &amp;quot;const rvalue&amp;quot;;
}
};
int main() {
std::cout &amp;lt;&amp;lt; '\n';
Test test;
const Test constTest;
test.explicitCall(&amp;quot;test&amp;quot;);
constTest.explicitCall(&amp;quot;constTest&amp;quot;);
std::move(test).explicitCall(&amp;quot;std::move(test)&amp;quot;);
std::move(constTest).explicitCall(&amp;quot;std::move(consTest)&amp;quot;);
std::cout &amp;lt;&amp;lt; '\n';
}
&lt;/code>&lt;/pre></description></item></channel></rss>