<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>MySQL on cuterwrite</title>
        <link>https://cuterwrite.top/tags/mysql/</link>
        <description>Recent content in MySQL on cuterwrite</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>cuterwrite</copyright>
        <lastBuildDate>Tue, 04 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://cuterwrite.top/tags/mysql/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>计算机基础知识点总结（数据库系统 &#43; MySQL &#43; Redis）</title>
        <link>https://cuterwrite.top/p/database-system/</link>
        <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/database-system/</guid>
        <description>&lt;img src="https://cuterwrite-1302252842.file.myqcloud.com/typora/image-hosting-master/image-hosting-master/20210503/windmills-5614160_1920.7f194ofsigg0.jpg" alt="Featured image of post 计算机基础知识点总结（数据库系统 &#43; MySQL &#43; Redis）" /&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;  &lt;em&gt;generated with &lt;a class=&#34;link&#34; href=&#34;https://github.com/thlorenz/doctoc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DocToc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E4%B8%80%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86&#34; &gt;一、数据库系统原理&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-%E4%BA%8B%E5%8A%A1&#34; &gt;1 事务&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#11-%E6%A6%82%E5%BF%B5&#34; &gt;1.1 概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#12-acid&#34; &gt;1.2 ACID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#13-autocommit&#34; &gt;1.3 AUTOCOMMIT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%E5%B9%B6%E5%8F%91%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98&#34; &gt;2 并发一致性问题&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#21-%E4%B8%A2%E5%A4%B1%E4%BF%AE%E6%94%B9&#34; &gt;2.1 丢失修改&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#22-%E8%AF%BB%E8%84%8F%E6%95%B0%E6%8D%AE&#34; &gt;2.2 读脏数据&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#23-%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB&#34; &gt;2.3 不可重复读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#24-%E5%B9%BB%E5%BD%B1%E8%AF%BB&#34; &gt;2.4 幻影读&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-%E5%B0%81%E9%94%81&#34; &gt;3 封锁&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#31-%E5%B0%81%E9%94%81%E7%B2%92%E5%BA%A6&#34; &gt;3.1 封锁粒度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#32-%E5%B0%81%E9%94%81%E7%B1%BB%E5%9E%8B&#34; &gt;3.2 封锁类型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#321-%E8%AF%BB%E5%86%99%E9%94%81&#34; &gt;3.2.1 读写锁&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#322-%E6%84%8F%E5%90%91%E9%94%81&#34; &gt;3.2.2 意向锁&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#33-%E5%B0%81%E9%94%81%E5%8D%8F%E8%AE%AE&#34; &gt;3.3 封锁协议&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#331-%E4%B8%89%E7%BA%A7%E5%B0%81%E9%94%81%E5%8D%8F%E8%AE%AE&#34; &gt;3.3.1 三级封锁协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#332-%E4%BA%8C%E6%AE%B5%E9%94%81%E5%8D%8F%E8%AE%AE&#34; &gt;3.3.2 二段锁协议&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#34-mysql%E9%9A%90%E5%BC%8F%E4%B8%8E%E6%98%BE%E7%A4%BA%E9%94%81%E5%AE%9A&#34; &gt;3.4 MySQL隐式与显示锁定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB&#34; &gt;4 隔离级别&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#41-%E6%9C%AA%E6%8F%90%E4%BA%A4%E8%AF%BB&#34; &gt;4.1 未提交读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#42-%E6%8F%90%E4%BA%A4%E8%AF%BB&#34; &gt;4.2 提交读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#43-%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB&#34; &gt;4.3 可重复读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#44-%E5%8F%AF%E4%B8%B2%E8%A1%8C%E5%8C%96&#34; &gt;4.4 可串行化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5-%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6&#34; &gt;5 多版本并发控制&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#51-%E5%9F%BA%E6%9C%AC%E6%80%9D%E6%83%B3&#34; &gt;5.1 基本思想&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#52-%E7%89%88%E6%9C%AC%E5%8F%B7&#34; &gt;5.2 版本号&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#53-undo%E6%97%A5%E5%BF%97&#34; &gt;5.3 Undo日志&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#54-readview&#34; &gt;5.4 ReadView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#55-%E5%BF%AB%E7%85%A7%E8%AF%BB%E4%B8%8E%E5%BD%93%E5%89%8D%E8%AF%BB&#34; &gt;5.5 快照读与当前读&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#551-%E5%BF%AB%E7%85%A7%E8%AF%BB&#34; &gt;5.5.1 快照读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#552-%E5%BD%93%E5%89%8D%E8%AF%BB&#34; &gt;5.5.2 当前读&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6-next-key-locks&#34; &gt;6 Next-Key Locks&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#61-record-locks&#34; &gt;6.1 Record Locks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#62-gap-locks&#34; &gt;6.2 Gap Locks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#63-next-key-locks&#34; &gt;6.3 Next-Key Locks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E4%BA%8Cmysql&#34; &gt;二、MySQL&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-%E7%B4%A2%E5%BC%95&#34; &gt;1 索引&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#11-b%E6%A0%91%E5%8E%9F%E7%90%86&#34; &gt;1.1 B+树原理&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#111-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&#34; &gt;1.1.1 数据结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#112-%E6%93%8D%E4%BD%9C&#34; &gt;1.1.2. 操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#113-%E4%B8%8E%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E6%AF%94%E8%BE%83&#34; &gt;1.1.3 与红黑树的比较&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#12-mysql%E7%B4%A2%E5%BC%95&#34; &gt;1.2 MySQL索引&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#121-b%E6%A0%91%E7%B4%A2%E5%BC%95&#34; &gt;1.2.1 B+树索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#122-%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95&#34; &gt;1.2.2 哈希索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#123-%E5%85%A8%E6%96%87%E7%B4%A2%E5%BC%95&#34; &gt;1.2.3 全文索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#124-%E7%A9%BA%E9%97%B4%E6%95%B0%E6%8D%AE%E7%B4%A2%E5%BC%95&#34; &gt;1.2.4 空间数据索引&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#13-%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96&#34; &gt;1.3 索引优化&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#131-%E7%8B%AC%E7%AB%8B%E7%9A%84%E5%88%97&#34; &gt;1.3.1. 独立的列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#132-%E5%A4%9A%E5%88%97%E7%B4%A2%E5%BC%95&#34; &gt;1.3.2. 多列索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#133-%E7%B4%A2%E5%BC%95%E5%88%97%E7%9A%84%E9%A1%BA%E5%BA%8F&#34; &gt;1.3.3. 索引列的顺序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#134-%E5%89%8D%E7%BC%80%E7%B4%A2%E5%BC%95&#34; &gt;1.3.4. 前缀索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#135-%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95&#34; &gt;1.3.5. 覆盖索引&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#14-%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BC%98%E7%82%B9&#34; &gt;1.4 索引的优点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#15-%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%BF%E7%94%A8%E6%9D%A1%E4%BB%B6&#34; &gt;1.5 索引的使用条件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#16-mysql%E9%87%8C%E7%9A%84%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B&#34; &gt;1.6 MySQL里的索引类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#17-%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E5%92%8C%E9%9D%9E%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95&#34; &gt;1.7 聚簇索引和非聚簇索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#18-%E5%9B%9E%E8%A1%A8%E6%9F%A5%E8%AF%A2&#34; &gt;1.8 回表查询&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96&#34; &gt;2 查询性能优化&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#21-explain&#34; &gt;2.1 Explain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#22-%E4%BC%98%E5%8C%96%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE&#34; &gt;2.2 优化数据访问&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#221-%E5%87%8F%E5%B0%91%E8%AF%B7%E6%B1%82%E7%9A%84%E6%95%B0%E6%8D%AE%E9%87%8F&#34; &gt;2.2.1 减少请求的数据量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#222-%E5%87%8F%E5%B0%91%E6%89%AB%E6%8F%8F%E7%9A%84%E8%A1%8C%E6%95%B0&#34; &gt;2.2.2 减少扫描的行数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#23-%E9%87%8D%E6%9E%84%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F&#34; &gt;2.3 重构查询方式&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#231-%E5%88%87%E5%88%86%E5%A4%A7%E6%9F%A5%E8%AF%A2&#34; &gt;2.3.1 切分大查询&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#232-%E5%88%86%E8%A7%A3%E5%A4%A7%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2&#34; &gt;2.3.2 分解大连接查询&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E&#34; &gt;3 存储引擎&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#31-innodb&#34; &gt;3.1 InnoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#32-myisam&#34; &gt;3.2 MyISAM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#33-%E5%8C%BA%E5%88%AB&#34; &gt;3.3 区别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B&#34; &gt;4 数据类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5-%E5%88%86%E8%A1%A8&#34; &gt;5 分表&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#51-%E6%B0%B4%E5%B9%B3%E5%88%87%E5%88%86&#34; &gt;5.1 水平切分&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#52-%E5%9E%82%E7%9B%B4%E5%88%87%E5%88%86&#34; &gt;5.2 垂直切分&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#53-sharding-%E7%AD%96%E7%95%A5&#34; &gt;5.3 Sharding 策略&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#54-sharding-%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98&#34; &gt;5.4 Sharding 存在的问题&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#541-%E4%BA%8B%E5%8A%A1%E9%97%AE%E9%A2%98&#34; &gt;5.4.1. 事务问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#542-%E8%BF%9E%E6%8E%A5&#34; &gt;5.4.2. 连接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#543-id-%E5%94%AF%E4%B8%80%E6%80%A7&#34; &gt;5.4.3. ID 唯一性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6-%E5%A4%8D%E5%88%B6&#34; &gt;6 复制&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#61-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6&#34; &gt;6.1 主从复制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#62-%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB&#34; &gt;6.2 读写分离&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E4%B8%89Redis&#34; &gt;三、Redis&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-%E6%A6%82%E8%BF%B0&#34; &gt;1 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B&#34; &gt;2 数据类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&#34; &gt;3 数据结构&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#31-%E5%AD%97%E5%85%B8&#34; &gt;3.1 字典&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#32-%E8%B7%B3%E8%B7%83%E8%A1%A8&#34; &gt;3.2 跳跃表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF&#34; &gt;4 使用场景&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#41-%E8%AE%A1%E6%95%B0%E5%99%A8&#34; &gt;4.1 计数器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#42-%E7%BC%93%E5%AD%98&#34; &gt;4.2 缓存&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#43-%E6%9F%A5%E6%89%BE%E8%A1%A8&#34; &gt;4.3 查找表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#44-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97&#34; &gt;4.4 消息队列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#45-%E4%BC%9A%E8%AF%9D%E7%BC%93%E5%AD%98&#34; &gt;4.5 会话缓存&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#46-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81&#34; &gt;4.6 分布式锁&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#47-%E5%85%B6%E4%BB%96&#34; &gt;4.7 其他&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5-%E9%94%AE%E7%9A%84%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4&#34; &gt;5 键的过期时间&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6-%E6%95%B0%E6%8D%AE%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5&#34; &gt;6 数据淘汰策略&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#7-%E6%8C%81%E4%B9%85%E5%8C%96&#34; &gt;7 持久化&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#71-rdb&#34; &gt;7.1 RDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#72-aof&#34; &gt;7.2 AOF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#8-%E4%BA%8B%E5%8A%A1&#34; &gt;8 事务&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#9-%E4%BA%8B%E4%BB%B6&#34; &gt;9 事件&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#91-%E6%96%87%E4%BB%B6%E4%BA%8B%E4%BB%B6&#34; &gt;9.1 文件事件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#92-%E6%97%B6%E9%97%B4%E4%BA%8B%E4%BB%B6&#34; &gt;9.2 时间事件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#93-%E4%BA%8B%E4%BB%B6%E7%9A%84%E8%B0%83%E5%BA%A6%E4%B8%8E%E6%89%A7%E8%A1%8C&#34; &gt;9.3 事件的调度与执行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#10-%E5%A4%8D%E5%88%B6&#34; &gt;10 复制&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#101-%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B&#34; &gt;10.1 连接过程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#102-%E4%B8%BB%E4%BB%8E%E9%93%BE&#34; &gt;10.2 主从链&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#11-%E5%93%A8%E5%85%B5&#34; &gt;11 哨兵&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#12-%E5%88%86%E7%89%87&#34; &gt;12 分片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#13-io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8&#34; &gt;13 IO多路复用&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#131-%E4%BB%80%E4%B9%88%E6%98%AFio%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8&#34; &gt;13.1 什么是IO多路复用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#132-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8&#34; &gt;13.2 为什么需要IO多路复用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#133-io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F&#34; &gt;13.3 IO多路复用的实现方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#134-select%E7%BC%BA%E7%82%B9&#34; &gt;13.4 select缺点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#135-poll%E4%B8%8Eselect%E5%AF%B9%E6%AF%94&#34; &gt;13.5 poll与select对比&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#136-poll%E7%BC%BA%E7%82%B9&#34; &gt;13.6 poll缺点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#137-epoll%E7%BC%BA%E7%82%B9&#34; &gt;13.7 epoll缺点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#138-epoll%E7%9A%84%E5%BA%94%E7%94%A8&#34; &gt;13.8 epoll的应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#139-selectpollepoll%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB&#34; &gt;13.9 select/poll/epoll之间的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1310-epoll-lt%E5%92%8Cet%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB&#34; &gt;13.10 epoll LT和ET模式的区别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;一数据库系统原理&#34;&gt;一、数据库系统原理&lt;/h1&gt;
&lt;h2 id=&#34;1-事务&#34;&gt;1 事务&lt;/h2&gt;
&lt;h3 id=&#34;11-概念&#34;&gt;1.1 概念&lt;/h3&gt;
&lt;p&gt;事务指的是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。&lt;/p&gt;
&lt;h3 id=&#34;12-acid&#34;&gt;1.2 ACID&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;原子性&lt;/p&gt;
&lt;p&gt;事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。&lt;/p&gt;
&lt;p&gt;回滚可以用回滚日志（Undo Log）来实现，回滚日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一致性&lt;/p&gt;
&lt;p&gt;数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对同一个数据的读取结果都是相同的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;隔离性&lt;/p&gt;
&lt;p&gt;一个事务所做的修改在最终提交以前，对其它事务是不可见的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;持久性&lt;/p&gt;
&lt;p&gt;一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。系统发生崩溃可以用重做日志（Redo Log）进行恢复，从而实现持久性。与回滚日志记录数据的逻辑修改不同，重做日志记录的是数据页的物理修改。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207210437023.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;只有满足一致性，事务的执行结果才是正确的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务满足持久化是为了能应对系统崩溃的情况。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;13-autocommit&#34;&gt;1.3 AUTOCOMMIT&lt;/h3&gt;
&lt;p&gt;MySQL 默认采用自动提交模式。也就是说，如果不显式使用&lt;code&gt;START TRANSACTION&lt;/code&gt;语句来开始一个事务，那么每个查询操作都会被当做一个事务并自动提交。&lt;/p&gt;
&lt;h2 id=&#34;2-并发一致性问题&#34;&gt;2 并发一致性问题&lt;/h2&gt;
&lt;h3 id=&#34;21-丢失修改&#34;&gt;2.1 丢失修改&lt;/h3&gt;
&lt;p&gt;丢失修改指一个事务的更新操作被另外一个事务的更新操作替换。一般在现实生活中常会遇到，例如：T&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 和 T&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; 两个事务都对一个数据进行修改，T&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 先修改并提交生效，T&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; 随后修改，T&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; 的修改覆盖了 T&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 的修改。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207221744244.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;22-读脏数据&#34;&gt;2.2 读脏数据&lt;/h3&gt;
&lt;p&gt;读脏数据指在不同的事务下，当前事务可以读到另外事务未提交的数据。例如：T&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 修改一个数据但未提交，T&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; 随后读取这个数据。如果 T&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 撤销了这次修改，那么 T&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; 读取的数据是脏数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207221920368.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;23-不可重复读&#34;&gt;2.3 不可重复读&lt;/h3&gt;
&lt;p&gt;不可重复读指在一个事务内多次读取同一数据集合。在这一事务还未结束前，另一事务也访问了该同一数据集合并做了修改，由于第二个事务的修改，第一次事务的两次读取的数据可能不一致。例如：T&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; 读取一个数据，T&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 对该数据做了修改。如果 T&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; 再次读取这个数据，此时读取的结果和第一次读取的结果不同。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207222102010.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;24-幻影读&#34;&gt;2.4 幻影读&lt;/h3&gt;
&lt;p&gt;幻读本质上也属于不可重复读的情况，T&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 读取某个范围的数据，T&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; 在这个范围内插入新的数据，T&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207222134306.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-封锁&#34;&gt;3 封锁&lt;/h2&gt;
&lt;h3 id=&#34;31-封锁粒度&#34;&gt;3.1 封锁粒度&lt;/h3&gt;
&lt;p&gt;MySQL 中提供了两种封锁粒度：行级锁以及表级锁。&lt;/p&gt;
&lt;p&gt;应该尽量只锁定需要修改的那部分数据，而不是所有的资源。锁定的数据量越少，发生锁争用的可能就越小，系统的并发程度就越高。&lt;/p&gt;
&lt;p&gt;但是加锁需要消耗资源，锁的各种操作（包括获取锁、释放锁、以及检查锁状态）都会增加系统开销。因此封锁粒度越小，系统开销就越大。&lt;/p&gt;
&lt;p&gt;在选择封锁粒度时，需要在锁开销和并发程度之间做一个权衡。&lt;/p&gt;
&lt;h3 id=&#34;32-封锁类型&#34;&gt;3.2 封锁类型&lt;/h3&gt;
&lt;h4 id=&#34;321-读写锁&#34;&gt;3.2.1 读写锁&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;互斥锁（Exclusive），简写为 X 锁，又称写锁。&lt;/li&gt;
&lt;li&gt;共享锁（Shared），简写为 S 锁，又称读锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有以下两个规定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个事务对数据对象 A 加了 X 锁，就可以对 A 进行读取和更新。加锁期间其它事务不能对 A 加任何锁。&lt;/li&gt;
&lt;li&gt;一个事务对数据对象 A 加了 S 锁，可以对 A 进行读取操作，但是不能进行更新操作。加锁期间其它事务能对 A 加 S 锁，但是不能加 X 锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;锁的兼容关系如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207213523777.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;322-意向锁&#34;&gt;3.2.2 意向锁&lt;/h4&gt;
&lt;p&gt;使用意向锁（Intention Locks）可以更容易地支持多粒度封锁。&lt;/p&gt;
&lt;p&gt;在存在行级锁和表级锁的情况下，事务 T 想要对表 A 加 X 锁，就需要先检测是否有其它事务对表 A 或者表 A 中的任意一行加了锁，那么就需要对表 A 的每一行都检测一次，这是非常耗时的。&lt;/p&gt;
&lt;p&gt;意向锁在原来的 X/S 锁之上引入了 IX/IS，IX/IS 都是表锁，用来表示一个事务想要在表中的某个数据行上加 X 锁或 S 锁。有以下两个规定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个事务在获得某个数据行对象的 S 锁之前，必须先获得表的 IS 锁或者更强的锁；&lt;/li&gt;
&lt;li&gt;一个事务在获得某个数据行对象的 X 锁之前，必须先获得表的 IX 锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过引入意向锁，事务 T 想要对表 A 加 X 锁，只需要先检测是否有其它事务对表 A 加了 X/IX/S/IS 锁，如果加了就表示有其它事务正在使用这个表或者表中某一行的锁，因此事务 T 加 X 锁失败。&lt;/p&gt;
&lt;p&gt;各种锁的兼容关系如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207214442687.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;解释如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任意 IS/IX 锁之间都是兼容的，因为它们只表示想要对表加锁，而不是真正加锁；&lt;/li&gt;
&lt;li&gt;这里兼容关系针对的是表级锁，而表级的 IX 锁和行级的 X 锁兼容，两个事务可以对两个数据行加 X 锁。（事务 T&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 想要对数据行 R&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 加 X 锁，事务 T&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; 想要对同一个表的数据行 R&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; 加 X 锁，两个事务都需要对该表加 IX 锁，但是 IX 锁是兼容的，并且 IX 锁与行级的 X 锁也是兼容的，因此两个事务都能加锁成功，对同一个表中的两个数据行做修改。）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;33-封锁协议&#34;&gt;3.3 封锁协议&lt;/h3&gt;
&lt;h4 id=&#34;331-三级封锁协议&#34;&gt;3.3.1 三级封锁协议&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;一级封锁协议：事务 T 要修改数据 A 时必须加 X 锁，直到 T 结束才释放锁。可以解决丢失修改问题，因为不能同时有两个事务对同一个数据进行修改，那么事务的修改就不会被覆盖。&lt;/li&gt;
&lt;li&gt;二级封锁协议：在一级的基础上，要求读取数据 A 时必须加 S 锁，读取完马上释放 S 锁。可以解决读脏数据问题，因为如果一个事务在对数据 A 进行修改，根据 1 级封锁协议，会加 X 锁，那么就不能再加 S 锁了，也就是不会读入数据。&lt;/li&gt;
&lt;li&gt;三级封锁协议：在二级的基础上，要求读取数据 A 时必须加 S 锁，直到事务结束了才能释放 S 锁。可以解决不可重复读的问题，因为读 A 时，其它事务不能对 A 加 X 锁，从而避免了在读的期间数据发生改变。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;332-二段锁协议&#34;&gt;3.3.2 二段锁协议&lt;/h4&gt;
&lt;p&gt;加锁和解锁分为两个阶段进行。&lt;/p&gt;
&lt;p&gt;可串行化调度是指，通过并发控制，使得并发执行的事务结果与某个串行执行的事务结果相同。串行执行的事务互不干扰，不会出现并发一致性问题。&lt;/p&gt;
&lt;p&gt;事务遵循两段锁协议是保证可串行化调度的充分条件。例如以下操作满足两段锁协议，它是可串行化调度。&lt;/p&gt;
&lt;h3 id=&#34;34-mysql隐式与显示锁定&#34;&gt;3.4 MySQL隐式与显示锁定&lt;/h3&gt;
&lt;p&gt;MySQL 的 InnoDB 存储引擎采用两段锁协议，会根据隔离级别在需要的时候自动加锁，并且所有的锁都是在同一时刻被释放，这被称为隐式锁定。&lt;/p&gt;
&lt;p&gt;InnoDB 也可以使用特定的语句进行显示锁定：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;LOCK&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;In&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SHARE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;MODE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FOR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;4-隔离级别&#34;&gt;4 隔离级别&lt;/h2&gt;
&lt;h3 id=&#34;41-未提交读&#34;&gt;4.1 未提交读&lt;/h3&gt;
&lt;p&gt;事务中的修改，即使没有提交，对其它事务也是可见的。&lt;/p&gt;
&lt;h3 id=&#34;42-提交读&#34;&gt;4.2 提交读&lt;/h3&gt;
&lt;p&gt;一个事务只能读取已经提交的事务所做的修改。换句话说，一个事务所做的修改在提交之前对其它事务是不可见的。&lt;/p&gt;
&lt;h3 id=&#34;43-可重复读&#34;&gt;4.3 可重复读&lt;/h3&gt;
&lt;p&gt;保证在同一个事务中多次读取同一数据的结果是一样的。&lt;/p&gt;
&lt;h3 id=&#34;44-可串行化&#34;&gt;4.4 可串行化&lt;/h3&gt;
&lt;p&gt;强制事务串行执行，这样多个事务互不干扰，不会出现并发一致性问题。&lt;/p&gt;
&lt;p&gt;该隔离级别需要加锁实现，因为要使用加锁机制保证同一时间只有一个事务执行，也就是保证事务串行执行。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207223400787.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-多版本并发控制&#34;&gt;5 多版本并发控制&lt;/h2&gt;
&lt;p&gt;多版本并发控制（Multi-Version Concurrency Control, MVCC）是 MySQL 的 InnoDB 存储引擎实现隔离级别的一种具体方式，用于实现提交读和可重复读这两种隔离级别。而未提交读隔离级别总是读取最新的数据行，要求很低，无需使用 MVCC。可串行化隔离级别需要对所有读取的行都加锁，单纯使用 MVCC 无法实现。&lt;/p&gt;
&lt;h3 id=&#34;51-基本思想&#34;&gt;5.1 基本思想&lt;/h3&gt;
&lt;p&gt;在封锁一节中提到，加锁能解决多个事务同时执行时出现的并发一致性问题。在实际场景中读操作往往多于写操作，因此又引入了读写锁来避免不必要的加锁操作，例如读和读没有互斥关系。读写锁中读和写操作仍然是互斥的，而 MVCC 利用了多版本的思想，写操作更新最新的版本快照，而读操作去读旧版本快照，没有互斥关系，这一点和 CopyOnWrite 类似。&lt;/p&gt;
&lt;p&gt;在 MVCC 中事务的修改操作（DELETE、INSERT、UPDATE）会为数据行新增一个版本快照。&lt;/p&gt;
&lt;p&gt;脏读和不可重复读最根本的原因是事务读取到其它事务未提交的修改。在事务进行读取操作时，为了解决脏读和不可重复读问题，MVCC 规定只能读取已经提交的快照。当然一个事务可以读取自身未提交的快照，这不算是脏读。&lt;/p&gt;
&lt;h3 id=&#34;52-版本号&#34;&gt;5.2 版本号&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;系统版本号 SYS_ID：是一个递增的数字，每开始一个新的事务，系统版本号就会自动递增。&lt;/li&gt;
&lt;li&gt;事务版本号 TRX_ID ：事务开始时的系统版本号。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;53-undo日志&#34;&gt;5.3 Undo日志&lt;/h3&gt;
&lt;p&gt;MVCC 的多版本指的是多个版本的快照，快照存储在 Undo 日志中，该日志通过回滚指针 ROLL_PTR 把一个数据行的所有快照连接起来。&lt;/p&gt;
&lt;p&gt;例如在 MySQL 创建一个表 t，包含主键 id 和一个字段 x。我们先插入一个数据行，然后对该数据行执行两次更新操作。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;INSERT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;INTO&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;VALUES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;因为没有使用 &lt;code&gt;START TRANSACTION&lt;/code&gt; 将上面的操作当成一个事务来执行，根据 MySQL 的 AUTOCOMMIT 机制，每个操作都会被当成一个事务来执行，所以上面的操作总共涉及到三个事务。快照中除了记录事务版本号 TRX_ID 和操作之外，还记录了一个 bit 的 DEL 字段，用于标记是否被删除。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208164808217.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;INSERT、UPDATE、DELETE 操作会创建一个日志，并将事务版本号 TRX_ID  写入。DELETE 可以看成是一个特殊的 UPDATE，还会额外将 DEL 字段设置为 1。&lt;/p&gt;
&lt;h3 id=&#34;54-readview&#34;&gt;5.4 ReadView&lt;/h3&gt;
&lt;p&gt;MVCC 维护了一个 ReadView 结构，主要包含了当前系统未提交的事务列表 TRX_IDs {TRX_ID_1, TRX_ID_2, &amp;hellip;}，还有该列表的最小值 TRX_ID_MIN 和 TRX_ID_MAX。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208171445674.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在进行 SELECT 操作时，根据数据行快照的 TRX_ID 与 TRX_ID_MIN 和 TRX_ID_MAX 之间的关系，从而判断数据行快照是否可以使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TRX_ID &amp;lt; TRX_ID_MIN，表示该数据行快照时在当前所有未提交事务之前进行更改的，因此可以使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TRX_ID &amp;gt; TRX_ID_MAX，表示该数据行快照是在事务启动之后被更改的，因此不可使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TRX_ID_MIN &amp;lt;= TRX_ID &amp;lt;= TRX_ID_MAX，需要根据隔离级别再进行判断：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提交读：如果 TRX_ID  在 TRX_IDs  列表中，表示该数据行快照对应的事务还未提交，则该快照不可使用。否则表示已经提交，可以使用。&lt;/li&gt;
&lt;li&gt;可重复读：都不可以使用。因为如果可以使用的话，那么其它事务也可以读到这个数据行快照并进行修改，那么当前事务再去读这个数据行得到的值就会发生改变，也就是出现了不可重复读问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在数据行快照不可使用的情况下，需要沿着 Undo Log 的回滚指针 ROLL_PTR  找到下一个快照，再进行上面的判断。&lt;/p&gt;
&lt;h3 id=&#34;55-快照读与当前读&#34;&gt;5.5 快照读与当前读&lt;/h3&gt;
&lt;h4 id=&#34;551-快照读&#34;&gt;5.5.1 快照读&lt;/h4&gt;
&lt;p&gt;MVCC 的 SELECT 操作是快照中的数据，不需要进行加锁操作。&lt;/p&gt;
&lt;h4 id=&#34;552-当前读&#34;&gt;5.5.2 当前读&lt;/h4&gt;
&lt;p&gt;MVCC 其它会对数据库进行修改的操作（INSERT、UPDATE、DELETE）需要进行加锁操作，从而读取最新的数据。可以看到 MVCC 并不是完全不用加锁，而只是避免了 SELECT 的加锁操作。&lt;/p&gt;
&lt;h2 id=&#34;6-next-key-locks&#34;&gt;6 Next-Key Locks&lt;/h2&gt;
&lt;p&gt;Next-Key Locks 是 MySQL 的 InnoDB 存储引擎的一种锁实现。&lt;/p&gt;
&lt;p&gt;MVCC 不能解决幻影读问题，Next-Key Locks 就是为了解决这个问题而存在的。在可重复读（REPEATABLE READ）隔离级别下，使用 MVCC + Next-Key Locks 可以解决幻读问题。&lt;/p&gt;
&lt;h3 id=&#34;61-record-locks&#34;&gt;6.1 Record Locks&lt;/h3&gt;
&lt;p&gt;锁定一个记录上的索引，而不是记录本身。&lt;/p&gt;
&lt;p&gt;如果表没有设置索引，InnoDB 会自动在主键上创建隐藏的聚簇索引，因此 Record Locks 依然可以使用。&lt;/p&gt;
&lt;h3 id=&#34;62-gap-locks&#34;&gt;6.2 Gap Locks&lt;/h3&gt;
&lt;p&gt;锁定索引之间的间隙，但是不包含索引本身。&lt;/p&gt;
&lt;h3 id=&#34;63-next-key-locks&#34;&gt;6.3 Next-Key Locks&lt;/h3&gt;
&lt;p&gt;它是 Record Locks 和 Gap Locks 的结合，不仅锁定一个记录上的索引，也锁定索引之间的间隙。它锁定一个前开后闭区间。&lt;/p&gt;
&lt;h1 id=&#34;二mysql&#34;&gt;二、MySQL&lt;/h1&gt;
&lt;h2 id=&#34;1-索引&#34;&gt;1 索引&lt;/h2&gt;
&lt;h3 id=&#34;11-b树原理&#34;&gt;1.1 B+树原理&lt;/h3&gt;
&lt;h4 id=&#34;111-数据结构&#34;&gt;1.1.1 数据结构&lt;/h4&gt;
&lt;p&gt;B Tree 指的是 Balance Tree，也就是平衡树。平衡树是一颗查找树，并且所有叶子节点位于同一层。&lt;/p&gt;
&lt;p&gt;B+ Tree 是基于 B Tree 和&lt;strong&gt;叶子节点顺序访问指针&lt;/strong&gt;进行实现，它具有 B Tree 的平衡性，并且通过顺序访问指针来提高&lt;strong&gt;区间查询&lt;/strong&gt;的性能。&lt;/p&gt;
&lt;p&gt;在 B+ Tree 中，一个节点中的 key 从左到右非递减排列，如果某个指针的左右相邻 key 分别是 key&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt; 和 key&lt;!-- raw HTML omitted --&gt;i+1&lt;!-- raw HTML omitted --&gt;，且不为 null，则该指针指向节点的所有 key 大于等于 key&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt; 且小于等于 key&lt;!-- raw HTML omitted --&gt;i+1&lt;!-- raw HTML omitted --&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/33576849-9275-47bb-ada7-8ded5f5e7c73.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;112-操作&#34;&gt;1.1.2. 操作&lt;/h4&gt;
&lt;p&gt;进行查找操作时，首先在根节点进行&lt;strong&gt;二分查找&lt;/strong&gt;，找到一个 key 所在的指针，然后递归地在指针所指向的节点进行查找。直到查找到叶子节点，然后在叶子节点上进行二分查找，找出 key 所对应的 data。&lt;/p&gt;
&lt;p&gt;插入删除操作会破坏平衡树的平衡性，因此在进行插入删除操作之后，需要对树进行&lt;strong&gt;分裂、合并、旋转&lt;/strong&gt;等操作来维护平衡性。&lt;/p&gt;
&lt;h4 id=&#34;113-与红黑树的比较&#34;&gt;1.1.3 与红黑树的比较&lt;/h4&gt;
&lt;p&gt;红黑树等平衡树也可以用来实现索引，但是文件系统及数据库系统普遍采用 B+ Tree 作为索引结构，这是因为使用 B+ 树访问磁盘数据有更高的性能。&lt;/p&gt;
&lt;p&gt;（一）B+ 树有更低的树高&lt;/p&gt;
&lt;p&gt;平衡树的树高 O(h)=O(log&lt;!-- raw HTML omitted --&gt;d&lt;!-- raw HTML omitted --&gt;N)，其中 d 为每个节点的出度。红黑树的出度为 2，而 B+ Tree 的出度一般都非常大，所以红黑树的树高 h 很明显比 B+ Tree 大非常多。&lt;/p&gt;
&lt;p&gt;（二）磁盘访问原理&lt;/p&gt;
&lt;p&gt;操作系统一般将内存和磁盘分割成固定大小的块，每一块称为一页，内存与磁盘以页为单位交换数据。数据库系统将索引的一个节点的大小设置为页的大小，使得一次 I/O 就能完全载入一个节点。&lt;/p&gt;
&lt;p&gt;如果数据不在同一个磁盘块上，那么通常需要移动制动手臂进行寻道，而制动手臂因为其物理结构导致了移动效率低下，从而增加磁盘数据读取时间。B+ 树相对于红黑树有更低的树高，进行寻道的次数与树高成正比，在同一个磁盘块上进行访问只需要很短的磁盘旋转时间，所以 B+ 树更适合磁盘数据的读取。&lt;/p&gt;
&lt;p&gt;（三）磁盘预读特性&lt;/p&gt;
&lt;p&gt;为了减少磁盘 I/O 操作，磁盘往往不是严格按需读取，而是每次都会预读。预读过程中，磁盘进行顺序读取，顺序读取不需要进行磁盘寻道，并且只需要很短的磁盘旋转时间，速度会非常快。并且可以利用预读特性，相邻的节点也能够被预先载入。&lt;/p&gt;
&lt;h3 id=&#34;12-mysql索引&#34;&gt;1.2 MySQL索引&lt;/h3&gt;
&lt;h4 id=&#34;121-b树索引&#34;&gt;1.2.1 B+树索引&lt;/h4&gt;
&lt;p&gt;是大多数 MySQL 存储引擎的默认索引类型。&lt;/p&gt;
&lt;p&gt;因为不再需要进行全表扫描，只需要对树进行搜索即可，所以查找速度快很多。&lt;/p&gt;
&lt;p&gt;因为 B+ Tree 的有序性，所以除了用于查找，还可以用于排序和分组。&lt;/p&gt;
&lt;p&gt;可以指定多个列作为索引列，多个索引列共同组成键。&lt;/p&gt;
&lt;p&gt;适用于全键值、键值范围和键前缀查找，其中键前缀查找只适用于最左前缀查找。如果不是按照索引列的顺序进行查找，则无法使用索引。&lt;/p&gt;
&lt;p&gt;InnoDB 的 B+Tree 索引分为主索引和辅助索引。主索引的叶子节点 data 域记录着完整的数据记录，这种索引方式被称为聚簇索引。因为无法把数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/45016e98-6879-4709-8569-262b2d6d60b9.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;辅助索引的叶子节点的 data 域记录着主键的值，因此在使用辅助索引进行查找时，需要先查找到主键值，然后再到主索引中进行查找。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/7c349b91-050b-4d72-a7f8-ec86320307ea.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;122-哈希索引&#34;&gt;1.2.2 哈希索引&lt;/h4&gt;
&lt;p&gt;哈希索引能以 O(1) 时间进行查找，但是失去了有序性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无法用于排序与分组；&lt;/li&gt;
&lt;li&gt;只支持精确查找，无法用于部分查找和范围查找。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;InnoDB 存储引擎有一个特殊的功能叫“自适应哈希索引”，当某个索引值被使用的非常频繁时，会在 B+Tree 索引之上再创建一个哈希索引，这样就让 B+Tree 索引具有哈希索引的一些优点，比如快速的哈希查找。&lt;/p&gt;
&lt;h4 id=&#34;123-全文索引&#34;&gt;1.2.3 全文索引&lt;/h4&gt;
&lt;p&gt;MyISAM 存储引擎支持全文索引，用于查找文本中的关键词，而不是直接比较是否相等。&lt;/p&gt;
&lt;p&gt;查找条件使用 MATCH AGAINST，而不是普通的 WHERE。&lt;/p&gt;
&lt;p&gt;全文索引使用倒排索引实现，它记录着关键词到其所在文档的映射。&lt;/p&gt;
&lt;p&gt;InnoDB 存储引擎在 MySQL 5.6.4 版本中也开始支持全文索引。&lt;/p&gt;
&lt;h4 id=&#34;124-空间数据索引&#34;&gt;1.2.4 空间数据索引&lt;/h4&gt;
&lt;p&gt;MyISAM 存储引擎支持空间数据索引（R-Tree），可以用于地理数据存储。空间数据索引会从所有维度来索引数据，可以有效地使用任意维度来进行组合查询。&lt;/p&gt;
&lt;p&gt;必须使用 GIS 相关的函数来维护数据。&lt;/p&gt;
&lt;h3 id=&#34;13-索引优化&#34;&gt;1.3 索引优化&lt;/h3&gt;
&lt;h4 id=&#34;131-独立的列&#34;&gt;1.3.1. 独立的列&lt;/h4&gt;
&lt;p&gt;在进行查询时，索引列不能是表达式的一部分，也不能是函数的参数，否则无法使用索引。&lt;/p&gt;
&lt;p&gt;例如下面的查询不能使用 actor_id 列的索引：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;actor_id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sakila&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;actor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;actor_id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;132-多列索引&#34;&gt;1.3.2. 多列索引&lt;/h4&gt;
&lt;p&gt;在需要使用多个列作为条件进行查询时，使用多列索引比使用多个单列索引性能更好。例如下面的语句中，最好把 actor_id 和 film_id 设置为多列索引。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;film_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;actor_&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sakila&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;film_actor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;actor_id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;film_id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;133-索引列的顺序&#34;&gt;1.3.3. 索引列的顺序&lt;/h4&gt;
&lt;p&gt;让选择性最强的索引列放在前面。&lt;/p&gt;
&lt;p&gt;索引的选择性是指：不重复的索引值和记录总数的比值。最大值为 1，此时每个记录都有唯一的索引与其对应。选择性越高，每个记录的区分度越高，查询效率也越高。&lt;/p&gt;
&lt;p&gt;例如下面显示的结果中 customer_id 的选择性比 staff_id 更高，因此最好把 customer_id 列放在多列索引的前面。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COUNT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DISTINCT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;staff_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COUNT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;staff_id_selectivity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COUNT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DISTINCT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;customer_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COUNT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;customer_id_selectivity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COUNT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;payment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   staff_id_selectivity: 0.0001
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;customer_id_selectivity: 0.0373
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               COUNT(*): 16049
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;134-前缀索引&#34;&gt;1.3.4. 前缀索引&lt;/h4&gt;
&lt;p&gt;对于 BLOB、TEXT 和 VARCHAR 类型的列，必须使用前缀索引，只索引开始的部分字符。&lt;/p&gt;
&lt;p&gt;前缀长度的选取需要根据索引选择性来确定。&lt;/p&gt;
&lt;h4 id=&#34;135-覆盖索引&#34;&gt;1.3.5. 覆盖索引&lt;/h4&gt;
&lt;p&gt;索引包含所有需要查询的字段的值。&lt;/p&gt;
&lt;p&gt;具有以下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;索引通常远小于数据行的大小，只读取索引能大大减少数据访问量。&lt;/li&gt;
&lt;li&gt;一些存储引擎（例如 MyISAM）在内存中只缓存索引，而数据依赖于操作系统来缓存。因此，只访问索引可以不使用系统调用（通常比较费时）。&lt;/li&gt;
&lt;li&gt;对于 InnoDB 引擎，若辅助索引能够覆盖查询，则无需访问主索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;14-索引的优点&#34;&gt;1.4 索引的优点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;大大减少了服务器需要扫描的数据行数。&lt;/li&gt;
&lt;li&gt;帮助服务器避免进行排序和分组，以及避免创建临时表（B+Tree 索引是有序的，可以用于 ORDER BY 和 GROUP BY 操作。临时表主要是在排序和分组过程中创建，不需要排序和分组，也就不需要创建临时表）。&lt;/li&gt;
&lt;li&gt;将随机 I/O 变为顺序 I/O（B+Tree 索引是有序的，会将相邻的数据都存储在一起）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;15-索引的使用条件&#34;&gt;1.5 索引的使用条件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对于非常小的表、大部分情况下简单的全表扫描比建立索引更高效；&lt;/li&gt;
&lt;li&gt;对于中到大型的表，索引就非常有效；&lt;/li&gt;
&lt;li&gt;但是对于特大型的表，建立和维护索引的代价将会随之增长。这种情况下，需要用到一种技术可以直接区分出需要查询的一组数据，而不是一条记录一条记录地匹配，例如可以使用分区技术。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;16-mysql里的索引类型&#34;&gt;1.6 MySQL里的索引类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;普通索引&lt;/li&gt;
&lt;li&gt;唯一索引&lt;/li&gt;
&lt;li&gt;主键索引&lt;/li&gt;
&lt;li&gt;组合索引&lt;/li&gt;
&lt;li&gt;全文索引&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;17-聚簇索引和非聚簇索引&#34;&gt;1.7 聚簇索引和非聚簇索引&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;聚簇索引也叫簇类索引，是一种对磁盘上实际数据重新组织以按指定的一个或多个列的值排序。（聚簇索引就是主键的一种术语）&lt;/li&gt;
&lt;li&gt;非聚簇索引，叶级页指向表中的记录，记录的物理顺序与逻辑顺序没有必然的联系。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;或者：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;聚簇索引：规定存储在磁盘上的数据是连续的，这个连续是指&lt;strong&gt;物理顺序就是连续&lt;/strong&gt;的。&lt;/li&gt;
&lt;li&gt;非聚簇索引：既然聚簇索引是连续的，那非聚簇索引就是不连续的。索引的存储和数据的存储是分离的，也就是说找到了索引但没找到数据，需要根据索引上的值(主键)再次回表查询,非聚簇索引也叫做辅助索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;p&gt;第一种，直接根据主键查询获取所有字段数据，此时主键是聚簇索引，因为主键对应的索引叶子节点存储了id=1的所有字段的值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;student&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;第二种，根据编号查询编号和名称，编号本身是一个唯一索引，但查询的列包含了学生编号和学生名称，当命中编号索引时，该索引的节点的数据存储的是主键ID，需要根据主键ID重新查询一次，所以这种查询下no不是聚簇索引&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;student&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;第三种，我们根据编号查询编号（有人会问知道编号了还要查询？要，你可能需要验证该编号在数据库中是否存在），这种查询命中编号索引时，直接返回编号，因为所需要的数据就是该索引，不需要回表查询，这种场景下no是聚簇索引&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;student&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主键一定是聚簇索引，MySQL的InnoDB中一定有主键，即便研发人员不手动设置，则会使用unique索引，没有unique索引，则会使用数据库内部的一个行的id来当作主键索引,其它普通索引需要区分SQL场景，当SQL查询的列就是索引本身时，我们称这种场景下该普通索引也可以叫做聚簇索引，MyisAM引擎没有聚簇索引。&lt;/p&gt;
&lt;h3 id=&#34;18-回表查询&#34;&gt;1.8 回表查询&lt;/h3&gt;
&lt;p&gt;要说回表查询，先要从InnoDB的索引实现说起。InnoDB有两大类索引，一类是聚集索引(Clustered Index)，一类是非聚簇索引(Secondary Index)。&lt;/p&gt;
&lt;p&gt;InnoDB的聚集索引：InnoDB聚集索引的叶子节点存储行记录，因此InnoDB必须要有且只有一个聚集索引。&lt;/p&gt;
&lt;p&gt;1.如果表定义了PK(Primary Key，主键)，那么PK就是聚集索引。&lt;/p&gt;
&lt;p&gt;2.如果表没有定义PK，则第一个NOT NULL UNIQUE的列就是聚集索引。&lt;/p&gt;
&lt;p&gt;3.否则InnoDB会另外创建一个隐藏的ROWID作为聚集索引。&lt;/p&gt;
&lt;p&gt;这种机制使得基于PK的查询速度非常快，因为直接定位的行记录。&lt;/p&gt;
&lt;p&gt;InnoDB的普通索引：InnoDB普通索引的叶子节点存储主键ID(MyISAM则是存储的行记录头指针)。&lt;/p&gt;
&lt;p&gt;回表查询：先通过非聚簇索引查询主键ID，再通过主键ID查询数据。&lt;/p&gt;
&lt;h2 id=&#34;2-查询性能优化&#34;&gt;2 查询性能优化&lt;/h2&gt;
&lt;h3 id=&#34;21-explain&#34;&gt;2.1 Explain&lt;/h3&gt;
&lt;p&gt;Explain 用来分析 SELECT 查询语句，开发人员可以通过分析 Explain 结果来优化查询语句。&lt;/p&gt;
&lt;p&gt;比较重要的字段有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;select_type : 查询类型，有简单查询、联合查询、子查询等&lt;/li&gt;
&lt;li&gt;key : 使用的索引&lt;/li&gt;
&lt;li&gt;rows : 扫描的行数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22-优化数据访问&#34;&gt;2.2 优化数据访问&lt;/h3&gt;
&lt;h4 id=&#34;221-减少请求的数据量&#34;&gt;2.2.1 减少请求的数据量&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;只返回必要的列：最好不要使用 SELECT * 语句。&lt;/li&gt;
&lt;li&gt;只返回必要的行：使用 LIMIT 语句来限制返回的数据。&lt;/li&gt;
&lt;li&gt;缓存重复查询的数据：使用缓存可以避免在数据库中进行查询，特别在要查询的数据经常被重复查询时，缓存带来的查询性能提升将会是非常明显的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;222-减少扫描的行数&#34;&gt;2.2.2 减少扫描的行数&lt;/h4&gt;
&lt;p&gt;最有效的方式是使用索引来覆盖查询。&lt;/p&gt;
&lt;h3 id=&#34;23-重构查询方式&#34;&gt;2.3 重构查询方式&lt;/h3&gt;
&lt;h4 id=&#34;231-切分大查询&#34;&gt;2.3.1 切分大查询&lt;/h4&gt;
&lt;p&gt;一个大查询如果一次性执行的话，可能一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询。&lt;/p&gt;
&lt;h4 id=&#34;232-分解大连接查询&#34;&gt;2.3.2 分解大连接查询&lt;/h4&gt;
&lt;p&gt;将一个大连接查询分解成对每一个表进行一次单表查询，然后在应用程序中进行关联，这样做的好处有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;让缓存更高效。对于连接查询，如果其中一个表发生变化，那么整个查询缓存就无法使用。而分解后的多个查询，即使其中一个表发生变化，对其它表的查询缓存依然可以使用。&lt;/li&gt;
&lt;li&gt;分解成多个单表查询，这些单表查询的缓存结果更可能被其它查询使用到，从而减少冗余记录的查询。&lt;/li&gt;
&lt;li&gt;减少锁竞争；&lt;/li&gt;
&lt;li&gt;在应用层进行连接，可以更容易对数据库进行拆分，从而更容易做到高性能和可伸缩。&lt;/li&gt;
&lt;li&gt;查询本身效率也可能会有所提升。例如下面的例子中，使用 IN() 代替连接查询，可以让 MySQL 按照 ID 顺序进行查询，这可能比随机的连接要更高效。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-存储引擎&#34;&gt;3 存储引擎&lt;/h2&gt;
&lt;h3 id=&#34;31-innodb&#34;&gt;3.1 InnoDB&lt;/h3&gt;
&lt;p&gt;是 MySQL 默认的事务型存储引擎，只有在需要它不支持的特性时，才考虑使用其它存储引擎。&lt;/p&gt;
&lt;p&gt;实现了四个标准的隔离级别，默认级别是可重复读（REPEATABLE READ）。在可重复读隔离级别下，通过多版本并发控制（MVCC）+ Next-Key Locking 防止幻影读。&lt;/p&gt;
&lt;p&gt;主索引是聚簇索引，在索引中保存了数据，从而避免直接读取磁盘，因此对查询性能有很大的提升。&lt;/p&gt;
&lt;p&gt;内部做了很多优化，包括从磁盘读取数据时采用的可预测性读、能够加快读操作并且自动创建的自适应哈希索引、能够加速插入操作的插入缓冲区等。&lt;/p&gt;
&lt;p&gt;支持真正的在线热备份。其它存储引擎不支持在线热备份，要获取一致性视图需要停止对所有表的写入，而在读写混合场景中，停止写入可能也意味着停止读取。&lt;/p&gt;
&lt;h3 id=&#34;32-myisam&#34;&gt;3.2 MyISAM&lt;/h3&gt;
&lt;p&gt;设计简单，数据以紧密格式存储。对于只读数据，或者表比较小、可以容忍修复操作，则依然可以使用它。&lt;/p&gt;
&lt;p&gt;提供了大量的特性，包括压缩表、空间数据索引等。&lt;/p&gt;
&lt;p&gt;不支持事务。&lt;/p&gt;
&lt;p&gt;不支持行级锁，只能对整张表加锁，读取时会对需要读到的所有表加共享锁，写入时则对表加排它锁。但在表有读取操作的同时，也可以往表中插入新的记录，这被称为并发插入（CONCURRENT INSERT）。&lt;/p&gt;
&lt;p&gt;可以手工或者自动执行检查和修复操作，但是和事务恢复以及崩溃恢复不同，可能导致一些数据丢失，而且修复操作是非常慢的。&lt;/p&gt;
&lt;p&gt;如果指定了 DELAY_KEY_WRITE 选项，在每次修改执行完成时，不会立即将修改的索引数据写入磁盘，而是会写到内存中的键缓冲区，只有在清理键缓冲区或者关闭表的时候才会将对应的索引块写入磁盘。这种方式可以极大的提升写入性能，但是在数据库或者主机崩溃时会造成索引损坏，需要执行修复操作。&lt;/p&gt;
&lt;h3 id=&#34;33-区别&#34;&gt;3.3 区别&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;事务：InnoDB 是事务型的，可以使用 Commit 和 Rollback 语句。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;并发：MyISAM 只支持表级锁，而 InnoDB 还支持行级锁。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外键：InnoDB 支持外键。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;备份：InnoDB 支持在线热备份。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;崩溃恢复：MyISAM 崩溃后发生损坏的概率比 InnoDB 高很多，而且恢复的速度也更慢。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其它特性：MyISAM 支持压缩表和空间数据索引。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-数据类型&#34;&gt;4 数据类型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;整型：tinyint、smallint、mediumint、int、bigint&lt;/li&gt;
&lt;li&gt;浮点数：float、double、decimal&lt;/li&gt;
&lt;li&gt;字符串：char、varchar&lt;/li&gt;
&lt;li&gt;时间和日期：datetime、timestamp&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-分表&#34;&gt;5 分表&lt;/h2&gt;
&lt;h3 id=&#34;51-水平切分&#34;&gt;5.1 水平切分&lt;/h3&gt;
&lt;p&gt;水平切分又称为 Sharding，它是将同一个表中的记录拆分到多个结构相同的表中。&lt;/p&gt;
&lt;p&gt;当一个表的数据不断增多时，Sharding 是必然的选择，它可以将数据分布到集群的不同节点上，从而缓存单个数据库的压力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/63c2909f-0c5f-496f-9fe5-ee9176b31aba.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;52-垂直切分&#34;&gt;5.2 垂直切分&lt;/h3&gt;
&lt;p&gt;垂直切分是将一张表按列切分成多个表，通常是按照列的关系密集程度进行切分，也可以利用垂直切分将经常被使用的列和不经常被使用的列切分到不同的表中。&lt;/p&gt;
&lt;p&gt;在数据库的层面使用垂直切分将按数据库中表的密集程度部署到不同的库中，例如将原来的电商数据库垂直切分成商品数据库、用户数据库等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e130e5b8-b19a-4f1e-b860-223040525cf6.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;53-sharding-策略&#34;&gt;5.3 Sharding 策略&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;哈希取模：hash(key) % N；&lt;/li&gt;
&lt;li&gt;范围：可以是 ID 范围也可以是时间范围；&lt;/li&gt;
&lt;li&gt;映射表：使用单独的一个数据库来存储映射关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;54-sharding-存在的问题&#34;&gt;5.4 Sharding 存在的问题&lt;/h3&gt;
&lt;h4 id=&#34;541-事务问题&#34;&gt;5.4.1. 事务问题&lt;/h4&gt;
&lt;p&gt;使用分布式事务来解决，比如 XA 接口。&lt;/p&gt;
&lt;h4 id=&#34;542-连接&#34;&gt;5.4.2. 连接&lt;/h4&gt;
&lt;p&gt;可以将原来的连接分解成多个单表查询，然后在用户程序中进行连接。&lt;/p&gt;
&lt;h4 id=&#34;543-id-唯一性&#34;&gt;5.4.3. ID 唯一性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;使用全局唯一 ID（GUID）&lt;/li&gt;
&lt;li&gt;为每个分片指定一个 ID 范围&lt;/li&gt;
&lt;li&gt;分布式 ID 生成器 (如 Twitter 的 Snowflake 算法)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-复制&#34;&gt;6 复制&lt;/h2&gt;
&lt;h3 id=&#34;61-主从复制&#34;&gt;6.1 主从复制&lt;/h3&gt;
&lt;p&gt;主要涉及三个线程：binlog 线程、I/O 线程和 SQL 线程。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;binlog 线程&lt;/strong&gt;  ：负责将主服务器上的数据更改写入二进制日志（Binary log）中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I/O 线程&lt;/strong&gt;  ：负责从主服务器上读取二进制日志，并写入从服务器的中继日志（Relay log）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SQL 线程&lt;/strong&gt;  ：负责读取中继日志，解析出主服务器已经执行的数据更改并在从服务器中重放（Replay）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/master-slave.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;62-读写分离&#34;&gt;6.2 读写分离&lt;/h3&gt;
&lt;p&gt;主服务器处理写操作以及实时性要求比较高的读操作，而从服务器处理读操作。&lt;/p&gt;
&lt;p&gt;读写分离能提高性能的原因在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主从服务器负责各自的读和写，极大程度缓解了锁的争用；&lt;/li&gt;
&lt;li&gt;从服务器可以使用 MyISAM，提升查询性能以及节约系统开销；&lt;/li&gt;
&lt;li&gt;增加冗余，提高可用性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;读写分离常用代理方式来实现，代理服务器接收应用层传来的读写请求，然后决定转发到哪个服务器。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;三redis&#34;&gt;三、Redis&lt;/h1&gt;
&lt;h2 id=&#34;1-概述&#34;&gt;1 概述&lt;/h2&gt;
&lt;p&gt;Redis 是速度非常快的非关系型（NoSQL）内存键值数据库，可以存储键和五种不同类型的值之间的映射。&lt;/p&gt;
&lt;p&gt;键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。&lt;/p&gt;
&lt;p&gt;Redis 支持很多特性，例如将内存中的数据持久化到硬盘中，使用复制来扩展读性能，使用分片来扩展写性能。&lt;/p&gt;
&lt;h2 id=&#34;2-数据类型&#34;&gt;2 数据类型&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;数据类型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;可以存储的值&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;操作&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;STRING&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;字符串、整数或者浮点数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;对整个字符串或者字符串的其中一部分执行操作&amp;lt;/br&amp;gt; 对整数和浮点数执行自增或者自减操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;LIST&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;列表&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从两端压入或者弹出元素 &amp;lt;/br&amp;gt; 对单个或者多个元素进行修剪，&amp;lt;/br&amp;gt; 只保留一个范围内的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;SET&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无序集合&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;添加、获取、移除单个元素&amp;lt;/br&amp;gt; 检查一个元素是否存在于集合中&amp;lt;/br&amp;gt; 计算交集、并集、差集&amp;lt;/br&amp;gt; 从集合里面随机获取元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;HASH&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;包含键值对的无序散列表&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;添加、获取、移除单个键值对&amp;lt;/br&amp;gt; 获取所有键值对&amp;lt;/br&amp;gt; 检查某个键是否存在&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ZSET&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;有序集合&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;添加、获取、删除元素&amp;lt;/br&amp;gt; 根据分值范围或者成员来获取元素&amp;lt;/br&amp;gt; 计算一个键的排名&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;3-数据结构&#34;&gt;3 数据结构&lt;/h2&gt;
&lt;h3 id=&#34;31-字典&#34;&gt;3.1 字典&lt;/h3&gt;
&lt;p&gt;dictht 是一个散列表结构，使用拉链法解决哈希冲突。&lt;/p&gt;
&lt;h3 id=&#34;32-跳跃表&#34;&gt;3.2 跳跃表&lt;/h3&gt;
&lt;p&gt;是有序集合的底层实现之一。&lt;/p&gt;
&lt;p&gt;跳跃表是基于多指针有序链表实现的，可以看成多个有序链表。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/beba612e-dc5b-4fc2-869d-0b23408ac90a.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在查找时，从上层指针开始查找，找到对应的区间之后再到下一层去查找。下图演示了查找 22 的过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/0ea37ee2-c224-4c79-b895-e131c6805c40.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;与红黑树等平衡树相比，跳跃表具有以下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入速度非常快速，因为不需要进行旋转等操作来维护平衡性；&lt;/li&gt;
&lt;li&gt;更容易实现；&lt;/li&gt;
&lt;li&gt;支持无锁操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-使用场景&#34;&gt;4 使用场景&lt;/h2&gt;
&lt;h3 id=&#34;41-计数器&#34;&gt;4.1 计数器&lt;/h3&gt;
&lt;p&gt;可以对 String 进行自增自减运算，从而实现计数器功能。&lt;/p&gt;
&lt;p&gt;Redis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。&lt;/p&gt;
&lt;h3 id=&#34;42-缓存&#34;&gt;4.2 缓存&lt;/h3&gt;
&lt;p&gt;将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。&lt;/p&gt;
&lt;h3 id=&#34;43-查找表&#34;&gt;4.3 查找表&lt;/h3&gt;
&lt;p&gt;例如 DNS 记录就很适合使用 Redis 进行存储。&lt;/p&gt;
&lt;p&gt;查找表和缓存类似，也是利用了 Redis 快速的查找特性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。&lt;/p&gt;
&lt;h3 id=&#34;44-消息队列&#34;&gt;4.4 消息队列&lt;/h3&gt;
&lt;p&gt;List 是一个双向链表，可以通过 lpush 和 rpop 写入和读取消息&lt;/p&gt;
&lt;p&gt;不过最好使用 Kafka、RabbitMQ 等消息中间件。&lt;/p&gt;
&lt;h3 id=&#34;45-会话缓存&#34;&gt;4.5 会话缓存&lt;/h3&gt;
&lt;p&gt;可以使用 Redis 来统一存储多台应用服务器的会话信息。&lt;/p&gt;
&lt;p&gt;当应用服务器不再存储用户的会话信息，也就不再具有状态，一个用户可以请求任意一个应用服务器，从而更容易实现高可用性以及可伸缩性。&lt;/p&gt;
&lt;h3 id=&#34;46-分布式锁&#34;&gt;4.6 分布式锁&lt;/h3&gt;
&lt;p&gt;在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。&lt;/p&gt;
&lt;p&gt;可以使用 Redis 自带的 SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。&lt;/p&gt;
&lt;h3 id=&#34;47-其他&#34;&gt;4.7 其他&lt;/h3&gt;
&lt;p&gt;Set 可以实现交集、并集等操作，从而实现共同好友等功能。&lt;/p&gt;
&lt;p&gt;ZSet 可以实现有序性操作，从而实现排行榜等功能。&lt;/p&gt;
&lt;h2 id=&#34;5-键的过期时间&#34;&gt;5 键的过期时间&lt;/h2&gt;
&lt;p&gt;Redis 可以为每个键设置过期时间，当键过期时，会自动删除该键。&lt;/p&gt;
&lt;p&gt;对于散列表这种容器，只能为整个键设置过期时间（整个散列表），而不能为键里面的单个元素设置过期时间。&lt;/p&gt;
&lt;h2 id=&#34;6-数据淘汰策略&#34;&gt;6 数据淘汰策略&lt;/h2&gt;
&lt;p&gt;可以设置内存最大使用量，当内存使用量超出时，会施行数据淘汰策略。&lt;/p&gt;
&lt;p&gt;Redis 具体有 6 种淘汰策略：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;策略&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;volatile-lru&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从已设置过期时间的数据集中挑选最近最少使用的数据淘汰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;volatile-ttl&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从已设置过期时间的数据集中挑选将要过期的数据淘汰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;volatile-random&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从已设置过期时间的数据集中任意选择数据淘汰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;allkeys-lru&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从所有数据集中挑选最近最少使用的数据淘汰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;allkeys-random&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从所有数据集中任意选择数据进行淘汰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;noeviction&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;禁止驱逐数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;作为内存数据库，出于对性能和内存消耗的考虑，Redis 的淘汰算法实际实现上并非针对所有 key，而是抽样一小部分并且从中选出被淘汰的 key。&lt;/p&gt;
&lt;p&gt;使用 Redis 缓存数据时，为了提高缓存命中率，需要保证缓存数据都是热点数据。可以将内存最大使用量设置为热点数据占用的内存量，然后启用 allkeys-lru 淘汰策略，将最近最少使用的数据淘汰。&lt;/p&gt;
&lt;p&gt;Redis 4.0 引入了 volatile-lfu 和 allkeys-lfu 淘汰策略，LFU 策略通过统计访问频率，将访问频率最少的键值对淘汰。&lt;/p&gt;
&lt;h2 id=&#34;7-持久化&#34;&gt;7 持久化&lt;/h2&gt;
&lt;p&gt;Redis 是内存型数据库，为了保证数据在断电后不会丢失，需要将内存中的数据持久化到硬盘上。&lt;/p&gt;
&lt;h3 id=&#34;71-rdb&#34;&gt;7.1 RDB&lt;/h3&gt;
&lt;p&gt;将某个时间点的所有数据都存放到硬盘上。&lt;/p&gt;
&lt;p&gt;可以将快照复制到其它服务器从而创建具有相同数据的服务器副本。&lt;/p&gt;
&lt;p&gt;如果系统发生故障，将会丢失最后一次创建快照之后的数据。&lt;/p&gt;
&lt;p&gt;如果数据量很大，保存快照的时间会很长。&lt;/p&gt;
&lt;h3 id=&#34;72-aof&#34;&gt;7.2 AOF&lt;/h3&gt;
&lt;p&gt;将写命令添加到 AOF 文件（Append Only File）的末尾。&lt;/p&gt;
&lt;p&gt;使用 AOF 持久化需要设置同步选项，从而确保写命令同步到磁盘文件上的时机。这是因为对文件进行写入并不会马上将内容同步到磁盘上，而是先存储到缓冲区，然后由操作系统决定什么时候同步到磁盘。有以下同步选项：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;选项&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;同步频率&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;always&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;每个写命令都同步&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;everysec&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;每秒同步一次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;no&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;让操作系统来决定何时同步&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;always 选项会严重减低服务器的性能；&lt;/li&gt;
&lt;li&gt;everysec 选项比较合适，可以保证系统崩溃时只会丢失一秒左右的数据，并且 Redis 每秒执行一次同步对服务器性能几乎没有任何影响；&lt;/li&gt;
&lt;li&gt;no 选项并不能给服务器性能带来多大的提升，而且也会增加系统崩溃时数据丢失的数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;随着服务器写请求的增多，AOF 文件会越来越大。Redis 提供了一种将 AOF 重写的特性，能够去除 AOF 文件中的冗余写命令。&lt;/p&gt;
&lt;h2 id=&#34;8-事务&#34;&gt;8 事务&lt;/h2&gt;
&lt;p&gt;一个事务包含了多个命令，服务器在执行事务期间，不会改去执行其它客户端的命令请求。&lt;/p&gt;
&lt;p&gt;事务中的多个命令被一次性发送给服务器，而不是一条一条发送，这种方式被称为流水线，它可以减少客户端与服务器之间的网络通信次数从而提升性能。&lt;/p&gt;
&lt;p&gt;Redis 最简单的事务实现方式是使用 MULTI 和 EXEC 命令将事务操作包围起来。&lt;/p&gt;
&lt;h2 id=&#34;9-事件&#34;&gt;9 事件&lt;/h2&gt;
&lt;p&gt;Redis 服务器是一个事件驱动程序。&lt;/p&gt;
&lt;h3 id=&#34;91-文件事件&#34;&gt;9.1 文件事件&lt;/h3&gt;
&lt;p&gt;服务器通过套接字与客户端或者其它服务器进行通信，文件事件就是对套接字操作的抽象。&lt;/p&gt;
&lt;p&gt;Redis 基于 Reactor 模式开发了自己的网络事件处理器，使用 I/O 多路复用程序来同时监听多个套接字，并将到达的事件传送给文件事件分派器，分派器会根据套接字产生的事件类型调用相应的事件处理器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/9ea86eb5-000a-4281-b948-7b567bd6f1d8.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;92-时间事件&#34;&gt;9.2 时间事件&lt;/h3&gt;
&lt;p&gt;服务器有一些操作需要在给定的时间点执行，时间事件是对这类定时操作的抽象。&lt;/p&gt;
&lt;p&gt;时间事件又分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定时事件：是让一段程序在指定的时间之内执行一次；&lt;/li&gt;
&lt;li&gt;周期性事件：是让一段程序每隔指定时间就执行一次。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redis 将所有时间事件都放在一个无序链表中，通过遍历整个链表查找出已到达的时间事件，并调用相应的事件处理器。&lt;/p&gt;
&lt;h3 id=&#34;93-事件的调度与执行&#34;&gt;9.3 事件的调度与执行&lt;/h3&gt;
&lt;p&gt;服务器需要不断监听文件事件的套接字才能得到待处理的文件事件，但是不能一直监听，否则时间事件无法在规定的时间内执行，因此监听时间应该根据距离现在最近的时间事件来决定。&lt;/p&gt;
&lt;p&gt;从事件处理的角度来看，服务器运行流程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/c0a9fa91-da2e-4892-8c9f-80206a6f7047.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;10-复制&#34;&gt;10 复制&lt;/h2&gt;
&lt;p&gt;通过使用 slaveof host port 命令来让一个服务器成为另一个服务器的从服务器。&lt;/p&gt;
&lt;p&gt;一个从服务器只能有一个主服务器，并且不支持主主复制。&lt;/p&gt;
&lt;h3 id=&#34;101-连接过程&#34;&gt;10.1 连接过程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;主服务器创建快照文件，发送给从服务器，并在发送期间使用缓冲区记录执行的写命令。快照文件发送完毕之后，开始向从服务器发送存储在缓冲区中的写命令；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从服务器丢弃所有旧数据，载入主服务器发来的快照文件，之后从服务器开始接受主服务器发来的写命令；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主服务器每执行一次写命令，就向从服务器发送相同的写命令。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;102-主从链&#34;&gt;10.2 主从链&lt;/h3&gt;
&lt;p&gt;随着负载不断上升，主服务器可能无法很快地更新所有从服务器，或者重新连接和重新同步从服务器将导致系统超载。为了解决这个问题，可以创建一个中间层来分担主服务器的复制工作。中间层的服务器是最上层服务器的从服务器，又是最下层服务器的主服务器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/395a9e83-b1a1-4a1d-b170-d081e7bb5bab.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;11-哨兵&#34;&gt;11 哨兵&lt;/h2&gt;
&lt;p&gt;Sentinel（哨兵）可以监听集群中的服务器，并在主服务器进入下线状态时，自动从从服务器中选举出新的主服务器。&lt;/p&gt;
&lt;h2 id=&#34;12-分片&#34;&gt;12 分片&lt;/h2&gt;
&lt;p&gt;分片是将数据划分为多个部分的方法，可以将数据存储到多台机器里面，这种方法在解决某些问题时可以获得线性级别的性能提升。&lt;/p&gt;
&lt;p&gt;假设有 4 个 Redis 实例 R0，R1，R2，R3，还有很多表示用户的键 user:1，user:2，&amp;hellip; ，有不同的方式来选择一个指定的键存储在哪个实例中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最简单的方式是范围分片，例如用户 id 从 0~1000 的存储到实例 R0 中，用户 id 从 1001~2000 的存储到实例 R1 中，等等。但是这样需要维护一张映射范围表，维护操作代价很高。&lt;/li&gt;
&lt;li&gt;还有一种方式是哈希分片，使用 CRC32 哈希函数将键转换为一个数字，再对实例数量求模就能知道应该存储的实例。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据执行分片的位置，可以分为三种分片方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端分片：客户端使用一致性哈希等算法决定键应当分布到哪个节点。&lt;/li&gt;
&lt;li&gt;代理分片：将客户端请求发送到代理上，由代理转发请求到正确的节点上。&lt;/li&gt;
&lt;li&gt;服务器分片：Redis Cluster。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;13-io多路复用&#34;&gt;13 IO多路复用&lt;/h2&gt;
&lt;h3 id=&#34;131-什么是io多路复用&#34;&gt;13.1 什么是IO多路复用&lt;/h3&gt;
&lt;p&gt;IO多路复用是一种同步IO模型，实现一个线程可以监视多个文件句柄；一旦某个文件句柄就绪，就能够通知应用程序进行相应的读写操作；没有文件句柄就绪时会阻塞应用程序，交出cpu。多路是指网络连接，复用指的是同一个线程&lt;/p&gt;
&lt;h3 id=&#34;132-为什么需要io多路复用&#34;&gt;13.2 为什么需要IO多路复用&lt;/h3&gt;
&lt;p&gt;解决BIO和NIO的问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BIO：服务端采用单线程，当accept一个请求后，在recv或send调用阻塞时，将无法accept其他请求（必须等上一个请求处recv或send完），无法处理并发。&lt;/p&gt;
&lt;p&gt;当服务器端采用多线程，当accept一个请求后，开启线程进行recv，可以完成并发处理，但随着请求数增加需要增加系统线程，大量的线程占用很大的内存空间，并且线程切换会带来很大的开销，10000个线程真正发生读写事件的线程数不会超过20%，每次accept都开一个线程也是一种资源浪费&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NIO：服务器端当accept一个请求后，加入fds集合，每次轮询一遍fds集合recv(非阻塞)数据，没有数据则立即返回错误，每次轮询所有fd（包括没有发生读写事件的fd）会很浪费cpu&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IO多路复用：服务器端采用单线程通过select/epoll等系统调用获取fd列表，遍历有事件的fd进行accept/recv/send，使其能支持更多的并发连接请求&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;133-io多路复用的实现方式&#34;&gt;13.3 IO多路复用的实现方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;select&lt;/li&gt;
&lt;li&gt;poll&lt;/li&gt;
&lt;li&gt;epoll&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;134-select缺点&#34;&gt;13.4 select缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;单个进程所打开的FD是有限制的，通过FD_SETSIZE设置，默认1024&lt;/li&gt;
&lt;li&gt;每次调用select，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大&lt;/li&gt;
&lt;li&gt;对socket扫描时是线性扫描（对所有的fds遍历扫描），采用轮询的方法，效率较低（高并发时）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;135-poll与select对比&#34;&gt;13.5 poll与select对比&lt;/h3&gt;
&lt;p&gt;poll与select相比，只是没有fd的限制，其它基本一样&lt;/p&gt;
&lt;h3 id=&#34;136-poll缺点&#34;&gt;13.6 poll缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每次调用poll，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大&lt;/li&gt;
&lt;li&gt;对socket扫描时是线性扫描，采用轮询的方法，效率较低（高并发时）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;137-epoll缺点&#34;&gt;13.7 epoll缺点&lt;/h3&gt;
&lt;p&gt;epoll只能工作在linux下&lt;/p&gt;
&lt;h3 id=&#34;138-epoll的应用&#34;&gt;13.8 epoll的应用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;nginx&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;139-selectpollepoll之间的区别&#34;&gt;13.9 select/poll/epoll之间的区别&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;select&lt;/th&gt;
&lt;th&gt;poll&lt;/th&gt;
&lt;th&gt;epoll&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;数据结构&lt;/td&gt;
&lt;td&gt;bitmap&lt;/td&gt;
&lt;td&gt;数组&lt;/td&gt;
&lt;td&gt;红黑树&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;最大连接数&lt;/td&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;td&gt;无上限&lt;/td&gt;
&lt;td&gt;无上限&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fd拷贝&lt;/td&gt;
&lt;td&gt;每次调用select拷贝&lt;/td&gt;
&lt;td&gt;每次调用poll拷贝&lt;/td&gt;
&lt;td&gt;fd首次调用epoll_ctl拷贝，每次调用epoll_wait不拷贝&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;工作效率&lt;/td&gt;
&lt;td&gt;轮询：O(n)&lt;/td&gt;
&lt;td&gt;轮询：O(n)&lt;/td&gt;
&lt;td&gt;回调：O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;1310-epoll-lt和et模式的区别&#34;&gt;13.10 epoll LT和ET模式的区别&lt;/h3&gt;
&lt;p&gt;epoll有EPOLLLT和EPOLLET两种触发模式，LT是默认的模式，ET是“高速”模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LT模式下，只要这个fd还有数据可读，每次 epoll_wait都会返回它的事件，提醒用户程序去操作&lt;/li&gt;
&lt;li&gt;ET模式下，它只会提示一次，直到下次再有数据流入之前都不会再提示了，无论fd中是否还有数据可读。所以在ET模式下，read一个fd的时候一定要把它的buffer读完，或者遇到EAGAIN错误&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;本文转载自：https://github.com/CyC2018/CS-Notes，用于个人复习。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
