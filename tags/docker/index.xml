<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on Cuterwrite's Blog</title><link>https://cuterwrite.top/tags/docker/</link><description>Recent content in Docker on Cuterwrite's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>cuterwrite</copyright><lastBuildDate>Wed, 12 Jun 2024 19:00:00 +0000</lastBuildDate><atom:link href="https://cuterwrite.top/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker Hub 镜像下架解决方案</title><link>https://cuterwrite.top/p/dockerhub-takedown/</link><pubDate>Wed, 12 Jun 2024 19:00:00 +0000</pubDate><guid>https://cuterwrite.top/p/dockerhub-takedown/</guid><description>&lt;img src="https://cuterwrite-1302252842.file.myqcloud.com/img/2024-05-28_crop_68935d3d33a3abc75c797b67ad25160f195413.webp" alt="Featured image of post Docker Hub 镜像下架解决方案" />&lt;h1 id="docker-hub-镜像下架解决方案">Docker Hub 镜像下架解决方案&lt;/h1>
&lt;p>Docker Hub 作为 Docker 官方的镜像仓库，拥有着丰富的镜像资源， 极大地方便了开发者获取和使用各种软件和服务。然而，从 2024 年 6 月 6 日开始，国内各大镜像站点陆续出现了 Docker Hub 镜像下架的情况，包括阿里云、科大、南大、上交等全部挂掉，导致很多开发者无法正常拉取镜像。在执行 &lt;code>docker pull&lt;/code> 命令拉取镜像 docker 镜像时无反应，会一直循环尝试。&lt;/p>
&lt;figure>&lt;img src="https://cuterwrite-1302252842.file.myqcloud.com/img/2024-06-13_takedown-dockerhub.webp"
alt="2024-06-13_takedown-dockerhub" width="auto" loading="lazy">
&lt;/figure>
&lt;p>Docker Hub 镜像下架的可能原因主要为一些镜像包含违规内容，导致上面信息监管部门出了最新要求，要求各大镜像站点下架相关镜像。&lt;/p>
&lt;h2 id="解决方案">解决方案&lt;/h2>
&lt;p>面对 Docker Hub 镜像下架问题，目前我们可以通过以下几种方式解决：&lt;/p>
&lt;h3 id="1-使用-atomhub-镜像站点">1. 使用 AtomHub 镜像站点&lt;/h3>
&lt;p>AtomHub 是由开放原子开源基金会发起，遵循 OCI 标准，旨在为开发者提供开放中立、安全可信、高效便捷的新一代开源容器镜像中心。其具有官方背书，是当前唯一正常的 Docker Hub 镜像站点。&lt;/p>
&lt;p>不过，AtomHub 的问题是镜像数量较少，目前只有几百个镜像文件；以及，部分软件的版本较旧。&lt;/p>
&lt;h4 id="配置-atomhub-镜像站点">配置 AtomHub 镜像站点&lt;/h4>
&lt;ul>
&lt;li>修改 /etc/docker/daemon.json 文件，添加以下内容：&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-json">{
&amp;quot;registry-mirrors&amp;quot;: [&amp;quot;https://atomhub.openatom.cn&amp;quot;]
}
&lt;/code>&lt;/pre>
&lt;h4 id="重启-docker-服务">重启 Docker 服务：&lt;/h4>
&lt;pre>&lt;code class="language-bash">sudo systemctl daemon-reload
sudo systemctl restart docker
&lt;/code>&lt;/pre>
&lt;p>然后就可以正常拉取一些常用镜像了。但是，如果你需要的镜像不在 AtomHub 上，这个方法就不适用了。&lt;/p>
&lt;h3 id="2-配置-vpn-代理">2. 配置 VPN 代理&lt;/h3>
&lt;p>通过配置 VPN 代理，可以访问被屏蔽的 Docker Hub 源站点，从而拉取镜像。但是，这种方法需要自备 VPN 服务，且速度可能较慢且不稳定。&lt;/p>
&lt;h4 id="配置方法">配置方法&lt;/h4>
&lt;ul>
&lt;li>创建 &lt;code>/etc/systemd/system/docker.service.d/http-proxy.conf&lt;/code> 文件，并添加以下内容：&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">[Service]
Environment=&amp;quot;HTTP_PROXY=http://your_proxy_server:port&amp;quot;
Environment=&amp;quot;HTTPS_PROXY=http://your_proxy_server:port&amp;quot;
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>重启 Docker 服务：&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">sudo systemctl daemon-reload
sudo systemctl restart docker
&lt;/code>&lt;/pre>
&lt;h3 id="3-使用-skopeo-拷贝镜像到私有镜像仓库">3. 使用 Skopeo 拷贝镜像到私有镜像仓库&lt;/h3>
&lt;p>Skopeo 是一个命令行工具，可以用于在不同的镜像仓库之间复制、检查和签名镜像。该方法需要一台海外云主机，且需要没有被墙。&lt;/p>
&lt;h4 id="具体步骤">具体步骤&lt;/h4>
&lt;p>这里以阿里云私有镜像仓库为例，将 Docker Hub 上的镜像复制到阿里云私有镜像仓库。&lt;/p>
&lt;ul>
&lt;li>首先，你需要启用&lt;a class="link" href="https://cr.console.aliyun.com/" target="_blank" rel="noopener" >阿里云容器镜像服务
&lt;span style="white-space: nowrap;">&lt;svg width=".8em" height=".8em" viewBox="0 0 21 21"
xmlns="http://www.w3.org/2000/svg">
&lt;path d="m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z" fill="currentColor" />
&lt;path d="M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z"
fill="currentColor">
&lt;/svg>&lt;/span>
&lt;/a>
，创建一个个人实例：&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://cuterwrite-1302252842.file.myqcloud.com/img/2024-06-13_aliyun-container.webp"
alt="2024-06-13_aliyun-container" width="90%" loading="lazy">
&lt;/figure>
&lt;ul>
&lt;li>进入个人实例，创建一个命名空间：&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://cuterwrite-1302252842.file.myqcloud.com/img/2024-06-13_create-namespace.webp"
alt="2024-06-13_create-namespace" width="90%" loading="lazy">
&lt;/figure>
&lt;ul>
&lt;li>创建一个镜像仓库（对应你想要复制的镜像）：&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://cuterwrite-1302252842.file.myqcloud.com/img/2024-06-13_create-repository.webp"
alt="2024-06-13_create-repository" width="90%" loading="lazy">
&lt;/figure>
&lt;ul>
&lt;li>设置访问凭证：&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://cuterwrite-1302252842.file.myqcloud.com/img/2024-06-13_set-pass.webp"
alt="2024-06-13_set-pass" width="90%" loading="lazy">
&lt;/figure>
&lt;ul>
&lt;li>然后，登录到你的海外云主机，先安装 Skopeo：&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -y skopeo
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>使用 Skopeo 拷贝镜像：&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">docker login --username=yourusername registry.cn-hangzhou.aliyuncs.com
skopeo copy docker://docker.io/library/image:tag docker://registry.cn-hangzhou.aliyuncs.com/yournamespace/yourimage:tag
&lt;/code>&lt;/pre>
&lt;h3 id="4-部署私有镜像仓库">4. 部署私有镜像仓库&lt;/h3>
&lt;p>除了以上方法，还可以通过最近一大佬开源的 &lt;a class="link" href="https://github.com/dqzboy/Docker-Proxy" target="_blank" rel="noopener" >Docker-Proxy
&lt;span style="white-space: nowrap;">&lt;svg width=".8em" height=".8em" viewBox="0 0 21 21"
xmlns="http://www.w3.org/2000/svg">
&lt;path d="m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z" fill="currentColor" />
&lt;path d="M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z"
fill="currentColor">
&lt;/svg>&lt;/span>
&lt;/a>
项目搭建自己的私有镜像仓库。&lt;/p>
&lt;a href="https://github.com/dqzboy/Docker-Proxy" target="_blank" class="card-github fetch-waiting no-styling"
repo="dqzboy/Docker-Proxy" id="repo-VSoalKoHOElGvQ46-card">
&lt;div class="gc-titlebar">
&lt;div class="gc-titlebar-left">
&lt;div class="gc-owner">
&lt;div id="repo-VSoalKoHOElGvQ46-avatar" class="gc-avatar">&lt;/div>
&lt;div class="gc-user">dqzboy&lt;/div>
&lt;/div>
&lt;div class="gc-divider">/&lt;/div>
&lt;div class="gc-repo">Docker-Proxy&lt;/div>
&lt;/div>
&lt;div class="github-logo">&lt;/div>
&lt;/div>
&lt;div id="repo-VSoalKoHOElGvQ46-description" class="gc-description">Waiting for api.github.com...&lt;/div>
&lt;div class="gc-infobar">
&lt;div id="repo-VSoalKoHOElGvQ46-stars" class="gc-stars">0&lt;/div>
&lt;div id="repo-VSoalKoHOElGvQ46-forks" class="gc-forks">0&lt;/div>
&lt;div id="repo-VSoalKoHOElGvQ46-license" class="gc-license">unkown&lt;/div>
&lt;div id="repo-VSoalKoHOElGvQ46-language" class="gc-language">Waiting...&lt;/div>
&lt;/div>
&lt;/a>
&lt;script id="repo-VSoalKoHOElGvQ46-script" type="text/javascript" defer>
fetch('https://api.cuterwrite.top/api/repos/dqzboy\/Docker-Proxy', {
referrerPolicy: "no-referrer"
})
.then(response => response.json())
.then(data => {
document.getElementById('repo-VSoalKoHOElGvQ46-description').innerText = data.description.replace(
/:[a-zA-Z0-9_]+:/g, '');
document.getElementById('repo-VSoalKoHOElGvQ46-language').innerText = data.language;
document.getElementById('repo-VSoalKoHOElGvQ46-forks').innerText = Intl.NumberFormat('en-us', {
notation: "compact",
maximumFractionDigits: 1
}).format(data.forks).replaceAll("\u202f", '');
document.getElementById('repo-VSoalKoHOElGvQ46-stars').innerText = Intl.NumberFormat('en-us', {
notation: "compact",
maximumFractionDigits: 1
}).format(data.stargazers_count).replaceAll("\u202f", '');
const avatarEl = document.getElementById('repo-VSoalKoHOElGvQ46-avatar');
avatarEl.style.backgroundImage = 'url(' + data.owner.avatar_url + ')';
avatarEl.style.backgroundColor = 'transparent';
if (data.license?.spdx_id) {
document.getElementById('repo-VSoalKoHOElGvQ46-license').innerText = data.license.spdx_id
} else {
document.getElementById('repo-VSoalKoHOElGvQ46-license').classList.add = "no-license"
};
document.getElementById('repo-VSoalKoHOElGvQ46-card').classList.remove("fetch-waiting");
console.log("[GITHUB-CARD] Loaded card for dqzboy\/Docker-Proxy.")
}).catch(err => {
const c = document.getElementById('repo-VSoalKoHOElGvQ46-card');
c.classList.add("fetch-error");
console.warn("[GITHUB-CARD] (Error) Loading card for dqzboy\/Docker-Proxy.")
})
&lt;/script>
&lt;p>该方法也需要一台海外云主机，且需要没有被墙；以及一个域名（不需要备案）。&lt;/p>
&lt;h4 id="部署">部署&lt;/h4>
&lt;p>目前项目提供了三种部署方式，我采用的是第一种方式，使用项目脚本一键部署。&lt;/p>
&lt;ul>
&lt;li>使用项目脚本一键部署：&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash"># CentOS
yum -y install wget curl
# ubuntu
apt -y install wget curl
bash -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/dqzboy/Docker-Proxy/main/install/DockerProxy_Install.sh)&amp;quot;
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>
&lt;p>部署到 Render&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/dqzboy/Docker-Proxy/blob/main/Render/README.md" target="_blank" rel="noopener" >使用 Render 快速部署
&lt;span style="white-space: nowrap;">&lt;svg width=".8em" height=".8em" viewBox="0 0 21 21"
xmlns="http://www.w3.org/2000/svg">
&lt;path d="m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z" fill="currentColor" />
&lt;path d="M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z"
fill="currentColor">
&lt;/svg>&lt;/span>
&lt;/a>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Docker Compose 部署&lt;/p>
&lt;ol>
&lt;li>下载 config 目录下对应的 yml 文件到你本地机器上&lt;/li>
&lt;li>下载 &lt;a class="link" href="https://github.com/dqzboy/Docker-Proxy/blob/main/docker-compose.yaml" target="_blank" rel="noopener" >docker-compose.yaml
&lt;span style="white-space: nowrap;">&lt;svg width=".8em" height=".8em" viewBox="0 0 21 21"
xmlns="http://www.w3.org/2000/svg">
&lt;path d="m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z" fill="currentColor" />
&lt;path d="M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z"
fill="currentColor">
&lt;/svg>&lt;/span>
&lt;/a>
文件到你本地机器上，并且与配置文件同级目录下&lt;/li>
&lt;li>执行 &lt;code>docker compose&lt;/code> 命令启动容器服务&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-bash">docker compose up -d
# 查看容器日志
docker logs -f [容器 ID 或名称]
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;p>最后，需要登录域名解析方，将 &lt;code>hub&lt;/code>、&lt;code>gcr&lt;/code>、&lt;code>ghcr&lt;/code>、&lt;code>k8s-gcr&lt;/code>、&lt;code>ui&lt;/code>、&lt;code>quay&lt;/code> 等 A 记录解析到你的海外云主机 IPv4 地址，然后就可以将 &lt;code>/etc/docker/daemon.json&lt;/code> 中的 &lt;strong>registry-mirrors&lt;/strong> 设置为 &lt;code>https://hub.yourdomain&lt;/code> 进行镜像加速了。&lt;/p></description></item></channel></rss>