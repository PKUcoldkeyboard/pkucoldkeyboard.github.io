<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>操作系统 on cuterwrite</title>
        <link>https://cuterwrite.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
        <description>Recent content in 操作系统 on cuterwrite</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>cuterwrite</copyright>
        <lastBuildDate>Thu, 22 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://cuterwrite.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>计算机基础知识点总结（操作系统&#43;计算机网络）</title>
        <link>https://cuterwrite.top/p/interview-help/</link>
        <pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cuterwrite.top/p/interview-help/</guid>
        <description>&lt;img src="https://cuterwrite-1302252842.file.myqcloud.com/typora/image-hosting-master/image-hosting-master/20210503/rocky-coast-5059912_1920.5upaeily96k0.jpg" alt="Featured image of post 计算机基础知识点总结（操作系统&#43;计算机网络）" /&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;  &lt;em&gt;generated with &lt;a class=&#34;link&#34; href=&#34;https://github.com/thlorenz/doctoc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DocToc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E4%B8%80%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F&#34; &gt;一、操作系统&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB&#34; &gt;1、进程与线程的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F&#34; &gt;2、进程间的通信的几种方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E7%9A%84%E6%96%B9%E5%BC%8F&#34; &gt;3、线程同步的方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E7%9A%84%E6%96%B9%E5%BC%8F&#34; &gt;4、进程同步的方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5%E6%AD%BB%E9%94%81&#34; &gt;5、死锁&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#51%E6%AD%BB%E9%94%81%E7%9A%84%E5%AE%9A%E4%B9%89&#34; &gt;5.1、死锁的定义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#52%E6%AD%BB%E9%94%81%E5%BF%85%E8%A6%81%E6%9D%A1%E4%BB%B6&#34; &gt;5.2、死锁必要条件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#53%E6%AD%BB%E9%94%81%E5%A4%84%E7%90%86&#34; &gt;5.3、死锁处理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81&#34; &gt;6、进程的状态&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#7%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95&#34; &gt;7、进程调度算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#8%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98&#34; &gt;8、虚拟内存&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#9%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95&#34; &gt;9、页面置换算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#10%E5%88%86%E9%A1%B5%E4%B8%8E%E5%88%86%E6%AE%B5%E7%9A%84%E5%8C%BA%E5%88%AB&#34; &gt;10、分页与分段的区别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#%E4%BA%8C%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C&#34; &gt;二、计算机网络&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84&#34; &gt;1、计算机网络体系结构&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#11%E4%BA%94%E5%B1%82%E5%8D%8F%E8%AE%AE&#34; &gt;1.1、五层协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#12osi%E4%B8%83%E5%B1%82%E5%8D%8F%E8%AE%AE&#34; &gt;1.2、OSI七层协议&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2udp%E5%92%8Ctcp%E7%9A%84%E7%89%B9%E7%82%B9&#34; &gt;2、UDP和TCP的特点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3udp%E9%A6%96%E9%83%A8%E6%A0%BC%E5%BC%8F&#34; &gt;3、UDP首部格式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4tcp%E9%A6%96%E9%83%A8%E6%A0%BC%E5%BC%8F&#34; &gt;4、TCP首部格式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B&#34; &gt;5、TCP三次握手&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6tcp%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B&#34; &gt;6、TCP四次挥手&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#7tcp%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93&#34; &gt;7、TCP可靠传输&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#8tcp%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3&#34; &gt;8、TCP滑动窗口&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#9tcp-%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6&#34; &gt;9、TCP 流量控制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#10tcp-%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6&#34; &gt;10、TCP 拥塞控制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#11%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F&#34; &gt;11、域名系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#12ftp%E5%8D%8F%E8%AE%AE&#34; &gt;12、FTP协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#13dhcp%E5%8D%8F%E8%AE%AE&#34; &gt;13、DHCP协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#14ssh%E5%8D%8F%E8%AE%AE&#34; &gt;14、SSH协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#15smtp%E5%8D%8F%E8%AE%AE&#34; &gt;15、SMTP协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#16web%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B&#34; &gt;16、Web页面请求过程&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#161-dhcp-%E9%85%8D%E7%BD%AE%E4%B8%BB%E6%9C%BA%E4%BF%A1%E6%81%AF&#34; &gt;16.1. DHCP 配置主机信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#162-arp-%E8%A7%A3%E6%9E%90-mac-%E5%9C%B0%E5%9D%80&#34; &gt;16.2. ARP 解析 MAC 地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#163-dns-%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D&#34; &gt;16.3. DNS 解析域名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#164-http-%E8%AF%B7%E6%B1%82%E9%A1%B5%E9%9D%A2&#34; &gt;16.4. HTTP 请求页面&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;一操作系统&#34;&gt;一、操作系统&lt;/h1&gt;
&lt;h2 id=&#34;1进程与线程的区别&#34;&gt;1、进程与线程的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;进程是对运行时程序的封装，是系统进行资源调度和分配的的基本单位，实现了操作系统的并发；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程是进程的子任务，是CPU调度和分派的基本单位，用于保证程序的 实时性，实现进程内部的并发；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个程序至少有一个进程，一个进程至少有一个线程，线程依赖于进程而存在；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程在执行过程中拥有独立的内存单元，而多个线程共享进程的内存。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2进程间的通信的几种方式&#34;&gt;2、进程间的通信的几种方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;管道（pipe）及命名管道（named pipe）：管道可用于具有亲缘关系的父子进程间的通信，有名管道除了具有管道所具有的功能外，它还允许无亲缘关系进程间的通信；&lt;/li&gt;
&lt;li&gt;信号（signal）：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；&lt;/li&gt;
&lt;li&gt;消息队列：消息队列是消息的链接表，它克服了上两种通信方式中信号量有限的缺点，具有写权限得进程可以按照一定得规则向消息队列中添加新信息；对消息队列有读权限得进程则可以从消息队列中读取信息；&lt;/li&gt;
&lt;li&gt;共享内存：可以说这是最有用的进程间通信方式。它使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据得更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等；&lt;/li&gt;
&lt;li&gt;信号量：主要作为进程之间及同一种进程的不同线程之间得同步和互斥手段；&lt;/li&gt;
&lt;li&gt;套接字：这是一种更为一般得进程间通信机制，它可用于网络中不同机器之间的进程间通信，应用非常广泛。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3线程同步的方式&#34;&gt;3、线程同步的方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;互斥量 Synchronized/Lock：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问&lt;/li&gt;
&lt;li&gt;信号量 Semphare：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量&lt;/li&gt;
&lt;li&gt;事件(信号)，Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4进程同步的方式&#34;&gt;4、进程同步的方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;临界区：对临界资源进行访问的那段代码称为临界区。为了互斥访问临界资源，每个进程在进入临界区之前，需要先进行检查。&lt;/li&gt;
&lt;li&gt;同步与互斥&lt;/li&gt;
&lt;li&gt;信号量&lt;/li&gt;
&lt;li&gt;管程：有一个重要特性：在一个时刻只能有一个进程使用管程。进程在无法继续执行的时候不能一直占用管程，否则其它进程永远不能使用管程。管程引入了   &lt;strong&gt;条件变量&lt;/strong&gt;   以及相关的操作：&lt;strong&gt;wait()&lt;/strong&gt; 和 &lt;strong&gt;signal()&lt;/strong&gt; 来实现同步操作。对条件变量执行 wait() 操作会导致调用进程阻塞，把管程让出来给另一个进程持有。signal() 操作用于唤醒被阻塞的进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5死锁&#34;&gt;5、死锁&lt;/h2&gt;
&lt;h3 id=&#34;51死锁的定义&#34;&gt;5.1、死锁的定义&lt;/h3&gt;
&lt;p&gt;在两个或者多个并发进程中，如果每个进程持有某种资源而又等待其它进程释放它或它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁。通俗的讲，就是两个或多个进程无限期的阻塞、相互等待的一种状态。&lt;/p&gt;
&lt;h3 id=&#34;52死锁必要条件&#34;&gt;5.2、死锁必要条件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;互斥：每个资源要么已经分配给了一个进程，要么就是可用的。&lt;/li&gt;
&lt;li&gt;占有和等待：已经得到了某个资源的进程可以再请求新的资源。&lt;/li&gt;
&lt;li&gt;不可抢占：已经分配给一个进程的资源不能强制性地被抢占，它只能被占有它的进程显式地释放。&lt;/li&gt;
&lt;li&gt;环路等待：有两个或者两个以上的进程组成一条环路，该环路中的每个进程都在等待下一个进程所占有的资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;53死锁处理&#34;&gt;5.3、死锁处理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;鸵鸟策略：把头埋在沙子里，假装根本没发生问题。因为解决死锁问题的代价很高，因此鸵鸟策略这种不采取任务措施的方案会获得更高的性能。当发生死锁时不会对用户造成多大影响，或发生死锁的概率很低，可以采用鸵鸟策略。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;死锁检测与死锁恢复：不试图阻止死锁，而是当检测到死锁发生时，采取措施进行恢复。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每种类型一个资源的死锁检测：通过检测有向图是否存在环来实现，从一个节点出发进行深度优先搜索，对访问过的节点进行标记，如果访问了已经标记的节点，就表示有向图存在环，也就是检测到死锁的发生。&lt;/li&gt;
&lt;li&gt;每种类型多个资源的死锁检测：每个进程最开始时都不被标记，执行过程有可能被标记。当算法结束时，任何没有被标记的进程都是死锁进程。
&lt;ol&gt;
&lt;li&gt;寻找一个没有标记的进程 P&lt;!-- raw HTML omitted --&gt;i&lt;!-- raw HTML omitted --&gt;，它所请求的资源小于等于 A。&lt;/li&gt;
&lt;li&gt;如果找到了这样一个进程，那么将 C 矩阵的第 i 行向量加到 A 中，标记该进程，并转回 1。&lt;/li&gt;
&lt;li&gt;如果没有这样一个进程，算法终止。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;死锁恢复：在&lt;strong&gt;程序运行&lt;/strong&gt;之前预防发生死锁。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;破坏互斥条件&lt;/li&gt;
&lt;li&gt;破坏占有和等待条件&lt;/li&gt;
&lt;li&gt;破坏不可抢占条件&lt;/li&gt;
&lt;li&gt;破坏环路等待条件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;死锁避免：在&lt;strong&gt;程序运行&lt;/strong&gt;时避免发生死锁。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安全状态：如果没有死锁发生，并且即使所有进程突然请求对资源的最大需求，也仍然存在某种调度次序能够使得每一个进程运行完毕，则称该状态是安全的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;银行家算法：检查一个状态是否安全的算法如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查找右边的矩阵是否存在一行小于等于向量 A。如果不存在这样的行，那么系统将会发生死锁，状态是不安全的。&lt;/li&gt;
&lt;li&gt;假若找到这样一行，将该进程标记为终止，并将其已分配资源加到 A 中。&lt;/li&gt;
&lt;li&gt;重复以上两步，直到所有进程都标记为终止，则状态是安全的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果一个状态不是安全的，需要拒绝进入这个状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6进程的状态&#34;&gt;6、进程的状态&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ready&lt;/li&gt;
&lt;li&gt;running&lt;/li&gt;
&lt;li&gt;waiting&lt;/li&gt;
&lt;li&gt;只有ready和running可以相互转换，其它都是单向转换。就绪状态的进程通过调度算法从而获得 CPU 时间，转为运行状态；而运行状态的进程，在分配给它的 CPU 时间片用完之后就会转为就绪状态，等待下一次调度。&lt;/li&gt;
&lt;li&gt;阻塞状态是缺少需要的资源从running状态转换而来，但是该资源不包括CPU时间，缺少CPU时间会从running变成ready。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7进程调度算法&#34;&gt;7、进程调度算法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;先来先服务 first-come first-serverd（FCFS）：非抢占式的调度算法，按照请求的顺序进行调度。有利于长作业，但不利于短作业，因为短作业必须一直等待前面的长作业执行完毕才能执行，而长作业又需要执行很长时间，造成了短作业等待时间过长。&lt;/li&gt;
&lt;li&gt;短作业优先 shortest job first（SJF）：非抢占式的调度算法，按估计运行时间最短的顺序进行调度。长作业有可能会饿死，处于一直等待短作业执行完毕的状态。因为如果一直有短作业到来，那么长作业永远得不到调度。&lt;/li&gt;
&lt;li&gt;最短剩余时间优先 shortest remaining time next（SRTN）：最短作业优先的抢占式版本，按剩余运行时间的顺序进行调度。 当一个新的作业到达时，其整个运行时间与当前进程的剩余时间作比较。如果新的进程需要的时间更少，则挂起当前进程，运行新的进程。否则新的进程等待。&lt;/li&gt;
&lt;li&gt;时间片轮转：将所有就绪进程按 FCFS 的原则排成一个队列，每次调度时，把 CPU 时间分配给队首进程，该进程可以执行一个时间片。当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把 CPU 时间分配给队首的进程。&lt;/li&gt;
&lt;li&gt;优先级调度：每个进程分配一个优先级，按优先级进行调度。为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。&lt;/li&gt;
&lt;li&gt;多级反馈队列：可以将这种调度算法看成是时间片轮转调度算法和优先级调度算法的结合。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8虚拟内存&#34;&gt;8、虚拟内存&lt;/h2&gt;
&lt;p&gt;虚拟内存的目的是为了让物理内存扩充成更大的逻辑内存，从而让程序获得更多的可用内存。&lt;/p&gt;
&lt;p&gt;为了更好的管理内存，操作系统将内存抽象成地址空间。每个程序拥有自己的地址空间，这个地址空间被分割成多个块，每一块称为一页。这些页被映射到物理内存，但不需要映射到连续的物理内存，也不需要所有页都必须在物理内存中。当程序引用到不在物理内存中的页时，由硬件执行必要的映射，将缺失的部分装入物理内存并重新执行失败的指令。&lt;/p&gt;
&lt;h2 id=&#34;9页面置换算法&#34;&gt;9、页面置换算法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OPT&lt;/li&gt;
&lt;li&gt;LRU&lt;/li&gt;
&lt;li&gt;LFU&lt;/li&gt;
&lt;li&gt;FIFO&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;10分页与分段的区别&#34;&gt;10、分页与分段的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对程序员的透明性：分页透明，但是分段需要程序员显式划分每个段。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;地址空间的维度：分页是一维地址空间，分段是二维的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大小是否可以改变：页的大小不可变，段的大小可以动态改变。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;出现的原因：分页主要用于实现虚拟内存，从而获得更大的地址空间；分段主要是为了使程序和数据可以被划分为逻辑上独立的地址空间并且有助于共享和保护。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;二计算机网络&#34;&gt;二、计算机网络&lt;/h1&gt;
&lt;h2 id=&#34;1计算机网络体系结构&#34;&gt;1、计算机网络体系结构&lt;/h2&gt;
&lt;h3 id=&#34;11五层协议&#34;&gt;1.1、五层协议&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;应用层&lt;/li&gt;
&lt;li&gt;运输层&lt;/li&gt;
&lt;li&gt;网络层&lt;/li&gt;
&lt;li&gt;数据链路层&lt;/li&gt;
&lt;li&gt;物理层&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12osi七层协议&#34;&gt;1.2、OSI七层协议&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;应用层：&lt;strong&gt;为特定应用程序提供数据传输服务&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;表示层：数据压缩、加密以及数据描述&lt;/li&gt;
&lt;li&gt;会话层：建立和管理回话&lt;/li&gt;
&lt;li&gt;运输层：提供的是&lt;strong&gt;进程间的通用数据传输服务&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;网络层：&lt;strong&gt;为主机间提供数据传输服务&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;数据链路层：主机之间可以有很多链路，链路层协议就是为同一链路的节点提供服务。数据链路层把网络层传来的&lt;strong&gt;分组封装成帧&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;物理层：&lt;strong&gt;尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2udp和tcp的特点&#34;&gt;2、UDP和TCP的特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。&lt;/li&gt;
&lt;li&gt;传输控制协议 TCP（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3udp首部格式&#34;&gt;3、UDP首部格式&lt;/h2&gt;
&lt;p&gt;首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。12 字节的伪首部是为了计算检验和临时添加的。&lt;/p&gt;
&lt;h2 id=&#34;4tcp首部格式&#34;&gt;4、TCP首部格式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;序号&lt;/strong&gt;   ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确认号&lt;/strong&gt;   ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据偏移&lt;/strong&gt;   ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确认 ACK&lt;/strong&gt;   ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;同步 SYN&lt;/strong&gt;   ：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;终止 FIN&lt;/strong&gt;   ：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;窗口&lt;/strong&gt;   ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5tcp三次握手&#34;&gt;5、TCP三次握手&lt;/h2&gt;
&lt;p&gt;假设 A 为客户端，B 为服务器端。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。&lt;/li&gt;
&lt;li&gt;A 向 B 发送连接请求报文，SYN=1，ACK=0，选择一个初始的序号 x。&lt;/li&gt;
&lt;li&gt;B 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 y。&lt;/li&gt;
&lt;li&gt;A 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。&lt;/li&gt;
&lt;li&gt;B 收到 A 的确认后，连接建立。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;三次握手的原因&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。&lt;/p&gt;
&lt;p&gt;客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务器端发回的连接确认。客户端等待一个超时重传时间之后，就会重新请求连接。但是这个滞留的连接请求最后还是会到达服务器，如果不进行三次握手，那么服务器就会打开两个连接。如果有第三次握手，客户端会忽略服务器之后发送的对滞留连接请求的连接确认，不进行第三次握手，因此就不会再次打开连接。&lt;/p&gt;
&lt;h2 id=&#34;6tcp四次挥手&#34;&gt;6、TCP四次挥手&lt;/h2&gt;
&lt;p&gt;以下描述不讨论序号和确认号，因为序号和确认号的规则比较简单。并且不讨论 ACK，因为 ACK 在连接建立之后都为 1。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A 发送连接释放报文，FIN=1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当 B 不再需要连接时，发送连接释放报文，FIN=1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B 收到 A 的确认后释放连接。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;四次挥手的原因&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TIME_WAIT&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;客户端接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间 2MSL。这么做有两个理由：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保最后一个确认报文能够到达。如果 B 没收到 A 发送来的确认报文，那么就会重新发送连接释放请求报文，A 等待一段时间就是为了处理这种情况的发生。&lt;/li&gt;
&lt;li&gt;等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7tcp可靠传输&#34;&gt;7、TCP可靠传输&lt;/h2&gt;
&lt;p&gt;TCP 使用超时重传来实现可靠传输：如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。&lt;/p&gt;
&lt;h2 id=&#34;8tcp滑动窗口&#34;&gt;8、TCP滑动窗口&lt;/h2&gt;
&lt;p&gt;窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。&lt;/p&gt;
&lt;p&gt;发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。&lt;/p&gt;
&lt;p&gt;接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {34, 35} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。&lt;/p&gt;
&lt;h2 id=&#34;9tcp-流量控制&#34;&gt;9、TCP 流量控制&lt;/h2&gt;
&lt;p&gt;流量控制是为了控制发送方发送速率，保证接收方来得及接收。&lt;/p&gt;
&lt;p&gt;接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。&lt;/p&gt;
&lt;h2 id=&#34;10tcp-拥塞控制&#34;&gt;10、TCP 拥塞控制&lt;/h2&gt;
&lt;p&gt;如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。&lt;/p&gt;
&lt;p&gt;TCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。&lt;/p&gt;
&lt;p&gt;发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。&lt;/p&gt;
&lt;p&gt;为了便于讨论，做如下假设：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收方有足够大的接收缓存，因此不会发生流量控制；&lt;/li&gt;
&lt;li&gt;虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;1、慢开始与拥塞避免&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;发送的最初执行慢开始，令 cwnd = 1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 &amp;hellip;&lt;/p&gt;
&lt;p&gt;注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。设置一个慢开始门限 ssthresh，当 cwnd &amp;gt;= ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。&lt;/p&gt;
&lt;p&gt;如果出现了超时，则令 ssthresh = cwnd / 2，然后重新执行慢开始。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、快重传与快恢复&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在接收方，要求每次接收到报文段都应该对最后一个已收到的有序报文段进行确认。例如已经接收到 M&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; 和 M&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;，此时收到 M&lt;!-- raw HTML omitted --&gt;4&lt;!-- raw HTML omitted --&gt;，应当发送对 M&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; 的确认。&lt;/p&gt;
&lt;p&gt;在发送方，如果收到三个重复确认，那么可以知道下一个报文段丢失，此时执行快重传，立即重传下一个报文段。例如收到三个 M&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;，则 M&lt;!-- raw HTML omitted --&gt;3&lt;!-- raw HTML omitted --&gt; 丢失，立即重传 M&lt;!-- raw HTML omitted --&gt;3&lt;!-- raw HTML omitted --&gt;。&lt;/p&gt;
&lt;p&gt;在这种情况下，只是丢失个别报文段，而不是网络拥塞。因此执行快恢复，令 ssthresh = cwnd / 2 ，cwnd = ssthresh，注意到此时直接进入拥塞避免。&lt;/p&gt;
&lt;p&gt;慢开始和快恢复的快慢指的是 cwnd 的设定值，而不是 cwnd 的增长速率。慢开始 cwnd 设定为 1，而快恢复 cwnd 设定为 ssthresh。&lt;/p&gt;
&lt;h2 id=&#34;11域名系统&#34;&gt;11、域名系统&lt;/h2&gt;
&lt;p&gt;DNS 是一个分布式数据库，提供了主机名和 IP 地址之间相互转换的服务。这里的分布式数据库是指，每个站点只保留它自己的那部分数据。&lt;/p&gt;
&lt;p&gt;域名具有层次结构，从上到下依次为：根域名、顶级域名、二级域名。&lt;/p&gt;
&lt;p&gt;DNS 可以使用 UDP 或者 TCP 进行传输，使用的端口号都为 53。大多数情况下 DNS 使用 UDP 进行传输，这就要求域名解析器和域名服务器都必须自己处理超时和重传从而保证可靠性。在两种情况下会使用 TCP 进行传输：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果返回的响应超过的 512 字节（UDP 最大只支持 512 字节的数据）。&lt;/li&gt;
&lt;li&gt;区域传送（区域传送是主域名服务器向辅助域名服务器传送变化的那部分数据）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12ftp协议&#34;&gt;12、FTP协议&lt;/h2&gt;
&lt;p&gt;FTP 使用 TCP 进行连接，它需要两个连接来传送一个文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控制连接：服务器打开端口号 21 等待客户端的连接，客户端主动建立连接后，使用这个连接将客户端的命令传送给服务器，并传回服务器的应答。&lt;/li&gt;
&lt;li&gt;数据连接：用来传送一个文件数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据数据连接是否是服务器端主动建立，FTP 有主动和被动两种模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主动模式：服务器端主动建立数据连接，其中服务器端的端口号为 20，客户端的端口号随机，但是必须大于 1024，因为 0~1023 是熟知端口号。&lt;/li&gt;
&lt;li&gt;被动模式：客户端主动建立数据连接，其中客户端的端口号由客户端自己指定，服务器端的端口号随机。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主动模式要求客户端开放端口号给服务器端，需要去配置客户端的防火墙。被动模式只需要服务器端开放端口号即可，无需客户端配置防火墙。但是被动模式会导致服务器端的安全性减弱，因为开放了过多的端口号。&lt;/p&gt;
&lt;h2 id=&#34;13dhcp协议&#34;&gt;13、DHCP协议&lt;/h2&gt;
&lt;p&gt;DHCP (Dynamic Host Configuration Protocol) 提供了即插即用的连网方式，用户不再需要手动配置 IP 地址等信息。&lt;/p&gt;
&lt;p&gt;DHCP 配置的内容不仅是 IP 地址，还包括子网掩码、网关 IP 地址。&lt;/p&gt;
&lt;p&gt;DHCP 工作过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端发送 Discover 报文，该报文的目的地址为 255.255.255.255:67，源地址为 0.0.0.0:68，被放入 UDP 中，该报文被广播到同一个子网的所有主机上。如果客户端和 DHCP 服务器不在同一个子网，就需要使用中继代理。&lt;/li&gt;
&lt;li&gt;DHCP 服务器收到 Discover 报文之后，发送 Offer 报文给客户端，该报文包含了客户端所需要的信息。因为客户端可能收到多个 DHCP 服务器提供的信息，因此客户端需要进行选择。&lt;/li&gt;
&lt;li&gt;如果客户端选择了某个 DHCP 服务器提供的信息，那么就发送 Request 报文给该 DHCP 服务器。&lt;/li&gt;
&lt;li&gt;DHCP 服务器发送 Ack 报文，表示客户端此时可以使用提供给它的信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;14ssh协议&#34;&gt;14、SSH协议&lt;/h2&gt;
&lt;p&gt;TELNET 用于登录到远程主机上，并且远程主机上的输出也会返回。&lt;/p&gt;
&lt;p&gt;TELNET 可以适应许多计算机和操作系统的差异，例如不同操作系统系统的换行符定义。&lt;/p&gt;
&lt;h2 id=&#34;15smtp协议&#34;&gt;15、SMTP协议&lt;/h2&gt;
&lt;p&gt;一个电子邮件系统由三部分组成：用户代理、邮件服务器以及邮件协议。&lt;/p&gt;
&lt;p&gt;邮件协议包含发送协议和读取协议，发送协议常用 SMTP，读取协议常用 POP3 和 IMAP。&lt;/p&gt;
&lt;p&gt;SMTP 只能发送 ASCII 码，而互联网邮件扩充 MIME 可以发送二进制文件。MIME 并没有改动或者取代 SMTP，而是增加邮件主体的结构，定义了非 ASCII 码的编码规则。&lt;/p&gt;
&lt;p&gt;POP3 的特点是只要用户从服务器上读取了邮件，就把该邮件删除。但最新版本的 POP3 可以不删除邮件。&lt;/p&gt;
&lt;p&gt;IMAP 协议中客户端和服务器上的邮件保持同步，如果不手动删除邮件，那么服务器上的邮件也不会被删除。IMAP 这种做法可以让用户随时随地去访问服务器上的邮件。&lt;/p&gt;
&lt;h2 id=&#34;16web页面请求过程&#34;&gt;16、Web页面请求过程&lt;/h2&gt;
&lt;h3 id=&#34;161-dhcp-配置主机信息&#34;&gt;16.1. DHCP 配置主机信息&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;假设主机最开始没有 IP 地址以及其它信息，那么就需要先使用 DHCP 来获取。&lt;/li&gt;
&lt;li&gt;主机生成一个 DHCP 请求报文，并将这个报文放入具有目的端口 67 和源端口 68 的 UDP 报文段中。&lt;/li&gt;
&lt;li&gt;该报文段则被放入在一个具有广播 IP 目的地址(255.255.255.255) 和源 IP 地址（0.0.0.0）的 IP 数据报中。&lt;/li&gt;
&lt;li&gt;该数据报则被放置在 MAC 帧中，该帧具有目的地址 FF:&amp;lt;zero-width space&amp;gt;FF:&amp;lt;zero-width space&amp;gt;FF:&amp;lt;zero-width space&amp;gt;FF:&amp;lt;zero-width space&amp;gt;FF:FF，将广播到与交换机连接的所有设备。&lt;/li&gt;
&lt;li&gt;连接在交换机的 DHCP 服务器收到广播帧之后，不断地向上分解得到 IP 数据报、UDP 报文段、DHCP 请求报文，之后生成 DHCP ACK 报文，该报文包含以下信息：IP 地址、DNS 服务器的 IP 地址、默认网关路由器的 IP 地址和子网掩码。该报文被放入 UDP 报文段中，UDP 报文段有被放入 IP 数据报中，最后放入 MAC 帧中。&lt;/li&gt;
&lt;li&gt;该帧的目的地址是请求主机的 MAC 地址，因为交换机具有自学习能力，之前主机发送了广播帧之后就记录了 MAC 地址到其转发接口的交换表项，因此现在交换机就可以直接知道应该向哪个接口发送该帧。&lt;/li&gt;
&lt;li&gt;主机收到该帧后，不断分解得到 DHCP 报文。之后就配置它的 IP 地址、子网掩码和 DNS 服务器的 IP 地址，并在其 IP 转发表中安装默认网关。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;162-arp-解析-mac-地址&#34;&gt;16.2. ARP 解析 MAC 地址&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;主机通过浏览器生成一个 TCP 套接字，套接字向 HTTP 服务器发送 HTTP 请求。为了生成该套接字，主机需要知道网站的域名对应的 IP 地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主机生成一个 DNS 查询报文，该报文具有 53 号端口，因为 DNS 服务器的端口号是 53。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;该 DNS 查询报文被放入目的地址为 DNS 服务器 IP 地址的 IP 数据报中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;该 IP 数据报被放入一个以太网帧中，该帧将发送到网关路由器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DHCP 过程只知道网关路由器的 IP 地址，为了获取网关路由器的 MAC 地址，需要使用 ARP 协议。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主机生成一个包含目的地址为网关路由器 IP 地址的 ARP 查询报文，将该 ARP 查询报文放入一个具有广播目的地址（FF:&amp;lt;zero-width space&amp;gt;FF:&amp;lt;zero-width space&amp;gt;FF:&amp;lt;zero-width space&amp;gt;FF:&amp;lt;zero-width space&amp;gt;FF:FF）的以太网帧中，并向交换机发送该以太网帧，交换机将该帧转发给所有的连接设备，包括网关路由器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网关路由器接收到该帧后，不断向上分解得到 ARP 报文，发现其中的 IP 地址与其接口的 IP 地址匹配，因此就发送一个 ARP 回答报文，包含了它的 MAC 地址，发回给主机。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;163-dns-解析域名&#34;&gt;16.3. DNS 解析域名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;知道了网关路由器的 MAC 地址之后，就可以继续 DNS 的解析过程了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网关路由器接收到包含 DNS 查询报文的以太网帧后，抽取出 IP 数据报，并根据转发表决定该 IP 数据报应该转发的路由器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为路由器具有内部网关协议（RIP、OSPF）和外部网关协议（BGP）这两种路由选择协议，因此路由表中已经配置了网关路由器到达 DNS 服务器的路由表项。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;到达 DNS 服务器之后，DNS 服务器抽取出 DNS 查询报文，并在 DNS 数据库中查找待解析的域名。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找到 DNS 记录之后，发送 DNS 回答报文，将该回答报文放入 UDP 报文段中，然后放入 IP 数据报中，通过路由器反向转发回网关路由器，并经过以太网交换机到达主机。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;164-http-请求页面&#34;&gt;16.4. HTTP 请求页面&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;有了 HTTP 服务器的 IP 地址之后，主机就能够生成 TCP 套接字，该套接字将用于向 Web 服务器发送 HTTP GET 报文。&lt;/li&gt;
&lt;li&gt;在生成 TCP 套接字之前，必须先与 HTTP 服务器进行三次握手来建立连接。生成一个具有目的端口 80 的 TCP SYN 报文段，并向 HTTP 服务器发送该报文段。&lt;/li&gt;
&lt;li&gt;HTTP 服务器收到该报文段之后，生成 TCP SYN ACK 报文段，发回给主机。&lt;/li&gt;
&lt;li&gt;连接建立之后，浏览器生成 HTTP GET 报文，并交付给 HTTP 服务器。&lt;/li&gt;
&lt;li&gt;HTTP 服务器从 TCP 套接字读取 HTTP GET 报文，生成一个 HTTP 响应报文，将 Web 页面内容放入报文主体中，发回给主机。&lt;/li&gt;
&lt;li&gt;浏览器收到 HTTP 响应报文后，抽取出 Web 页面内容，之后进行渲染，显示 Web 页面。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;本文转载自：https://github.com/CyC2018/CS-Notes，用于个人复习。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
